import{_ as s,o as i,c as a,U as e}from"./chunks/framework.njmvNCfc.js";const E=JSON.parse('{"title":"Shared Options","description":"","frontmatter":{},"headers":[],"relativePath":"config/shared-options.md","filePath":"config/shared-options.md"}'),n={name:"config/shared-options.md"},t=e(`<h1 id="shared-options" tabindex="-1">Shared Options <a class="header-anchor" href="#shared-options" aria-label="Permalink to &quot;Shared Options&quot;">​</a></h1><h2 id="root" tabindex="-1">root <a class="header-anchor" href="#root" aria-label="Permalink to &quot;root&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>process.cwd()</code></li></ul><p>Project root directory (where <code>index.html</code> is located). Can be an absolute path, or a path relative to the current working directory.</p><p>See <a href="/guide/#index-html-and-project-root">Project Root</a> for more details.</p><h2 id="base" tabindex="-1">base <a class="header-anchor" href="#base" aria-label="Permalink to &quot;base&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>/</code></li><li><strong>Related:</strong> <a href="/config/server-options.html#server-origin"><code>server.origin</code></a></li></ul><p>Base public path when served in development or production. Valid values include:</p><ul><li>Absolute URL pathname, e.g. <code>/foo/</code></li><li>Full URL, e.g. <code>https://foo.com/</code> (The origin part won&#39;t be used in development)</li><li>Empty string or <code>./</code> (for embedded deployment)</li></ul><p>See <a href="/guide/build.html#public-base-path">Public Base Path</a> for more details.</p><h2 id="mode" tabindex="-1">mode <a class="header-anchor" href="#mode" aria-label="Permalink to &quot;mode&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>&#39;development&#39;</code> for serve, <code>&#39;production&#39;</code> for build</li></ul><p>Specifying this in config will override the default mode for <strong>both serve and build</strong>. This value can also be overridden via the command line <code>--mode</code> option.</p><p>See <a href="/guide/env-and-mode.html">Env Variables and Modes</a> for more details.</p><h2 id="define" tabindex="-1">define <a class="header-anchor" href="#define" aria-label="Permalink to &quot;define&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>Record&lt;string, any&gt;</code></li></ul><p>Define global constant replacements. Entries will be defined as globals during dev and statically replaced during build.</p><p>Vite uses <a href="https://esbuild.github.io/api/#define" target="_blank" rel="noreferrer">esbuild defines</a> to perform replacements, so value expressions must be a string that contains a JSON-serializable value (null, boolean, number, string, array, or object) or a single identifier. For non-string values, Vite will automatically convert it to a string with <code>JSON.stringify</code>.</p><p><strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  define: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    __APP_VERSION__: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;v1.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    __API_URL__: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;window.__backend_api_url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>For TypeScript users, make sure to add the type declarations in the <code>env.d.ts</code> or <code>vite-env.d.ts</code> file to get type checks and Intellisense.</p><p>Example:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vite-env.d.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __APP_VERSION__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span></code></pre></div></div><h2 id="plugins" tabindex="-1">plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;plugins&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>(Plugin | Plugin[] | Promise&lt;Plugin | Plugin[]&gt;)[]</code></li></ul><p>Array of plugins to use. Falsy plugins are ignored and arrays of plugins are flattened. If a promise is returned, it would be resolved before running. See <a href="/guide/api-plugin.html">Plugin API</a> for more details on Vite plugins.</p><h2 id="publicdir" tabindex="-1">publicDir <a class="header-anchor" href="#publicdir" aria-label="Permalink to &quot;publicDir&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string | false</code></li><li><strong>Default:</strong> <code>&quot;public&quot;</code></li></ul><p>Directory to serve as plain static assets. Files in this directory are served at <code>/</code> during dev and copied to the root of <code>outDir</code> during build, and are always served or copied as-is without transform. The value can be either an absolute file system path or a path relative to project root.</p><p>Defining <code>publicDir</code> as <code>false</code> disables this feature.</p><p>See <a href="/guide/assets.html#the-public-directory">The <code>public</code> Directory</a> for more details.</p><h2 id="cachedir" tabindex="-1">cacheDir <a class="header-anchor" href="#cachedir" aria-label="Permalink to &quot;cacheDir&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>&quot;node_modules/.vite&quot;</code></li></ul><p>Directory to save cache files. Files in this directory are pre-bundled deps or some other cache files generated by vite, which can improve the performance. You can use <code>--force</code> flag or manually delete the directory to regenerate the cache files. The value can be either an absolute file system path or a path relative to project root. Default to <code>.vite</code> when no package.json is detected.</p><h2 id="resolve-alias" tabindex="-1">resolve.alias <a class="header-anchor" href="#resolve-alias" aria-label="Permalink to &quot;resolve.alias&quot;">​</a></h2><ul><li><strong>Type:</strong><code>Record&lt;string, string&gt; | Array&lt;{ find: string | RegExp, replacement: string, customResolver?: ResolverFunction | ResolverObject }&gt;</code></li></ul><p>Will be passed to <code>@rollup/plugin-alias</code> as its <a href="https://github.com/rollup/plugins/tree/master/packages/alias#entries" target="_blank" rel="noreferrer">entries option</a>. Can either be an object, or an array of <code>{ find, replacement, customResolver }</code> pairs.</p><p>When aliasing to file system paths, always use absolute paths. Relative alias values will be used as-is and will not be resolved into file system paths.</p><p>More advanced custom resolution can be achieved through <a href="/guide/api-plugin.html">plugins</a>.</p><div class="warning custom-block"><p class="custom-block-title">Using with SSR</p><p>If you have configured aliases for <a href="/guide/ssr.html#ssr-externals">SSR externalized dependencies</a>, you may want to alias the actual <code>node_modules</code> packages. Both <a href="https://classic.yarnpkg.com/en/docs/cli/add/#toc-yarn-add-alias" target="_blank" rel="noreferrer">Yarn</a> and <a href="https://pnpm.io/aliases/" target="_blank" rel="noreferrer">pnpm</a> support aliasing via the <code>npm:</code> prefix.</p></div><h2 id="resolve-dedupe" tabindex="-1">resolve.dedupe <a class="header-anchor" href="#resolve-dedupe" aria-label="Permalink to &quot;resolve.dedupe&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li></ul><p>If you have duplicated copies of the same dependency in your app (likely due to hoisting or linked packages in monorepos), use this option to force Vite to always resolve listed dependencies to the same copy (from project root).</p><div class="warning custom-block"><p class="custom-block-title">SSR + ESM</p><p>For SSR builds, deduplication does not work for ESM build outputs configured from <code>build.rollupOptions.output</code>. A workaround is to use CJS build outputs until ESM has better plugin support for module loading.</p></div><h2 id="resolve-conditions" tabindex="-1">resolve.conditions <a class="header-anchor" href="#resolve-conditions" aria-label="Permalink to &quot;resolve.conditions&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li></ul><p>Additional allowed conditions when resolving <a href="https://nodejs.org/api/packages.html#packages_conditional_exports" target="_blank" rel="noreferrer">Conditional Exports</a> from a package.</p><p>A package with conditional exports may have the following <code>exports</code> field in its <code>package.json</code>:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Here, <code>import</code> and <code>require</code> are &quot;conditions&quot;. Conditions can be nested and should be specified from most specific to least specific.</p><p>Vite has a list of &quot;allowed conditions&quot; and will match the first condition that is in the allowed list. The default allowed conditions are: <code>import</code>, <code>module</code>, <code>browser</code>, <code>default</code>, and <code>production/development</code> based on current mode. The <code>resolve.conditions</code> config option allows specifying additional allowed conditions.</p><div class="warning custom-block"><p class="custom-block-title">Resolving subpath exports</p><p>Export keys ending with &quot;/&quot; is deprecated by Node and may not work well. Please contact the package author to use <a href="https://nodejs.org/api/packages.html#package-entry-points" target="_blank" rel="noreferrer"><code>*</code> subpath patterns</a> instead.</p></div><h2 id="resolve-mainfields" tabindex="-1">resolve.mainFields <a class="header-anchor" href="#resolve-mainfields" aria-label="Permalink to &quot;resolve.mainFields&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong> <code>[&#39;browser&#39;, &#39;module&#39;, &#39;jsnext:main&#39;, &#39;jsnext&#39;]</code></li></ul><p>List of fields in <code>package.json</code> to try when resolving a package&#39;s entry point. Note this takes lower precedence than conditional exports resolved from the <code>exports</code> field: if an entry point is successfully resolved from <code>exports</code>, the main field will be ignored.</p><h2 id="resolve-extensions" tabindex="-1">resolve.extensions <a class="header-anchor" href="#resolve-extensions" aria-label="Permalink to &quot;resolve.extensions&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong> <code>[&#39;.mjs&#39;, &#39;.js&#39;, &#39;.mts&#39;, &#39;.ts&#39;, &#39;.jsx&#39;, &#39;.tsx&#39;, &#39;.json&#39;]</code></li></ul><p>List of file extensions to try for imports that omit extensions. Note it is <strong>NOT</strong> recommended to omit extensions for custom import types (e.g. <code>.vue</code>) since it can interfere with IDE and type support.</p><h2 id="resolve-preservesymlinks" tabindex="-1">resolve.preserveSymlinks <a class="header-anchor" href="#resolve-preservesymlinks" aria-label="Permalink to &quot;resolve.preserveSymlinks&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><p>Enabling this setting causes vite to determine file identity by the original file path (i.e. the path without following symlinks) instead of the real file path (i.e. the path after following symlinks).</p><ul><li><strong>Related:</strong> <a href="https://esbuild.github.io/api/#preserve-symlinks" target="_blank" rel="noreferrer">esbuild#preserve-symlinks</a>, <a href="https://webpack.js.org/configuration/resolve/#resolvesymlinks" target="_blank" rel="noreferrer">webpack#resolve.symlinks </a></li></ul><h2 id="css-modules" tabindex="-1">css.modules <a class="header-anchor" href="#css-modules" aria-label="Permalink to &quot;css.modules&quot;">​</a></h2><ul><li><strong>Type:</strong><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CSSModulesOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getJSON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    cssFileName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    outputFileName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  scopeBehaviour</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;global&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;local&#39;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  globalModulePaths</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  exportGlobals</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  generateScopedName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  hashPrefix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * default: undefined</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  localsConvention</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;camelCase&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;camelCaseOnly&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dashes&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dashesOnly&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        originalClassName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        generatedClassName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        inputFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>Configure CSS modules behavior. The options are passed on to <a href="https://github.com/css-modules/postcss-modules" target="_blank" rel="noreferrer">postcss-modules</a>.</p><p>This option doesn&#39;t have any effect when using <a href="./../guide/features.html#lightning-css">Lightning CSS</a>. If enabled, <a href="https://lightningcss.dev/css-modules.html" target="_blank" rel="noreferrer"><code>css.lightningcss.cssModules</code></a> should be used instead.</p><h2 id="css-postcss" tabindex="-1">css.postcss <a class="header-anchor" href="#css-postcss" aria-label="Permalink to &quot;css.postcss&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string | (postcss.ProcessOptions &amp; { plugins?: postcss.AcceptedPlugin[] })</code></li></ul><p>Inline PostCSS config or a custom directory to search PostCSS config from (default is project root).</p><p>For inline PostCSS config, it expects the same format as <code>postcss.config.js</code>. But for <code>plugins</code> property, only <a href="https://github.com/postcss/postcss-load-config/blob/main/README.md#array" target="_blank" rel="noreferrer">array format</a> can be used.</p><p>The search is done using <a href="https://github.com/postcss/postcss-load-config" target="_blank" rel="noreferrer">postcss-load-config</a> and only the supported config file names are loaded.</p><p>Note if an inline config is provided, Vite will not search for other PostCSS config sources.</p><h2 id="css-preprocessoroptions" tabindex="-1">css.preprocessorOptions <a class="header-anchor" href="#css-preprocessoroptions" aria-label="Permalink to &quot;css.preprocessorOptions&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>Record&lt;string, object&gt;</code></li></ul><p>Specify options to pass to CSS pre-processors. The file extensions are used as keys for the options. The supported options for each preprocessors can be found in their respective documentation:</p><ul><li><code>sass</code>/<code>scss</code> - <a href="https://sass-lang.com/documentation/js-api/interfaces/LegacyStringOptions" target="_blank" rel="noreferrer">Options</a>.</li><li><code>less</code> - <a href="https://lesscss.org/usage/#less-options" target="_blank" rel="noreferrer">Options</a>.</li><li><code>styl</code>/<code>stylus</code> - Only <a href="https://stylus-lang.com/docs/js.html#define-name-node" target="_blank" rel="noreferrer"><code>define</code></a> is supported, which can be passed as an object.</li></ul><p>All preprocessor options also support the <code>additionalData</code> option, which can be used to inject extra code for each style content. Note that if you include actual styles and not just variables, those styles will be duplicated in the final bundle.</p><p>Example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  css: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    preprocessorOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      scss: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        additionalData: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`$injectedColor: orange;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      less: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        math: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;parens-division&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      styl: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        define: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          $specialColor: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stylus.nodes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RGBA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">51</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">197</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="css-devsourcemap" tabindex="-1">css.devSourcemap <a class="header-anchor" href="#css-devsourcemap" aria-label="Permalink to &quot;css.devSourcemap&quot;">​</a></h2><ul><li><strong>Experimental:</strong> <a href="https://github.com/vitejs/vite/discussions/13845" target="_blank" rel="noreferrer">Give Feedback</a></li><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><p>Whether to enable sourcemaps during dev.</p><h2 id="css-transformer" tabindex="-1">css.transformer <a class="header-anchor" href="#css-transformer" aria-label="Permalink to &quot;css.transformer&quot;">​</a></h2><ul><li><strong>Experimental:</strong> <a href="https://github.com/vitejs/vite/discussions/13835" target="_blank" rel="noreferrer">Give Feedback</a></li><li><strong>Type:</strong> <code>&#39;postcss&#39; | &#39;lightningcss&#39;</code></li><li><strong>Default:</strong> <code>&#39;postcss&#39;</code></li></ul><p>Selects the engine used for CSS processing. Check out <a href="./../guide/features.html#lightning-css">Lightning CSS</a> for more information.</p><h2 id="css-lightningcss" tabindex="-1">css.lightningcss <a class="header-anchor" href="#css-lightningcss" aria-label="Permalink to &quot;css.lightningcss&quot;">​</a></h2><ul><li><strong>Experimental:</strong> <a href="https://github.com/vitejs/vite/discussions/13835" target="_blank" rel="noreferrer">Give Feedback</a></li><li><strong>Type:</strong></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CSSModulesConfig,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Drafts,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Features,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  NonStandard,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  PseudoClasses,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Targets,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lightningcss&#39;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  targets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Targets</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  include</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Features</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  exclude</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Features</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  drafts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Drafts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  nonStandard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NonStandard</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pseudoClasses</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PseudoClasses</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  unusedSymbols</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cssModules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CSSModulesConfig,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Configures Lightning CSS. Full transform options can be found in <a href="https://github.com/parcel-bundler/lightningcss/blob/master/node/index.d.ts" target="_blank" rel="noreferrer">the Lightning CSS repo</a>.</p><h2 id="json-namedexports" tabindex="-1">json.namedExports <a class="header-anchor" href="#json-namedexports" aria-label="Permalink to &quot;json.namedExports&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li></ul><p>Whether to support named imports from <code>.json</code> files.</p><h2 id="json-stringify" tabindex="-1">json.stringify <a class="header-anchor" href="#json-stringify" aria-label="Permalink to &quot;json.stringify&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><p>If set to <code>true</code>, imported JSON will be transformed into <code>export default JSON.parse(&quot;...&quot;)</code> which is significantly more performant than Object literals, especially when the JSON file is large.</p><p>Enabling this disables named imports.</p><h2 id="esbuild" tabindex="-1">esbuild <a class="header-anchor" href="#esbuild" aria-label="Permalink to &quot;esbuild&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>ESBuildOptions | false</code></li></ul><p><code>ESBuildOptions</code> extends <a href="https://esbuild.github.io/api/#transform" target="_blank" rel="noreferrer">esbuild&#39;s own transform options</a>. The most common use case is customizing JSX:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  esbuild: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jsxFactory: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;h&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jsxFragment: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Fragment&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>By default, esbuild is applied to <code>ts</code>, <code>jsx</code> and <code>tsx</code> files. You can customize this with <code>esbuild.include</code> and <code>esbuild.exclude</code>, which can be a regex, a <a href="https://github.com/micromatch/picomatch#globbing-features" target="_blank" rel="noreferrer">picomatch</a> pattern, or an array of either.</p><p>In addition, you can also use <code>esbuild.jsxInject</code> to automatically inject JSX helper imports for every file transformed by esbuild:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  esbuild: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jsxInject: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`import React from &#39;react&#39;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>When <a href="./build-options.html#build-minify"><code>build.minify</code></a> is <code>true</code>, all minify optimizations are applied by default. To disable <a href="https://esbuild.github.io/api/#minify" target="_blank" rel="noreferrer">certain aspects</a> of it, set any of <code>esbuild.minifyIdentifiers</code>, <code>esbuild.minifySyntax</code>, or <code>esbuild.minifyWhitespace</code> options to <code>false</code>. Note the <code>esbuild.minify</code> option can&#39;t be used to override <code>build.minify</code>.</p><p>Set to <code>false</code> to disable esbuild transforms.</p><h2 id="assetsinclude" tabindex="-1">assetsInclude <a class="header-anchor" href="#assetsinclude" aria-label="Permalink to &quot;assetsInclude&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string | RegExp | (string | RegExp)[]</code></li><li><strong>Related:</strong> <a href="/guide/assets.html">Static Asset Handling</a></li></ul><p>Specify additional <a href="https://github.com/micromatch/picomatch#globbing-features" target="_blank" rel="noreferrer">picomatch patterns</a> to be treated as static assets so that:</p><ul><li><p>They will be excluded from the plugin transform pipeline when referenced from HTML or directly requested over <code>fetch</code> or XHR.</p></li><li><p>Importing them from JS will return their resolved URL string (this can be overwritten if you have a <code>enforce: &#39;pre&#39;</code> plugin to handle the asset type differently).</p></li></ul><p>The built-in asset type list can be found <a href="https://github.com/vitejs/vite/blob/main/packages/vite/src/node/constants.ts" target="_blank" rel="noreferrer">here</a>.</p><p><strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  assetsInclude: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;**/*.gltf&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="loglevel" tabindex="-1">logLevel <a class="header-anchor" href="#loglevel" aria-label="Permalink to &quot;logLevel&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>&#39;info&#39; | &#39;warn&#39; | &#39;error&#39; | &#39;silent&#39;</code></li></ul><p>Adjust console output verbosity. Default is <code>&#39;info&#39;</code>.</p><h2 id="customlogger" tabindex="-1">customLogger <a class="header-anchor" href="#customlogger" aria-label="Permalink to &quot;customLogger&quot;">​</a></h2><ul><li><strong>Type:</strong><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LogOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LogOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  warnOnce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LogOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LogErrorOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  clearScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LogType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  hasErrorLogged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RollupError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  hasWarned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>Use a custom logger to log messages. You can use Vite&#39;s <code>createLogger</code> API to get the default logger and customize it to, for example, change the message or filter out certain warnings.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createLogger, defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loggerWarn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger.warn</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Ignore empty CSS files warning</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (msg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vite:css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; is empty&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  loggerWarn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg, options)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  customLogger: logger,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="clearscreen" tabindex="-1">clearScreen <a class="header-anchor" href="#clearscreen" aria-label="Permalink to &quot;clearScreen&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li></ul><p>Set to <code>false</code> to prevent Vite from clearing the terminal screen when logging certain messages. Via command line, use <code>--clearScreen false</code>.</p><h2 id="envdir" tabindex="-1">envDir <a class="header-anchor" href="#envdir" aria-label="Permalink to &quot;envDir&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>root</code></li></ul><p>The directory from which <code>.env</code> files are loaded. Can be an absolute path, or a path relative to the project root.</p><p>See <a href="/guide/env-and-mode.html#env-files">here</a> for more about environment files.</p><h2 id="envprefix" tabindex="-1">envPrefix <a class="header-anchor" href="#envprefix" aria-label="Permalink to &quot;envPrefix&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string | string[]</code></li><li><strong>Default:</strong> <code>VITE_</code></li></ul><p>Env variables starting with <code>envPrefix</code> will be exposed to your client source code via import.meta.env.</p><div class="warning custom-block"><p class="custom-block-title">SECURITY NOTES</p><p><code>envPrefix</code> should not be set as <code>&#39;&#39;</code>, which will expose all your env variables and cause unexpected leaking of sensitive information. Vite will throw an error when detecting <code>&#39;&#39;</code>.</p><p>If you would like to expose an unprefixed variable, you can use <a href="#define">define</a> to expose it:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;import.meta.env.ENV_VARIABLE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ENV_VARIABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><h2 id="apptype" tabindex="-1">appType <a class="header-anchor" href="#apptype" aria-label="Permalink to &quot;appType&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>&#39;spa&#39; | &#39;mpa&#39; | &#39;custom&#39;</code></li><li><strong>Default:</strong> <code>&#39;spa&#39;</code></li></ul><p>Whether your application is a Single Page Application (SPA), a <a href="./../guide/build.html#multi-page-app">Multi Page Application (MPA)</a>, or Custom Application (SSR and frameworks with custom HTML handling):</p><ul><li><code>&#39;spa&#39;</code>: include HTML middlewares and use SPA fallback. Configure <a href="https://github.com/lukeed/sirv" target="_blank" rel="noreferrer">sirv</a> with <code>single: true</code> in preview</li><li><code>&#39;mpa&#39;</code>: include HTML middlewares</li><li><code>&#39;custom&#39;</code>: don&#39;t include HTML middlewares</li></ul><p>Learn more in Vite&#39;s <a href="/guide/ssr.html#vite-cli">SSR guide</a>. Related: <a href="./server-options.html#server-middlewaremode"><code>server.middlewareMode</code></a>.</p>`,134),l=[t];function p(h,r,o,d,k,c){return i(),a("div",null,l)}const u=s(n,[["render",p]]);export{E as __pageData,u as default};
