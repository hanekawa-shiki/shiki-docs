import{_ as s,o as n,c as a,R as l}from"./chunks/framework.HYN-VFUH.js";const h=JSON.parse('{"title":"服务端渲染","description":"","frontmatter":{},"headers":[],"relativePath":"guide/ssr.md","filePath":"guide/ssr.md"}'),p={name:"guide/ssr.md"},e=l(`<h1 id="server-side-rendering" tabindex="-1">服务端渲染 <a class="header-anchor" href="#server-side-rendering" aria-label="Permalink to &quot;服务端渲染 {#server-side-rendering}&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">注意</p><p>SSR 特别指支持在 Node.js 中运行相同应用程序的前端框架（例如 React、Preact、Vue 和 Svelte），将其预渲染成 HTML，最后在客户端进行水合处理。如果你正在寻找与传统服务器端框架的集成，请查看 <a href="./backend-integration.html">后端集成指南</a>。</p><p>下面的指南还假定你在选择的框架中有使用 SSR 的经验，并且只关注特定于 Vite 的集成细节。</p></div><div class="warning custom-block"><p class="custom-block-title">Low-level API</p><p>这是一个底层 API，是为库和框架作者准备的。如果你的目标是构建一个应用程序，请确保优先查看 <a href="https://github.com/vitejs/awesome-vite#ssr" target="_blank" rel="noreferrer">Vite SSR 章节</a> 中更上层的 SSR 插件和工具。也就是说，大部分应用都是基于 Vite 的底层 API 之上构建的。</p></div><div class="tip custom-block"><p class="custom-block-title">帮助</p><p>如果你有疑问，可以到社区 <a href="https://discord.gg/PkbxgzPhJv" target="_blank" rel="noreferrer">Discord 的 Vite #ssr 频道</a>，这里会帮到你。</p></div><h2 id="example-projects" tabindex="-1">示例项目 <a class="header-anchor" href="#example-projects" aria-label="Permalink to &quot;示例项目 {#example-projects}&quot;">​</a></h2><p>Vite 为服务端渲染（SSR）提供了内建支持。<a href="https://github.com/bluwy/create-vite-extra" target="_blank" rel="noreferrer"><code>create-vite-extra</code></a> 包含了一些你可以用作参考的SSR设置示例：</p><ul><li><a href="https://github.com/bluwy/create-vite-extra/tree/master/template-ssr-vanilla" target="_blank" rel="noreferrer">Vanilla</a></li><li><a href="https://github.com/bluwy/create-vite-extra/tree/master/template-ssr-vue" target="_blank" rel="noreferrer">Vue</a></li><li><a href="https://github.com/bluwy/create-vite-extra/tree/master/template-ssr-react" target="_blank" rel="noreferrer">React</a></li><li><a href="https://github.com/bluwy/create-vite-extra/tree/master/template-ssr-preact" target="_blank" rel="noreferrer">Preact</a></li><li><a href="https://github.com/bluwy/create-vite-extra/tree/master/template-ssr-svelte" target="_blank" rel="noreferrer">Svelte</a></li><li><a href="https://github.com/bluwy/create-vite-extra/tree/master/template-ssr-solid" target="_blank" rel="noreferrer">Solid</a></li></ul><p>你也可以通过 <a href="./#scaffolding-your-first-vite-project">运行 <code>create-vite</code></a> 在本地搭建这些项目，并在框架选项下选择 <code>Others &gt; create-vite-extra</code>。</p><h2 id="source-structure" tabindex="-1">源码结构 <a class="header-anchor" href="#source-structure" aria-label="Permalink to &quot;源码结构 {#source-structure}&quot;">​</a></h2><p>一个典型的 SSR 应用应该有如下的源文件结构：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">- index.html</span></span>
<span class="line"><span style="color:#e1e4e8;">- server.js # main application server</span></span>
<span class="line"><span style="color:#e1e4e8;">- src/</span></span>
<span class="line"><span style="color:#e1e4e8;">  - main.js          # 导出环境无关的（通用的）应用代码</span></span>
<span class="line"><span style="color:#e1e4e8;">  - entry-client.js  # 将应用挂载到一个 DOM 元素上</span></span>
<span class="line"><span style="color:#e1e4e8;">  - entry-server.js  # 使用某框架的 SSR API 渲染该应用</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">- index.html</span></span>
<span class="line"><span style="color:#24292e;">- server.js # main application server</span></span>
<span class="line"><span style="color:#24292e;">- src/</span></span>
<span class="line"><span style="color:#24292e;">  - main.js          # 导出环境无关的（通用的）应用代码</span></span>
<span class="line"><span style="color:#24292e;">  - entry-client.js  # 将应用挂载到一个 DOM 元素上</span></span>
<span class="line"><span style="color:#24292e;">  - entry-server.js  # 使用某框架的 SSR API 渲染该应用</span></span></code></pre></div><p><code>index.html</code> 将需要引用 <code>entry-client.js</code> 并包含一个占位标记供给服务端渲染时注入：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#6A737D;">&lt;!--ssr-outlet--&gt;</span><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;/src/entry-client.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">&gt;</span><span style="color:#6A737D;">&lt;!--ssr-outlet--&gt;</span><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;/src/entry-client.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>你可以使用任何你喜欢的占位标记来替代 <code>&lt;!--ssr-outlet--&gt;</code>，只要它能够被正确替换。</p><h2 id="conditional-logic" tabindex="-1">情景逻辑 <a class="header-anchor" href="#conditional-logic" aria-label="Permalink to &quot;情景逻辑 {#conditional-logic}&quot;">​</a></h2><p>如果需要执行 SSR 和客户端间情景逻辑，可以使用：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.env.</span><span style="color:#79B8FF;">SSR</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ... 仅在服务端执行的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.env.</span><span style="color:#005CC5;">SSR</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ... 仅在服务端执行的逻辑</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这是在构建过程中被静态替换的，因此它将允许对未使用的条件分支进行摇树优化。</p><h2 id="setting-up-the-dev-server" tabindex="-1">设置开发服务器 <a class="header-anchor" href="#setting-up-the-dev-server" aria-label="Permalink to &quot;设置开发服务器 {#setting-up-the-dev-server}&quot;">​</a></h2><p>在构建 SSR 应用程序时，你可能希望完全控制主服务器，并将 Vite 与生产环境脱钩。因此，建议以中间件模式使用 Vite。下面是一个关于 <a href="https://expressjs.com/" target="_blank" rel="noreferrer">express</a> 的例子：</p><p><strong>server.js</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> fs </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;fs&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;path&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { fileURLToPath } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;url&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> express </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;express&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createServer </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> createViteServer } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__dirname</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">dirname</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fileURLToPath</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.url))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 以中间件模式创建 Vite 应用，并将 appType 配置为 &#39;custom&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这将禁用 Vite 自身的 HTML 服务逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 并让上级服务器接管控制</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vite</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createViteServer</span><span style="color:#E1E4E8;">({</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    server: { middlewareMode: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    appType: </span><span style="color:#9ECBFF;">&#39;custom&#39;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 使用 vite 的 Connect 实例作为中间件</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果你使用了自己的 express 路由（express.Router()），你应该使用 router.use</span></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 当服务器重启（例如用户修改了 vite.config.js 后），</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// \`vite.middlewares\` 将会被重新赋值。在包装处理程序中调用</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// \`vite.middlewares\` 可以确保</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 始终使用最新的 Vite 中间件。</span></span>
<span class="line"><span style="color:#E1E4E8;">    vite.middlewares.</span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(req, res, next)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;*&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 服务 index.html - 下面我们来处理这个问题</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5173</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> fs </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;fs&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;path&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { fileURLToPath } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;url&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> express </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;express&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createServer </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> createViteServer } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__dirname</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">dirname</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">fileURLToPath</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.url))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">express</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 以中间件模式创建 Vite 应用，并将 appType 配置为 &#39;custom&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这将禁用 Vite 自身的 HTML 服务逻辑</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 并让上级服务器接管控制</span></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vite</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createViteServer</span><span style="color:#24292E;">({</span></span>
<span class="line highlighted"><span style="color:#24292E;">    server: { middlewareMode: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> },</span></span>
<span class="line highlighted"><span style="color:#24292E;">    appType: </span><span style="color:#032F62;">&#39;custom&#39;</span></span>
<span class="line highlighted"><span style="color:#24292E;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 使用 vite 的 Connect 实例作为中间件</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果你使用了自己的 express 路由（express.Router()），你应该使用 router.use</span></span>
<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">((</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 当服务器重启（例如用户修改了 vite.config.js 后），</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// \`vite.middlewares\` 将会被重新赋值。在包装处理程序中调用</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// \`vite.middlewares\` 可以确保</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 始终使用最新的 Vite 中间件。</span></span>
<span class="line"><span style="color:#24292E;">    vite.middlewares.</span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(req, res, next)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;*&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 服务 index.html - 下面我们来处理这个问题</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5173</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">()</span></span></code></pre></div><p>这里 <code>vite</code> 是 <a href="./api-javascript.html#vitedevserver">ViteDevServer</a> 的一个实例。<code>vite.middlewares</code> 是一个 <a href="https://github.com/senchalabs/connect" target="_blank" rel="noreferrer">Connect</a> 实例，它可以在任何一个兼容 connect 的 Node.js 框架中被用作一个中间件。</p><p>下一步是实现 <code>*</code> 处理程序供给服务端渲染的 HTML：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;*&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">url</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.originalUrl</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 1. 读取 index.html</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;index.html&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 2. 应用 Vite HTML 转换。这将会注入 Vite HMR 客户端，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//    同时也会从 Vite 插件应用 HTML 转换。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//    例如：@vitejs/plugin-react 中的 global preambles</span></span>
<span class="line"><span style="color:#E1E4E8;">    template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> vite.</span><span style="color:#B392F0;">transformIndexHtml</span><span style="color:#E1E4E8;">(url, template)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 3. 加载服务器入口。vite.ssrLoadModule 将自动转换</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//    你的 ESM 源码使之可以在 Node.js 中运行！无需打包</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//    并提供类似 HMR 的根据情况随时失效。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">render</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> vite.</span><span style="color:#B392F0;">ssrLoadModule</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/src/entry-server.js&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 4. 渲染应用的 HTML。这假设 entry-server.js 导出的 \`render\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//    函数调用了适当的 SSR 框架 API。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//    例如 ReactDOMServer.renderToString()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">appHtml</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(url)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 5. 注入渲染后的应用程序 HTML 到模板中。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> template.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`&lt;!--ssr-outlet--&gt;\`</span><span style="color:#E1E4E8;">, appHtml)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 6. 返回渲染后的 HTML。</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">({ </span><span style="color:#9ECBFF;">&#39;Content-Type&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;text/html&#39;</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(html)</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果捕获到了一个错误，让 Vite 来修复该堆栈，这样它就可以映射回</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 你的实际源码中。</span></span>
<span class="line"><span style="color:#E1E4E8;">    vite.</span><span style="color:#B392F0;">ssrFixStacktrace</span><span style="color:#E1E4E8;">(e)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(e)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;*&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">url</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req.originalUrl</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1. 读取 index.html</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;index.html&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2. 应用 Vite HTML 转换。这将会注入 Vite HMR 客户端，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//    同时也会从 Vite 插件应用 HTML 转换。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//    例如：@vitejs/plugin-react 中的 global preambles</span></span>
<span class="line"><span style="color:#24292E;">    template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> vite.</span><span style="color:#6F42C1;">transformIndexHtml</span><span style="color:#24292E;">(url, template)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 3. 加载服务器入口。vite.ssrLoadModule 将自动转换</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//    你的 ESM 源码使之可以在 Node.js 中运行！无需打包</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//    并提供类似 HMR 的根据情况随时失效。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">render</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> vite.</span><span style="color:#6F42C1;">ssrLoadModule</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/src/entry-server.js&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 4. 渲染应用的 HTML。这假设 entry-server.js 导出的 \`render\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//    函数调用了适当的 SSR 框架 API。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//    例如 ReactDOMServer.renderToString()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">appHtml</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(url)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 5. 注入渲染后的应用程序 HTML 到模板中。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">html</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> template.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`&lt;!--ssr-outlet--&gt;\`</span><span style="color:#24292E;">, appHtml)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 6. 返回渲染后的 HTML。</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">status</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">({ </span><span style="color:#032F62;">&#39;Content-Type&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;text/html&#39;</span><span style="color:#24292E;"> }).</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(html)</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果捕获到了一个错误，让 Vite 来修复该堆栈，这样它就可以映射回</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 你的实际源码中。</span></span>
<span class="line"><span style="color:#24292E;">    vite.</span><span style="color:#6F42C1;">ssrFixStacktrace</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p><code>package.json</code> 中的 <code>dev</code> 脚本也应该相应地改变，使用服务器脚本：</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  &quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#FDAEB7;">-   &quot;dev&quot;: &quot;vite&quot;</span></span>
<span class="line"><span style="color:#85E89D;">+   &quot;dev&quot;: &quot;node server&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  &quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#B31D28;">-   &quot;dev&quot;: &quot;vite&quot;</span></span>
<span class="line"><span style="color:#22863A;">+   &quot;dev&quot;: &quot;node server&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><h2 id="building-for-production" tabindex="-1">生产环境构建 <a class="header-anchor" href="#building-for-production" aria-label="Permalink to &quot;生产环境构建 {#building-for-production}&quot;">​</a></h2><p>为了将 SSR 项目交付生产，我们需要：</p><ol><li>正常生成一个客户端构建；</li><li>再生成一个 SSR 构建，使其通过 <code>import()</code> 直接加载，这样便无需再使用 Vite 的 <code>ssrLoadModule</code>；</li></ol><p><code>package.json</code> 中的脚本应该看起来像这样：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;dev&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;node server&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;build:client&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;vite build --outDir dist/client&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;build:server&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;vite build --outDir dist/server --ssr src/entry-server.js&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;dev&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;node server&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;build:client&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;vite build --outDir dist/client&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;build:server&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;vite build --outDir dist/server --ssr src/entry-server.js&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意使用 <code>--ssr</code> 标志表明这将会是一个 SSR 构建。同时需要指定 SSR 的入口。</p><p>接着，在 <code>server.js</code> 中，通过 <code>process.env.NODE_ENV</code> 条件分支，需要添加一些用于生产环境的特定逻辑：</p><ul><li><p>使用 <code>dist/client/index.html</code> 作为模板，而不是根目录的 <code>index.html</code>，因为前者包含了到客户端构建的正确资源链接。</p></li><li><p>使用 <code>import(&#39;./dist/server/entry-server.js&#39;)</code> ，而不是 <code>await vite.ssrLoadModule(&#39;/src/entry-server.js&#39;)</code>（前者是 SSR 构建后的最终结果）。</p></li><li><p>将 <code>vite</code> 开发服务器的创建和所有使用都移到 dev-only 条件分支后面，然后添加静态文件服务中间件来服务 <code>dist/client</code> 中的文件。</p></li></ul><p>可以参考 <a href="#example-projects">示例项目</a> 以获取一个可运行的设置。</p><h2 id="generating-preload-directives" tabindex="-1">生成预加载指令 <a class="header-anchor" href="#generating-preload-directives" aria-label="Permalink to &quot;生成预加载指令 {#generating-preload-directives}&quot;">​</a></h2><p><code>vite build</code> 支持使用 <code>--ssrManifest</code> 标志，这将会在构建输出目录中生成一份 <code>.vite/ssr-manifest.json</code>：</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">- &quot;build:client&quot;: &quot;vite build --outDir dist/client&quot;,</span></span>
<span class="line"><span style="color:#85E89D;">+ &quot;build:client&quot;: &quot;vite build --outDir dist/client --ssrManifest&quot;,</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">- &quot;build:client&quot;: &quot;vite build --outDir dist/client&quot;,</span></span>
<span class="line"><span style="color:#22863A;">+ &quot;build:client&quot;: &quot;vite build --outDir dist/client --ssrManifest&quot;,</span></span></code></pre></div><p>上面的脚本将会为客户端构建生成 <code>dist/client/.vite/ssr-manifest.json</code>（是的，该 SSR 清单是从客户端构建生成而来，因为我们想要将模块 ID 映射到客户端文件上）。清单包含模块 ID 到它们关联的 chunk 和资源文件的映射。</p><p>为了利用该清单，框架需要提供一种方法来收集在服务器渲染调用期间使用到的组件模块 ID。</p><p><code>@vitejs/plugin-vue</code> 支持该功能，开箱即用，并会自动注册使用的组件模块 ID 到相关的 Vue SSR 上下文：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src/entry-server.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ctx</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> vueServerRenderer.</span><span style="color:#B392F0;">renderToString</span><span style="color:#E1E4E8;">(app, ctx)</span></span>
<span class="line"><span style="color:#6A737D;">// ctx.modules 现在是一个渲染期间使用的模块 ID 的 Set</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/entry-server.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ctx</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">html</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> vueServerRenderer.</span><span style="color:#6F42C1;">renderToString</span><span style="color:#24292E;">(app, ctx)</span></span>
<span class="line"><span style="color:#6A737D;">// ctx.modules 现在是一个渲染期间使用的模块 ID 的 Set</span></span></code></pre></div><p>我们现在需要在 <code>server.js</code> 的生产环境分支下读取该清单，并将其传递到 <code>src/entry-server.js</code> 导出的 <code>render</code> 函数中。这将为我们提供足够的信息，来为异步路由相应的文件渲染预加载指令！查看 <a href="https://github.com/vitejs/vite-plugin-vue/blob/main/playground/ssr-vue/src/entry-server.js" target="_blank" rel="noreferrer">示例代码</a> 获取完整示例。你还可以利用 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/103" target="_blank" rel="noreferrer">103 Early Hints</a> 所提供的信息。</p><h2 id="pre-rendering--ssg" tabindex="-1">预渲染 / SSG <a class="header-anchor" href="#pre-rendering--ssg" aria-label="Permalink to &quot;预渲染 / SSG {#pre-rendering--ssg}&quot;">​</a></h2><p>如果预先知道某些路由所需的路由和数据，我们可以使用与生产环境 SSR 相同的逻辑将这些路由预先渲染到静态 HTML 中。这也被视为一种静态站点生成（SSG）的形式。查看 <a href="https://github.com/vitejs/vite-plugin-vue/blob/main/playground/ssr-vue/prerender.js" target="_blank" rel="noreferrer">示例渲染代码</a> 获取有效示例。</p><h2 id="ssr-externals" tabindex="-1">SSR 外部化 <a class="header-anchor" href="#ssr-externals" aria-label="Permalink to &quot;SSR 外部化 {#ssr-externals}&quot;">​</a></h2><p>当运行 SSR 时依赖会由 Vite 的 SSR 转换模块系统作外部化。这会同时提速开发与构建。</p><p>如果依赖需要被 Vite 的管道转换，例如因为其中使用了未经过转译的 Vite 特性，那么它们可以被添加到 <a href="./../config/ssr-options.html#ssr-noexternal"><code>ssr.noExternal</code></a> 中。</p><p>对于采用链接的依赖，它们将默认不会被外部化，这是为了能使其利用 Vite HMR 的优势。如果你不需要这一功效，例如，想要把这些依赖当成非链接情况来测试，你可以将其添加到 <a href="./../config/ssr-options.html#ssr-external"><code>ssr.external</code></a>。</p><div class="warning custom-block"><p class="custom-block-title">使用别名</p><p>如果你为某个包配置了一个别名，为了能使 SSR 外部化依赖功能正常工作，你可能想要使用的别名应该指的是实际的 <code>node_modules</code> 中的包。<a href="https://classic.yarnpkg.com/en/docs/cli/add/#toc-yarn-add-alias" target="_blank" rel="noreferrer">Yarn</a> 和 <a href="https://pnpm.io/aliases/" target="_blank" rel="noreferrer">pnpm</a> 都支持通过 <code>npm:</code> 前缀来设置别名。</p></div><h2 id="ssr-specific-plugin-logic" tabindex="-1">SSR 专有插件逻辑 <a class="header-anchor" href="#ssr-specific-plugin-logic" aria-label="Permalink to &quot;SSR 专有插件逻辑 {#ssr-specific-plugin-logic}&quot;">​</a></h2><p>一些框架，如 Vue 或 Svelte，会根据客户端渲染和服务端渲染的区别，将组件编译成不同的格式。可以向以下的插件钩子中，给 Vite 传递额外的 <code>options</code> 对象，对象中包含 <code>ssr</code> 属性来支持根据情景转换：</p><ul><li><code>resolveId</code></li><li><code>load</code></li><li><code>transform</code></li></ul><p><strong>示例：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mySSRPlugin</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;my-ssr&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options?.ssr) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 执行 ssr 专有转换...</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mySSRPlugin</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;my-ssr&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(</span><span style="color:#E36209;">code</span><span style="color:#24292E;">, </span><span style="color:#E36209;">id</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options?.ssr) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 执行 ssr 专有转换...</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>load</code> 和 <code>transform</code> 中的 <code>options</code> 对象为可选项，rollup 目前并未使用该对象，但将来可能会用额外的元数据来扩展这些钩子函数。</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Vite 2.7 之前的版本，会提示你 <code>ssr</code> 参数的位置不应该是 <code>options</code> 对象。目前所有主要框架和插件都已对应更新，但你可能还是会发现使用过时 API 的旧文章。</p></div><h2 id="ssr-target" tabindex="-1">SSR 构建目标 <a class="header-anchor" href="#ssr-target" aria-label="Permalink to &quot;SSR 构建目标 {#ssr-target}&quot;">​</a></h2><p>SSR 构建的默认目标为 node 环境，但你也可以让服务运行在 Web Worker 上。每个平台的打包条目解析是不同的。你可以将<code>ssr.target</code> 设置为 <code>webworker</code>，以将目标配置为 Web Worker。</p><h2 id="ssr-bundle" tabindex="-1">SSR 构建产物 <a class="header-anchor" href="#ssr-bundle" aria-label="Permalink to &quot;SSR 构建产物 {#ssr-bundle}&quot;">​</a></h2><p>在某些如 <code>webworker</code> 运行时等特殊情况中，你可能想要将你的 SSR 打包成单个 JavaScript 文件。你可以通过设置 <code>ssr.noExternal</code> 为 <code>true</code> 来启用这个行为。这将会做两件事：</p><ul><li>将所有依赖视为 <code>noExternal</code>（非外部化）</li><li>若任何 Node.js 内置内容被引入，将抛出一个错误</li></ul><h2 id="ssr-resolve-conditions" tabindex="-1">SSR Resolve Conditions <a class="header-anchor" href="#ssr-resolve-conditions" aria-label="Permalink to &quot;SSR Resolve Conditions&quot;">​</a></h2><p>By default package entry resolution will use the conditions set in <a href="./../config/shared-options.html#resolve-conditions"><code>resolve.conditions</code></a> for the SSR build. You can use <a href="./../config/ssr-options.html#ssr-resolve-conditions"><code>ssr.resolve.conditions</code></a> and <a href="./../config/ssr-options.html#ssr-resolve-externalconditions"><code>ssr.resolve.externalConditions</code></a> to customize this behavior. 默认情况下包的入口解析将会使用 <a href="./../config/shared-options.html#resolve-conditions"><code>resolve.conditions</code></a> 中设置的条件来进行 SSR 构建。你可以使用 <a href="./../config/ssr-options.html#ssr-resolve-conditions"><code>ssr.resolve.conditions</code></a> 和 <a href="./../config/ssr-options.html#ssr-resolve-externalconditions"><code>ssr.resolve.externalConditions</code></a> 来自定义这个行为。</p><h2 id="vite-cli" tabindex="-1">Vite CLI <a class="header-anchor" href="#vite-cli" aria-label="Permalink to &quot;Vite CLI {#vite-cli}&quot;">​</a></h2><p>CLI 命令 <code>$ vite dev</code> 和 <code>$ vite preview</code> 也可以用于 SSR 应用：你可以将你的 SSR 中间件通过 <a href="/guide/api-plugin.html#configureserver"><code>configureServer</code></a> 添加到开发服务器、以及通过 <a href="/guide/api-plugin.html#configurepreviewserver"><code>configurePreviewServer</code></a> 添加到预览服务器。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>使用一个后置钩子，使得你的 SSR 中间件在 Vite 的中间件 <em>之后</em> 运行。</p></div>`,68),o=[e];function t(r,c,i,E,y,d){return n(),a("div",null,o)}const v=s(p,[["render",t]]);export{h as __pageData,v as default};
