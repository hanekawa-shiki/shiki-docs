import{_ as t,o as e,c as d,U as o}from"./chunks/framework.njmvNCfc.js";const b=JSON.parse('{"title":"Command Line Interface","description":"","frontmatter":{},"headers":[],"relativePath":"guide/cli.md","filePath":"guide/cli.md"}'),i={name:"guide/cli.md"},a=o('<h1 id="command-line-interface" tabindex="-1">Command Line Interface <a class="header-anchor" href="#command-line-interface" aria-label="Permalink to &quot;Command Line Interface&quot;">​</a></h1><h2 id="dev-server" tabindex="-1">Dev server <a class="header-anchor" href="#dev-server" aria-label="Permalink to &quot;Dev server&quot;">​</a></h2><h3 id="vite" tabindex="-1"><code>vite</code> <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;`vite`&quot;">​</a></h3><p>Start Vite dev server in the current directory.</p><h4 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [root]</span></span></code></pre></div><h4 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h4><table><thead><tr><th>Options</th><th></th></tr></thead><tbody><tr><td><code>--host [host]</code></td><td>Specify hostname (<code>string</code>)</td></tr><tr><td><code>--port &lt;port&gt;</code></td><td>Specify port (<code>number</code>)</td></tr><tr><td><code>--open [path]</code></td><td>Open browser on startup (<code>boolean | string</code>)</td></tr><tr><td><code>--cors</code></td><td>Enable CORS (<code>boolean</code>)</td></tr><tr><td><code>--strictPort</code></td><td>Exit if specified port is already in use (<code>boolean</code>)</td></tr><tr><td><code>--force</code></td><td>Force the optimizer to ignore the cache and re-bundle (<code>boolean</code>)</td></tr><tr><td><code>-c, --config &lt;file&gt;</code></td><td>Use specified config file (<code>string</code>)</td></tr><tr><td><code>--base &lt;path&gt;</code></td><td>Public base path (default: <code>/</code>) (<code>string</code>)</td></tr><tr><td><code>-l, --logLevel &lt;level&gt;</code></td><td>info | warn | error | silent (<code>string</code>)</td></tr><tr><td><code>--clearScreen</code></td><td>Allow/disable clear screen when logging (<code>boolean</code>)</td></tr><tr><td><code>--profile</code></td><td>Start built-in Node.js inspector (check <a href="/guide/troubleshooting.html#performance-bottlenecks">Performance bottlenecks</a>)</td></tr><tr><td><code>-d, --debug [feat]</code></td><td>Show debug logs (<code>string | boolean</code>)</td></tr><tr><td><code>-f, --filter &lt;filter&gt;</code></td><td>Filter debug logs (<code>string</code>)</td></tr><tr><td><code>-m, --mode &lt;mode&gt;</code></td><td>Set env mode (<code>string</code>)</td></tr><tr><td><code>-h, --help</code></td><td>Display available CLI options</td></tr><tr><td><code>-v, --version</code></td><td>Display version number</td></tr></tbody></table><h2 id="build" tabindex="-1">Build <a class="header-anchor" href="#build" aria-label="Permalink to &quot;Build&quot;">​</a></h2><h3 id="vite-build" tabindex="-1"><code>vite build</code> <a class="header-anchor" href="#vite-build" aria-label="Permalink to &quot;`vite build`&quot;">​</a></h3><p>Build for production.</p><h4 id="usage-1" tabindex="-1">Usage <a class="header-anchor" href="#usage-1" aria-label="Permalink to &quot;Usage&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [root]</span></span></code></pre></div><h4 id="options-1" tabindex="-1">Options <a class="header-anchor" href="#options-1" aria-label="Permalink to &quot;Options&quot;">​</a></h4><table><thead><tr><th>Options</th><th></th></tr></thead><tbody><tr><td><code>--target &lt;target&gt;</code></td><td>Transpile target (default: <code>&quot;modules&quot;</code>) (<code>string</code>)</td></tr><tr><td><code>--outDir &lt;dir&gt;</code></td><td>Output directory (default: <code>dist</code>) (<code>string</code>)</td></tr><tr><td><code>--assetsDir &lt;dir&gt;</code></td><td>Directory under outDir to place assets in (default: <code>&quot;assets&quot;</code>) (<code>string</code>)</td></tr><tr><td><code>--assetsInlineLimit &lt;number&gt;</code></td><td>Static asset base64 inline threshold in bytes (default: <code>4096</code>) (<code>number</code>)</td></tr><tr><td><code>--ssr [entry]</code></td><td>Build specified entry for server-side rendering (<code>string</code>)</td></tr><tr><td><code>--sourcemap [output]</code></td><td>Output source maps for build (default: <code>false</code>) (<code>boolean | &quot;inline&quot; | &quot;hidden&quot;</code>)</td></tr><tr><td><code>--minify [minifier]</code></td><td>Enable/disable minification, or specify minifier to use (default: <code>&quot;esbuild&quot;</code>) (<code>boolean | &quot;terser&quot; | &quot;esbuild&quot;</code>)</td></tr><tr><td><code>--manifest [name]</code></td><td>Emit build manifest json (<code>boolean | string</code>)</td></tr><tr><td><code>--ssrManifest [name]</code></td><td>Emit ssr manifest json (<code>boolean | string</code>)</td></tr><tr><td><code>--force</code></td><td>Force the optimizer to ignore the cache and re-bundle (experimental)(<code>boolean</code>)</td></tr><tr><td><code>--emptyOutDir</code></td><td>Force empty outDir when it&#39;s outside of root (<code>boolean</code>)</td></tr><tr><td><code>-w, --watch</code></td><td>Rebuilds when modules have changed on disk (<code>boolean</code>)</td></tr><tr><td><code>-c, --config &lt;file&gt;</code></td><td>Use specified config file (<code>string</code>)</td></tr><tr><td><code>--base &lt;path&gt;</code></td><td>Public base path (default: <code>/</code>) (<code>string</code>)</td></tr><tr><td><code>-l, --logLevel &lt;level&gt;</code></td><td>Info | warn | error | silent (<code>string</code>)</td></tr><tr><td><code>--clearScreen</code></td><td>Allow/disable clear screen when logging (<code>boolean</code>)</td></tr><tr><td><code>--profile</code></td><td>Start built-in Node.js inspector (check <a href="/guide/troubleshooting.html#performance-bottlenecks">Performance bottlenecks</a>)</td></tr><tr><td><code>-d, --debug [feat]</code></td><td>Show debug logs (<code>string | boolean</code>)</td></tr><tr><td><code>-f, --filter &lt;filter&gt;</code></td><td>Filter debug logs (<code>string</code>)</td></tr><tr><td><code>-m, --mode &lt;mode&gt;</code></td><td>Set env mode (<code>string</code>)</td></tr><tr><td><code>-h, --help</code></td><td>Display available CLI options</td></tr></tbody></table><h2 id="others" tabindex="-1">Others <a class="header-anchor" href="#others" aria-label="Permalink to &quot;Others&quot;">​</a></h2><h3 id="vite-optimize" tabindex="-1"><code>vite optimize</code> <a class="header-anchor" href="#vite-optimize" aria-label="Permalink to &quot;`vite optimize`&quot;">​</a></h3><p>Pre-bundle dependencies.</p><h4 id="usage-2" tabindex="-1">Usage <a class="header-anchor" href="#usage-2" aria-label="Permalink to &quot;Usage&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> optimize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [root]</span></span></code></pre></div><h4 id="options-2" tabindex="-1">Options <a class="header-anchor" href="#options-2" aria-label="Permalink to &quot;Options&quot;">​</a></h4><table><thead><tr><th>Options</th><th></th></tr></thead><tbody><tr><td><code>--force</code></td><td>Force the optimizer to ignore the cache and re-bundle (<code>boolean</code>)</td></tr><tr><td><code>-c, --config &lt;file&gt;</code></td><td>Use specified config file (<code>string</code>)</td></tr><tr><td><code>--base &lt;path&gt;</code></td><td>Public base path (default: <code>/</code>) (<code>string</code>)</td></tr><tr><td><code>-l, --logLevel &lt;level&gt;</code></td><td>Info | warn | error | silent (<code>string</code>)</td></tr><tr><td><code>--clearScreen</code></td><td>Allow/disable clear screen when logging (<code>boolean</code>)</td></tr><tr><td><code>-d, --debug [feat]</code></td><td>Show debug logs (<code>string | boolean</code>)</td></tr><tr><td><code>-f, --filter &lt;filter&gt;</code></td><td>Filter debug logs (<code>string</code>)</td></tr><tr><td><code>-m, --mode &lt;mode&gt;</code></td><td>Set env mode (<code>string</code>)</td></tr><tr><td><code>-h, --help</code></td><td>Display available CLI options</td></tr></tbody></table><h3 id="vite-preview" tabindex="-1"><code>vite preview</code> <a class="header-anchor" href="#vite-preview" aria-label="Permalink to &quot;`vite preview`&quot;">​</a></h3><p>Locally preview the production build. Do not use this as a production server as it&#39;s not designed for it.</p><h4 id="usage-3" tabindex="-1">Usage <a class="header-anchor" href="#usage-3" aria-label="Permalink to &quot;Usage&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [root]</span></span></code></pre></div><h4 id="options-3" tabindex="-1">Options <a class="header-anchor" href="#options-3" aria-label="Permalink to &quot;Options&quot;">​</a></h4><table><thead><tr><th>Options</th><th></th></tr></thead><tbody><tr><td><code>--host [host]</code></td><td>Specify hostname (<code>string</code>)</td></tr><tr><td><code>--port &lt;port&gt;</code></td><td>Specify port (<code>number</code>)</td></tr><tr><td><code>--strictPort</code></td><td>Exit if specified port is already in use (<code>boolean</code>)</td></tr><tr><td><code>--open [path]</code></td><td>Open browser on startup (<code>boolean | string</code>)</td></tr><tr><td><code>--outDir &lt;dir&gt;</code></td><td>Output directory (default: <code>dist</code>)(<code>string</code>)</td></tr><tr><td><code>-c, --config &lt;file&gt;</code></td><td>Use specified config file (<code>string</code>)</td></tr><tr><td><code>--base &lt;path&gt;</code></td><td>Public base path (default: <code>/</code>) (<code>string</code>)</td></tr><tr><td><code>-l, --logLevel &lt;level&gt;</code></td><td>Info | warn | error | silent (<code>string</code>)</td></tr><tr><td><code>--clearScreen</code></td><td>Allow/disable clear screen when logging (<code>boolean</code>)</td></tr><tr><td><code>-d, --debug [feat]</code></td><td>Show debug logs (<code>string | boolean</code>)</td></tr><tr><td><code>-f, --filter &lt;filter&gt;</code></td><td>Filter debug logs (<code>string</code>)</td></tr><tr><td><code>-m, --mode &lt;mode&gt;</code></td><td>Set env mode (<code>string</code>)</td></tr><tr><td><code>-h, --help</code></td><td>Display available CLI options</td></tr></tbody></table>',28),r=[a];function c(s,l,n,h,p,g){return e(),d("div",null,r)}const f=t(i,[["render",c]]);export{b as __pageData,f as default};
