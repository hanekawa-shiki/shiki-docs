import{_ as e,o as s,c as o,U as r}from"./chunks/framework.njmvNCfc.js";const f=JSON.parse('{"title":"SSR Options","description":"","frontmatter":{},"headers":[],"relativePath":"config/ssr-options.md","filePath":"config/ssr-options.md"}'),t={name:"config/ssr-options.md"},n=r('<h1 id="ssr-options" tabindex="-1">SSR Options <a class="header-anchor" href="#ssr-options" aria-label="Permalink to &quot;SSR Options&quot;">​</a></h1><h2 id="ssr-external" tabindex="-1">ssr.external <a class="header-anchor" href="#ssr-external" aria-label="Permalink to &quot;ssr.external&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Related:</strong> <a href="/guide/ssr.html#ssr-externals">SSR Externals</a></li></ul><p>Force externalize dependencies for SSR.</p><h2 id="ssr-noexternal" tabindex="-1">ssr.noExternal <a class="header-anchor" href="#ssr-noexternal" aria-label="Permalink to &quot;ssr.noExternal&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string | RegExp | (string | RegExp)[] | true</code></li><li><strong>Related:</strong> <a href="/guide/ssr.html#ssr-externals">SSR Externals</a></li></ul><p>Prevent listed dependencies from being externalized for SSR. If <code>true</code>, no dependencies are externalized.</p><h2 id="ssr-target" tabindex="-1">ssr.target <a class="header-anchor" href="#ssr-target" aria-label="Permalink to &quot;ssr.target&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>&#39;node&#39; | &#39;webworker&#39;</code></li><li><strong>Default:</strong> <code>node</code></li></ul><p>Build target for the SSR server.</p><h2 id="ssr-resolve-conditions" tabindex="-1">ssr.resolve.conditions <a class="header-anchor" href="#ssr-resolve-conditions" aria-label="Permalink to &quot;ssr.resolve.conditions&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Related:</strong> <a href="./shared-options.html#resolve-conditions">Resolve Conditions</a></li></ul><p>Defaults to the the root <a href="./shared-options.html#resolve-conditions"><code>resolve.conditions</code></a>.</p><p>These conditions are used in the plugin pipeline, and only affect non-externalized dependencies during the SSR build. Use <code>ssr.resolve.externalConditions</code> to affect externalized imports.</p><h2 id="ssr-resolve-externalconditions" tabindex="-1">ssr.resolve.externalConditions <a class="header-anchor" href="#ssr-resolve-externalconditions" aria-label="Permalink to &quot;ssr.resolve.externalConditions&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong> <code>[]</code></li></ul><p>Conditions that are used during ssr import (including <code>ssrLoadModule</code>) of externalized dependencies.</p>',17),a=[n];function i(l,d,c,h,p,g){return s(),o("div",null,a)}const x=e(t,[["render",i]]);export{f as __pageData,x as default};
