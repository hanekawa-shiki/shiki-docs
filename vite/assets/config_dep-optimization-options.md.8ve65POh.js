import{_ as e,o as i,c as s,U as t}from"./chunks/framework.njmvNCfc.js";const g=JSON.parse('{"title":"Dep Optimization Options","description":"","frontmatter":{},"headers":[],"relativePath":"config/dep-optimization-options.md","filePath":"config/dep-optimization-options.md"}'),o={name:"config/dep-optimization-options.md"},n=t(`<h1 id="dep-optimization-options" tabindex="-1">Dep Optimization Options <a class="header-anchor" href="#dep-optimization-options" aria-label="Permalink to &quot;Dep Optimization Options&quot;">​</a></h1><ul><li><strong>Related:</strong> <a href="/guide/dep-pre-bundling.html">Dependency Pre-Bundling</a></li></ul><h2 id="optimizedeps-entries" tabindex="-1">optimizeDeps.entries <a class="header-anchor" href="#optimizedeps-entries" aria-label="Permalink to &quot;optimizeDeps.entries&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string | string[]</code></li></ul><p>By default, Vite will crawl all your <code>.html</code> files to detect dependencies that need to be pre-bundled (ignoring <code>node_modules</code>, <code>build.outDir</code>, <code>__tests__</code> and <code>coverage</code>). If <code>build.rollupOptions.input</code> is specified, Vite will crawl those entry points instead.</p><p>If neither of these fit your needs, you can specify custom entries using this option - the value should be a <a href="https://github.com/mrmlnc/fast-glob#basic-syntax" target="_blank" rel="noreferrer">fast-glob pattern</a> or array of patterns that are relative from Vite project root. This will overwrite default entries inference. Only <code>node_modules</code> and <code>build.outDir</code> folders will be ignored by default when <code>optimizeDeps.entries</code> is explicitly defined. If other folders need to be ignored, you can use an ignore pattern as part of the entries list, marked with an initial <code>!</code>.</p><h2 id="optimizedeps-exclude" tabindex="-1">optimizeDeps.exclude <a class="header-anchor" href="#optimizedeps-exclude" aria-label="Permalink to &quot;optimizeDeps.exclude&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li></ul><p>Dependencies to exclude from pre-bundling.</p><div class="warning custom-block"><p class="custom-block-title">CommonJS</p><p>CommonJS dependencies should not be excluded from optimization. If an ESM dependency is excluded from optimization, but has a nested CommonJS dependency, the CommonJS dependency should be added to <code>optimizeDeps.include</code>. Example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimizeDeps: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    include: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;esm-dep &gt; cjs-dep&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></div><h2 id="optimizedeps-include" tabindex="-1">optimizeDeps.include <a class="header-anchor" href="#optimizedeps-include" aria-label="Permalink to &quot;optimizeDeps.include&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li></ul><p>By default, linked packages not inside <code>node_modules</code> are not pre-bundled. Use this option to force a linked package to be pre-bundled.</p><p><strong>Experimental:</strong> If you&#39;re using a library with many deep imports, you can also specify a trailing glob pattern to pre-bundle all deep imports at once. This will avoid constantly pre-bundling whenever a new deep import is used. For example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimizeDeps: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    include: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-lib/components/**/*.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="optimizedeps-esbuildoptions" tabindex="-1">optimizeDeps.esbuildOptions <a class="header-anchor" href="#optimizedeps-esbuildoptions" aria-label="Permalink to &quot;optimizeDeps.esbuildOptions&quot;">​</a></h2><ul><li><strong>Type:</strong> <a href="https://esbuild.github.io/api/#simple-options" target="_blank" rel="noreferrer"><code>EsbuildBuildOptions</code></a></li></ul><p>Options to pass to esbuild during the dep scanning and optimization.</p><p>Certain options are omitted since changing them would not be compatible with Vite&#39;s dep optimization.</p><ul><li><code>external</code> is also omitted, use Vite&#39;s <code>optimizeDeps.exclude</code> option</li><li><code>plugins</code> are merged with Vite&#39;s dep plugin</li></ul><h2 id="optimizedeps-force" tabindex="-1">optimizeDeps.force <a class="header-anchor" href="#optimizedeps-force" aria-label="Permalink to &quot;optimizeDeps.force&quot;">​</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li></ul><p>Set to <code>true</code> to force dependency pre-bundling, ignoring previously cached optimized dependencies.</p><h2 id="optimizedeps-disabled" tabindex="-1">optimizeDeps.disabled <a class="header-anchor" href="#optimizedeps-disabled" aria-label="Permalink to &quot;optimizeDeps.disabled&quot;">​</a></h2><ul><li><strong>Experimental:</strong> <a href="https://github.com/vitejs/vite/discussions/13839" target="_blank" rel="noreferrer">Give Feedback</a></li><li><strong>Type:</strong> <code>boolean | &#39;build&#39; | &#39;dev&#39;</code></li><li><strong>Default:</strong> <code>&#39;build&#39;</code></li></ul><p>Disables dependencies optimizations, <code>true</code> disables the optimizer during build and dev. Pass <code>&#39;build&#39;</code> or <code>&#39;dev&#39;</code> to only disable the optimizer in one of the modes. Dependency optimization is enabled by default in dev only.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Optimizing dependencies in build mode is <strong>experimental</strong>. If enabled, it removes one of the most significant differences between dev and prod. <a href="https://github.com/rollup/plugins/tree/master/packages/commonjs" target="_blank" rel="noreferrer"><code>@rollup/plugin-commonjs</code></a> is no longer needed in this case since esbuild converts CJS-only dependencies to ESM.</p><p>If you want to try this build strategy, you can use <code>optimizeDeps.disabled: false</code>. <code>@rollup/plugin-commonjs</code> can be removed by passing <code>build.commonjsOptions: { include: [] }</code>.</p></div><h2 id="optimizedeps-needsinterop" tabindex="-1">optimizeDeps.needsInterop <a class="header-anchor" href="#optimizedeps-needsinterop" aria-label="Permalink to &quot;optimizeDeps.needsInterop&quot;">​</a></h2><ul><li><strong>Experimental</strong></li><li><strong>Type:</strong> <code>string[]</code></li></ul><p>Forces ESM interop when importing these dependencies. Vite is able to properly detect when a dependency needs interop, so this option isn&#39;t generally needed. However, different combinations of dependencies could cause some of them to be prebundled differently. Adding these packages to <code>needsInterop</code> can speed up cold start by avoiding full-page reloads. You&#39;ll receive a warning if this is the case for one of your dependencies, suggesting to add the package name to this array in your config.</p>`,30),a=[n];function d(p,l,r,c,h,u){return i(),s("div",null,a)}const b=e(o,[["render",d]]);export{g as __pageData,b as default};
