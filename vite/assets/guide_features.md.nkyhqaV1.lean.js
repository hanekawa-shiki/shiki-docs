import{D as a,o as e,c as t,I as n,m as l,U as s}from"./chunks/framework.njmvNCfc.js";const p=`<svg viewBox="0 0 1440 495" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect y="191" width="315" height="146" rx="10" fill="#C3E88C"/>
<text fill="#15505C" xml:space="preserve" style="white-space: pre" font-family="Inter" font-size="40" font-weight="600" letter-spacing="0em"><tspan x="105.5" y="278.545">Entry</tspan></text>
<rect x="556" width="360" height="141" rx="10" fill="#C3E88C"/>
<text fill="#15505C" xml:space="preserve" style="white-space: pre" font-family="Inter" font-size="40" font-weight="600" letter-spacing="0em"><tspan x="594" y="85.0455">async chunk A</tspan></text>
<rect x="1080" y="169" width="360" height="141" rx="10" fill="#C3E88C"/>
<text fill="#15505C" xml:space="preserve" style="white-space: pre" font-family="Inter" font-size="40" font-weight="600" letter-spacing="0em"><tspan x="1091.5" y="254.045">common chunk C</tspan></text>
<rect x="556" y="354" width="360" height="141" rx="10" fill="#C3E88C"/>
<text fill="#15505C" xml:space="preserve" style="white-space: pre" font-family="Inter" font-size="40" font-weight="600" letter-spacing="0em"><tspan x="595.5" y="439.045">async chunk B</tspan></text>
<path d="M546.44 71.5452C546.741 70.1977 545.893 68.8613 544.545 68.5602L522.587 63.6533C521.239 63.3522 519.903 64.2004 519.602 65.5479C519.301 66.8954 520.149 68.2318 521.496 68.5329L541.015 72.8946L536.653 92.4132C536.352 93.7607 537.2 95.0971 538.548 95.3983C539.895 95.6994 541.232 94.8511 541.533 93.5036L546.44 71.5452ZM326.34 212.111L334.161 207.146L331.482 202.925L323.66 207.889L326.34 212.111ZM349.804 197.218L365.447 187.289L362.767 183.068L347.125 192.996L349.804 197.218ZM381.09 177.361L396.733 167.432L394.053 163.211L378.41 173.139L381.09 177.361ZM412.375 157.504L428.018 147.575L425.339 143.354L409.696 153.282L412.375 157.504ZM443.661 137.646L459.304 127.718L456.625 123.496L440.982 133.425L443.661 137.646ZM474.947 117.789L490.59 107.861L487.91 103.639L472.267 113.568L474.947 117.789ZM506.233 97.9322L521.875 88.0036L519.196 83.7821L503.553 93.7107L506.233 97.9322ZM537.518 78.075L545.34 73.1107L542.66 68.8893L534.839 73.8536L537.518 78.075ZM548.88 72.0904C549.482 69.3955 547.785 66.7226 545.09 66.1204L501.174 56.3065C498.479 55.7043 495.806 57.4008 495.203 60.0958C494.601 62.7907 496.298 65.4636 498.993 66.0658L538.03 74.7892L529.307 113.826C528.704 116.521 530.401 119.194 533.096 119.796C535.791 120.399 538.464 118.702 539.066 116.007L548.88 72.0904ZM327.679 214.221L335.501 209.257L330.142 200.814L322.321 205.779L327.679 214.221ZM351.144 199.329L366.787 189.4L361.428 180.957L345.785 190.886L351.144 199.329ZM382.429 179.471L398.072 169.543L392.713 161.1L377.071 171.029L382.429 179.471ZM413.715 159.614L429.358 149.686L423.999 141.243L408.356 151.171L413.715 159.614ZM445.001 139.757L460.644 129.829L455.285 121.386L439.642 131.314L445.001 139.757ZM476.287 119.9L491.929 109.971L486.571 101.529L470.928 111.457L476.287 119.9ZM507.572 100.043L523.215 90.1143L517.856 81.6714L502.213 91.6L507.572 100.043ZM538.858 80.1858L546.679 75.2215L541.321 66.7785L533.499 71.7428L538.858 80.1858Z" fill="#0B7285"/>
<path d="M544.718 442.395C546.04 441.998 546.791 440.605 546.395 439.282L539.935 417.729C539.539 416.407 538.145 415.656 536.823 416.052C535.5 416.449 534.749 417.842 535.146 419.165L540.888 438.323L521.729 444.065C520.407 444.461 519.656 445.855 520.052 447.177C520.449 448.5 521.842 449.251 523.165 448.854L544.718 442.395ZM323.814 324.201L331.636 328.415L334.007 324.013L326.186 319.799L323.814 324.201ZM347.278 336.844L362.921 345.272L365.293 340.871L349.65 332.442L347.278 336.844ZM378.564 353.701L394.207 362.129L396.579 357.728L380.936 349.299L378.564 353.701ZM409.85 370.558L425.493 378.987L427.864 374.585L412.222 366.156L409.85 370.558ZM441.136 387.415L456.778 395.844L459.15 391.442L443.507 383.013L441.136 387.415ZM472.421 404.272L488.064 412.701L490.436 408.299L474.793 399.871L472.421 404.272ZM503.707 421.129L519.35 429.558L521.722 425.156L506.079 416.728L503.707 421.129ZM534.993 437.987L542.814 442.201L545.186 437.799L537.364 433.585L534.993 437.987ZM545.435 444.79C548.081 443.997 549.582 441.21 548.79 438.565L535.871 395.459C535.078 392.814 532.291 391.312 529.646 392.105C527 392.898 525.499 395.685 526.292 398.33L537.775 436.646L499.459 448.129C496.814 448.922 495.312 451.709 496.105 454.354C496.898 457 499.685 458.501 502.33 457.708L545.435 444.79ZM322.628 326.402L330.45 330.616L335.193 321.813L327.372 317.598L322.628 326.402ZM346.093 339.045L361.735 347.473L366.479 338.67L350.836 330.241L346.093 339.045ZM377.378 355.902L393.021 364.33L397.765 355.527L382.122 347.098L377.378 355.902ZM408.664 372.759L424.307 381.187L429.05 372.384L413.407 363.955L408.664 372.759ZM439.95 389.616L455.593 398.045L460.336 389.241L444.693 380.813L439.95 389.616ZM471.235 406.473L486.878 414.902L491.622 406.098L475.979 397.67L471.235 406.473ZM502.521 423.33L518.164 431.759L522.907 422.955L507.265 414.527L502.521 423.33ZM533.807 440.187L541.628 444.402L546.372 435.598L538.55 431.384L533.807 440.187Z" fill="#0B7285"/>
<text fill="#0B7285" xml:space="preserve" style="white-space: pre" font-family="Inter" font-size="35" letter-spacing="0em"><tspan x="172" y="98.7273">dynamic import</tspan></text>
<text fill="#1864AB" xml:space="preserve" style="white-space: pre" font-family="Inter" font-size="35" letter-spacing="0em"><tspan x="1013" y="83.7273">direct import</tspan></text>
<path d="M1071.89 171.899C1074.05 171.404 1075.39 169.258 1074.9 167.105L1066.85 132.017C1066.35 129.864 1064.21 128.519 1062.05 129.014C1059.9 129.508 1058.55 131.654 1059.05 133.807L1066.21 164.996L1035.02 172.154C1032.86 172.648 1031.52 174.795 1032.01 176.948C1032.51 179.101 1034.65 180.446 1036.81 179.952L1071.89 171.899ZM918.876 77.3895L1068.88 171.389L1073.12 164.611L923.124 70.6105L918.876 77.3895Z" fill="#1864AB"/>
<path d="M1074.95 317.66C1075.31 315.481 1073.84 313.419 1071.66 313.055L1036.15 307.114C1033.97 306.75 1031.91 308.22 1031.55 310.399C1031.18 312.578 1032.65 314.64 1034.83 315.004L1066.39 320.285L1061.11 351.846C1060.75 354.025 1062.22 356.087 1064.4 356.452C1066.58 356.816 1068.64 355.345 1069 353.167L1074.95 317.66ZM923.323 427.256L1073.32 320.256L1068.68 313.744L918.677 420.744L923.323 427.256Z" fill="#1864AB"/>
</svg>
`,h=s(`<h1 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h1><p>At the very basic level, developing using Vite is not that different from using a static file server. However, Vite provides many enhancements over native ESM imports to support various features that are typically seen in bundler-based setups.</p><h2 id="npm-dependency-resolving-and-pre-bundling" tabindex="-1">NPM Dependency Resolving and Pre-Bundling <a class="header-anchor" href="#npm-dependency-resolving-and-pre-bundling" aria-label="Permalink to &quot;NPM Dependency Resolving and Pre-Bundling&quot;">​</a></h2><p>Native ES imports do not support bare module imports like the following:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { someMethod } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;my-dep&#39;</span></span></code></pre></div><p>The above will throw an error in the browser. Vite will detect such bare module imports in all served source files and perform the following:</p><ol><li><p><a href="./dep-pre-bundling.html">Pre-bundle</a> them to improve page loading speed and convert CommonJS / UMD modules to ESM. The pre-bundling step is performed with <a href="http://esbuild.github.io/" target="_blank" rel="noreferrer">esbuild</a> and makes Vite&#39;s cold start time significantly faster than any JavaScript-based bundler.</p></li><li><p>Rewrite the imports to valid URLs like <code>/node_modules/.vite/deps/my-dep.js?v=f3sf2ebd</code> so that the browser can import them properly.</p></li></ol><p><strong>Dependencies are Strongly Cached</strong></p><p>Vite caches dependency requests via HTTP headers, so if you wish to locally edit/debug a dependency, follow the steps <a href="./dep-pre-bundling.html#browser-cache">here</a>.</p><h2 id="hot-module-replacement" tabindex="-1">Hot Module Replacement <a class="header-anchor" href="#hot-module-replacement" aria-label="Permalink to &quot;Hot Module Replacement&quot;">​</a></h2><p>Vite provides an <a href="./api-hmr.html">HMR API</a> over native ESM. Frameworks with HMR capabilities can leverage the API to provide instant, precise updates without reloading the page or blowing away application state. Vite provides first-party HMR integrations for <a href="https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue" target="_blank" rel="noreferrer">Vue Single File Components</a> and <a href="https://github.com/vitejs/vite-plugin-react/tree/main/packages/plugin-react" target="_blank" rel="noreferrer">React Fast Refresh</a>. There are also official integrations for Preact via <a href="https://github.com/JoviDeCroock/prefresh/tree/main/packages/vite" target="_blank" rel="noreferrer">@prefresh/vite</a>.</p><p>Note you don&#39;t need to manually set these up - when you <a href="./">create an app via <code>create-vite</code></a>, the selected templates would have these pre-configured for you already.</p><h2 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;TypeScript&quot;">​</a></h2><p>Vite supports importing <code>.ts</code> files out of the box.</p><h3 id="transpile-only" tabindex="-1">Transpile Only <a class="header-anchor" href="#transpile-only" aria-label="Permalink to &quot;Transpile Only&quot;">​</a></h3><p>Note that Vite only performs transpilation on <code>.ts</code> files and does <strong>NOT</strong> perform type checking. It assumes type checking is taken care of by your IDE and build process.</p><p>The reason Vite does not perform type checking as part of the transform process is because the two jobs work fundamentally differently. Transpilation can work on a per-file basis and aligns perfectly with Vite&#39;s on-demand compile model. In comparison, type checking requires knowledge of the entire module graph. Shoe-horning type checking into Vite&#39;s transform pipeline will inevitably compromise Vite&#39;s speed benefits.</p><p>Vite&#39;s job is to get your source modules into a form that can run in the browser as fast as possible. To that end, we recommend separating static analysis checks from Vite&#39;s transform pipeline. This principle applies to other static analysis checks such as ESLint.</p><ul><li><p>For production builds, you can run <code>tsc --noEmit</code> in addition to Vite&#39;s build command.</p></li><li><p>During development, if you need more than IDE hints, we recommend running <code>tsc --noEmit --watch</code> in a separate process, or use <a href="https://github.com/fi3ework/vite-plugin-checker" target="_blank" rel="noreferrer">vite-plugin-checker</a> if you prefer having type errors directly reported in the browser.</p></li></ul><p>Vite uses <a href="https://github.com/evanw/esbuild" target="_blank" rel="noreferrer">esbuild</a> to transpile TypeScript into JavaScript which is about 20~30x faster than vanilla <code>tsc</code>, and HMR updates can reflect in the browser in under 50ms.</p><p>Use the <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-and-export" target="_blank" rel="noreferrer">Type-Only Imports and Export</a> syntax to avoid potential problems like type-only imports being incorrectly bundled, for example:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { T } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;only/types&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { T }</span></span></code></pre></div><h3 id="typescript-compiler-options" tabindex="-1">TypeScript Compiler Options <a class="header-anchor" href="#typescript-compiler-options" aria-label="Permalink to &quot;TypeScript Compiler Options&quot;">​</a></h3><p>Some configuration fields under <code>compilerOptions</code> in <code>tsconfig.json</code> require special attention.</p><h4 id="isolatedmodules" tabindex="-1"><code>isolatedModules</code> <a class="header-anchor" href="#isolatedmodules" aria-label="Permalink to &quot;\`isolatedModules\`&quot;">​</a></h4><ul><li><a href="https://www.typescriptlang.org/tsconfig#isolatedModules" target="_blank" rel="noreferrer">TypeScript documentation</a></li></ul><p>Should be set to <code>true</code>.</p><p>It is because <code>esbuild</code> only performs transpilation without type information, it doesn&#39;t support certain features like const enum and implicit type-only imports.</p><p>You must set <code>&quot;isolatedModules&quot;: true</code> in your <code>tsconfig.json</code> under <code>compilerOptions</code>, so that TS will warn you against the features that do not work with isolated transpilation.</p><p>However, some libraries (e.g. <a href="https://github.com/vuejs/core/issues/1228" target="_blank" rel="noreferrer"><code>vue</code></a>) don&#39;t work well with <code>&quot;isolatedModules&quot;: true</code>. You can use <code>&quot;skipLibCheck&quot;: true</code> to temporarily suppress the errors until it is fixed upstream.</p><h4 id="usedefineforclassfields" tabindex="-1"><code>useDefineForClassFields</code> <a class="header-anchor" href="#usedefineforclassfields" aria-label="Permalink to &quot;\`useDefineForClassFields\`&quot;">​</a></h4><ul><li><a href="https://www.typescriptlang.org/tsconfig#useDefineForClassFields" target="_blank" rel="noreferrer">TypeScript documentation</a></li></ul><p>Starting from Vite 2.5.0, the default value will be <code>true</code> if the TypeScript target is <code>ESNext</code> or <code>ES2022</code> or newer. It is consistent with the <a href="https://github.com/microsoft/TypeScript/pull/42663" target="_blank" rel="noreferrer">behavior of <code>tsc</code> 4.3.2 and later</a>. It is also the standard ECMAScript runtime behavior.</p><p>Other TypeScript targets will default to <code>false</code>.</p><p>But it may be counter-intuitive for those coming from other programming languages or older versions of TypeScript. You can read more about the transition in the <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier" target="_blank" rel="noreferrer">TypeScript 3.7 release notes</a>.</p><p>If you are using a library that heavily relies on class fields, please be careful about the library&#39;s intended usage of it.</p><p>Most libraries expect <code>&quot;useDefineForClassFields&quot;: true</code>, such as <a href="https://mobx.js.org/installation.html#use-spec-compliant-transpilation-for-class-properties" target="_blank" rel="noreferrer">MobX</a>.</p><p>But a few libraries haven&#39;t transitioned to this new default yet, including <a href="https://github.com/lit/lit-element/issues/1030" target="_blank" rel="noreferrer"><code>lit-element</code></a>. Please explicitly set <code>useDefineForClassFields</code> to <code>false</code> in these cases.</p><h4 id="target" tabindex="-1"><code>target</code> <a class="header-anchor" href="#target" aria-label="Permalink to &quot;\`target\`&quot;">​</a></h4><ul><li><a href="https://www.typescriptlang.org/tsconfig#target" target="_blank" rel="noreferrer">TypeScript documentation</a></li></ul><p>Vite does not transpile TypeScript with the configured <code>target</code> value by default, following the same behaviour as <code>esbuild</code>.</p><p>The <a href="/config/shared-options.html#esbuild"><code>esbuild.target</code></a> option can be used instead, which defaults to <code>esnext</code> for minimal transpilation. In builds, the <a href="/config/build-options.html#build-target"><code>build.target</code></a> option takes higher priority and can also be set if needed.</p><div class="warning custom-block"><p class="custom-block-title"><code>useDefineForClassFields</code></p><p>If <code>target</code> is not <code>ESNext</code> or <code>ES2022</code> or newer, or if there&#39;s no <code>tsconfig.json</code> file, <code>useDefineForClassFields</code> will default to <code>false</code> which can be problematic with the default <code>esbuild.target</code> value of <code>esnext</code>. It may transpile to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks#browser_compatibility" target="_blank" rel="noreferrer">static initialization blocks</a> which may not be supported in your browser.</p><p>As such, it is recommended to set <code>target</code> to <code>ESNext</code> or <code>ES2022</code> or newer, or set <code>useDefineForClassFields</code> to <code>true</code> explicitly when configuring <code>tsconfig.json</code>.</p></div><h4 id="other-compiler-options-affecting-the-build-result" tabindex="-1">Other Compiler Options Affecting the Build Result <a class="header-anchor" href="#other-compiler-options-affecting-the-build-result" aria-label="Permalink to &quot;Other Compiler Options Affecting the Build Result&quot;">​</a></h4><ul><li><a href="https://www.typescriptlang.org/tsconfig#extends" target="_blank" rel="noreferrer"><code>extends</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#importsNotUsedAsValues" target="_blank" rel="noreferrer"><code>importsNotUsedAsValues</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#preserveValueImports" target="_blank" rel="noreferrer"><code>preserveValueImports</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#verbatimModuleSyntax" target="_blank" rel="noreferrer"><code>verbatimModuleSyntax</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#jsx" target="_blank" rel="noreferrer"><code>jsx</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#jsxFactory" target="_blank" rel="noreferrer"><code>jsxFactory</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#jsxFragmentFactory" target="_blank" rel="noreferrer"><code>jsxFragmentFactory</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#jsxImportSource" target="_blank" rel="noreferrer"><code>jsxImportSource</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#experimentalDecorators" target="_blank" rel="noreferrer"><code>experimentalDecorators</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#alwaysStrict" target="_blank" rel="noreferrer"><code>alwaysStrict</code></a></li></ul><div class="tip custom-block"><p class="custom-block-title"><code>skipLibCheck</code></p><p>Vite starter templates have <code>&quot;skipLibCheck&quot;: &quot;true&quot;</code> by default to avoid typechecking dependencies, as they may choose to only support specific versions and configurations of TypeScript. You can learn more at <a href="https://github.com/vuejs/vue-cli/pull/5688" target="_blank" rel="noreferrer">vuejs/vue-cli#5688</a>.</p></div><h3 id="client-types" tabindex="-1">Client Types <a class="header-anchor" href="#client-types" aria-label="Permalink to &quot;Client Types&quot;">​</a></h3><p>Vite&#39;s default types are for its Node.js API. To shim the environment of client side code in a Vite application, add a <code>d.ts</code> declaration file:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite/client&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span></code></pre></div><p>Alternatively, you can add <code>vite/client</code> to <code>compilerOptions.types</code> inside <code>tsconfig.json</code>:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite/client&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This will provide the following type shims:</p><ul><li>Asset imports (e.g. importing an <code>.svg</code> file)</li><li>Types for the Vite-injected <a href="./env-and-mode.html#env-variables">env variables</a> on <code>import.meta.env</code></li><li>Types for the <a href="./api-hmr.html">HMR API</a> on <code>import.meta.hot</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To override the default typing, add a type definition file that contains your typings. Then, add the type reference before <code>vite/client</code>.</p><p>For example, to make the default import of <code>*.svg</code> a React component:</p><ul><li><code>vite-env-override.d.ts</code> (the file that contains your typings):<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;*.svg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">React</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SVGProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SVGElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li>The file containing the reference to <code>vite/client</code>:<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./vite-env-override.d.ts&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite/client&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span></code></pre></div></li></ul></div><h2 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h2><p>Vite provides first-class Vue support:</p><ul><li>Vue 3 SFC support via <a href="https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue" target="_blank" rel="noreferrer">@vitejs/plugin-vue</a></li><li>Vue 3 JSX support via <a href="https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue-jsx" target="_blank" rel="noreferrer">@vitejs/plugin-vue-jsx</a></li><li>Vue 2.7 SFC support via <a href="https://github.com/vitejs/vite-plugin-vue2" target="_blank" rel="noreferrer">@vitejs/plugin-vue2</a></li><li>Vue 2.7 JSX support via <a href="https://github.com/vitejs/vite-plugin-vue2-jsx" target="_blank" rel="noreferrer">@vitejs/plugin-vue2-jsx</a></li></ul><h2 id="jsx" tabindex="-1">JSX <a class="header-anchor" href="#jsx" aria-label="Permalink to &quot;JSX&quot;">​</a></h2><p><code>.jsx</code> and <code>.tsx</code> files are also supported out of the box. JSX transpilation is also handled via <a href="https://esbuild.github.io" target="_blank" rel="noreferrer">esbuild</a>.</p><p>Vue users should use the official <a href="https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue-jsx" target="_blank" rel="noreferrer">@vitejs/plugin-vue-jsx</a> plugin, which provides Vue 3 specific features including HMR, global component resolving, directives and slots.</p><p>If not using JSX with React or Vue, custom <code>jsxFactory</code> and <code>jsxFragment</code> can be configured using the <a href="/config/shared-options.html#esbuild"><code>esbuild</code> option</a>. For example for Preact:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  esbuild: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jsxFactory: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;h&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jsxFragment: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Fragment&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>More details in <a href="https://esbuild.github.io/content-types/#jsx" target="_blank" rel="noreferrer">esbuild docs</a>.</p><p>You can inject the JSX helpers using <code>jsxInject</code> (which is a Vite-only option) to avoid manual imports:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  esbuild: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jsxInject: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`import React from &#39;react&#39;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h2><p>Importing <code>.css</code> files will inject its content to the page via a <code>&lt;style&gt;</code> tag with HMR support.</p><h3 id="import-inlining-and-rebasing" tabindex="-1"><code>@import</code> Inlining and Rebasing <a class="header-anchor" href="#import-inlining-and-rebasing" aria-label="Permalink to &quot;\`@import\` Inlining and Rebasing&quot;">​</a></h3><p>Vite is pre-configured to support CSS <code>@import</code> inlining via <code>postcss-import</code>. Vite aliases are also respected for CSS <code>@import</code>. In addition, all CSS <code>url()</code> references, even if the imported files are in different directories, are always automatically rebased to ensure correctness.</p><p><code>@import</code> aliases and URL rebasing are also supported for Sass and Less files (see <a href="#css-pre-processors">CSS Pre-processors</a>).</p><h3 id="postcss" tabindex="-1">PostCSS <a class="header-anchor" href="#postcss" aria-label="Permalink to &quot;PostCSS&quot;">​</a></h3><p>If the project contains valid PostCSS config (any format supported by <a href="https://github.com/postcss/postcss-load-config" target="_blank" rel="noreferrer">postcss-load-config</a>, e.g. <code>postcss.config.js</code>), it will be automatically applied to all imported CSS.</p><p>Note that CSS minification will run after PostCSS and will use <a href="/config/build-options.html#build-csstarget"><code>build.cssTarget</code></a> option.</p><h3 id="css-modules" tabindex="-1">CSS Modules <a class="header-anchor" href="#css-modules" aria-label="Permalink to &quot;CSS Modules&quot;">​</a></h3><p>Any CSS file ending with <code>.module.css</code> is considered a <a href="https://github.com/css-modules/css-modules" target="_blank" rel="noreferrer">CSS modules file</a>. Importing such a file will return the corresponding module object:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* example.module.css */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> classes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./example.module.css&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).className </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> classes.red</span></span></code></pre></div><p>CSS modules behavior can be configured via the <a href="/config/shared-options.html#css-modules"><code>css.modules</code> option</a>.</p><p>If <code>css.modules.localsConvention</code> is set to enable camelCase locals (e.g. <code>localsConvention: &#39;camelCaseOnly&#39;</code>), you can also use named imports:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .apply-color -&gt; applyColor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { applyColor } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./example.module.css&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).className </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> applyColor</span></span></code></pre></div><h3 id="css-pre-processors" tabindex="-1">CSS Pre-processors <a class="header-anchor" href="#css-pre-processors" aria-label="Permalink to &quot;CSS Pre-processors&quot;">​</a></h3><p>Because Vite targets modern browsers only, it is recommended to use native CSS variables with PostCSS plugins that implement CSSWG drafts (e.g. <a href="https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-nesting" target="_blank" rel="noreferrer">postcss-nesting</a>) and author plain, future-standards-compliant CSS.</p><p>That said, Vite does provide built-in support for <code>.scss</code>, <code>.sass</code>, <code>.less</code>, <code>.styl</code> and <code>.stylus</code> files. There is no need to install Vite-specific plugins for them, but the corresponding pre-processor itself must be installed:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .scss and .sass</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .less</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> less</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .styl and .stylus</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stylus</span></span></code></pre></div><p>If using Vue single file components, this also automatically enables <code>&lt;style lang=&quot;sass&quot;&gt;</code> et al.</p><p>Vite improves <code>@import</code> resolving for Sass and Less so that Vite aliases are also respected. In addition, relative <code>url()</code> references inside imported Sass/Less files that are in different directories from the root file are also automatically rebased to ensure correctness.</p><p><code>@import</code> alias and url rebasing are not supported for Stylus due to its API constraints.</p><p>You can also use CSS modules combined with pre-processors by prepending <code>.module</code> to the file extension, for example <code>style.module.scss</code>.</p><h3 id="disabling-css-injection-into-the-page" tabindex="-1">Disabling CSS injection into the page <a class="header-anchor" href="#disabling-css-injection-into-the-page" aria-label="Permalink to &quot;Disabling CSS injection into the page&quot;">​</a></h3><p>The automatic injection of CSS contents can be turned off via the <code>?inline</code> query parameter. In this case, the processed CSS string is returned as the module&#39;s default export as usual, but the styles aren&#39;t injected to the page.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./foo.css&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // will be injected into the page</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> otherStyles </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./bar.css?inline&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // will not be injected</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Default and named imports from CSS files (e.g <code>import style from &#39;./foo.css&#39;</code>) are removed since Vite 5. Use the <code>?inline</code> query instead.</p></div><h3 id="lightning-css" tabindex="-1">Lightning CSS <a class="header-anchor" href="#lightning-css" aria-label="Permalink to &quot;Lightning CSS&quot;">​</a></h3><p>Starting from Vite 4.4, there is experimental support for <a href="https://lightningcss.dev/" target="_blank" rel="noreferrer">Lightning CSS</a>. You can opt into it by adding <a href="./../config/shared-options.html#css-transformer"><code>css.transformer: &#39;lightningcss&#39;</code></a> to your config file and install the optional <a href="https://www.npmjs.com/package/lightningcss" target="_blank" rel="noreferrer"><code>lightningcss</code></a> dependency:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lightningcss</span></span></code></pre></div><p>If enabled, CSS files will be processed by Lightning CSS instead of PostCSS. To configure it, you can pass Lightning CSS options to the <a href="./../config/shared-options.html#css-lightningcss"><code>css.lightingcss</code></a> config option.</p><p>To configure CSS Modules, you&#39;ll use <a href="https://lightningcss.dev/css-modules.html" target="_blank" rel="noreferrer"><code>css.lightningcss.cssModules</code></a> instead of <a href="./../config/shared-options.html#css-modules"><code>css.modules</code></a> (which configures the way PostCSS handles CSS modules).</p><p>By default, Vite uses esbuild to minify CSS. Lightning CSS can also be used as the CSS minifier with <a href="./../config/build-options.html#build-cssminify"><code>build.cssMinify: &#39;lightningcss&#39;</code></a>.</p><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p><a href="#css-pre-processors">CSS Pre-processors</a> aren&#39;t supported when using Lightning CSS.</p></div><h2 id="static-assets" tabindex="-1">Static Assets <a class="header-anchor" href="#static-assets" aria-label="Permalink to &quot;Static Assets&quot;">​</a></h2><p>Importing a static asset will return the resolved public URL when it is served:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./img.png&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hero-img&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgUrl</span></span></code></pre></div><p>Special queries can modify how assets are loaded:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Explicitly load assets as URL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> assetAsURL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./asset.js?url&#39;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Load assets as strings</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> assetAsString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./shader.glsl?raw&#39;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Load Web Workers</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Worker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./worker.js?worker&#39;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Web Workers inlined as base64 strings at build time</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InlineWorker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./worker.js?worker&amp;inline&#39;</span></span></code></pre></div><p>More details in <a href="./assets.html">Static Asset Handling</a>.</p><h2 id="json" tabindex="-1">JSON <a class="header-anchor" href="#json" aria-label="Permalink to &quot;JSON&quot;">​</a></h2><p>JSON files can be directly imported - named imports are also supported:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// import the entire object</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./example.json&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// import a root field as named exports - helps with tree-shaking!</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { field } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./example.json&#39;</span></span></code></pre></div><h2 id="glob-import" tabindex="-1">Glob Import <a class="header-anchor" href="#glob-import" aria-label="Permalink to &quot;Glob Import&quot;">​</a></h2><p>Vite supports importing multiple modules from the file system via the special <code>import.meta.glob</code> function:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dir/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>The above will be transformed into the following:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// code produced by vite</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;./dir/foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dir/foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;./dir/bar.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dir/bar.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>You can then iterate over the keys of the <code>modules</code> object to access the corresponding modules:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> modules) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  modules[path]().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path, mod)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Matched files are by default lazy-loaded via dynamic import and will be split into separate chunks during build. If you&#39;d rather import all the modules directly (e.g. relying on side-effects in these modules to be applied first), you can pass <code>{ eager: true }</code> as the second argument:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dir/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { eager: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p>The above will be transformed into the following:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// code produced by vite</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __glob__0_0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./dir/foo.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __glob__0_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./dir/bar.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;./dir/foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: __glob__0_0,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;./dir/bar.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: __glob__0_1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="glob-import-as" tabindex="-1">Glob Import As <a class="header-anchor" href="#glob-import-as" aria-label="Permalink to &quot;Glob Import As&quot;">​</a></h3><p><code>import.meta.glob</code> also supports importing files as strings (similar to <a href="https://vitejs.dev/guide/assets.html#importing-asset-as-string" target="_blank" rel="noreferrer">Importing Asset as String</a>) with the <a href="https://github.com/tc39/proposal-import-reflection" target="_blank" rel="noreferrer">Import Reflection</a> syntax:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dir/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { as: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;raw&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, eager: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p>The above will be transformed into the following:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// code produced by vite</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;./dir/foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;export default &quot;foo&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;./dir/bar.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;export default &quot;bar&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>{ as: &#39;url&#39; }</code> is also supported for loading assets as URLs.</p><h3 id="multiple-patterns" tabindex="-1">Multiple Patterns <a class="header-anchor" href="#multiple-patterns" aria-label="Permalink to &quot;Multiple Patterns&quot;">​</a></h3><p>The first argument can be an array of globs, for example</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dir/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./another/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><h3 id="negative-patterns" tabindex="-1">Negative Patterns <a class="header-anchor" href="#negative-patterns" aria-label="Permalink to &quot;Negative Patterns&quot;">​</a></h3><p>Negative glob patterns are also supported (prefixed with <code>!</code>). To ignore some files from the result, you can add exclude glob patterns to the first argument:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dir/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;!**/bar.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// code produced by vite</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;./dir/foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dir/foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="named-imports" tabindex="-1">Named Imports <a class="header-anchor" href="#named-imports" aria-label="Permalink to &quot;Named Imports&quot;">​</a></h4><p>It&#39;s possible to only import parts of the modules with the <code>import</code> options.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dir/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { import: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setup&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// code produced by vite</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;./dir/foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dir/foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m.setup),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;./dir/bar.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dir/bar.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m.setup),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>When combined with <code>eager</code> it&#39;s even possible to have tree-shaking enabled for those modules.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dir/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  import: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setup&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  eager: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// code produced by vite:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { setup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __glob__0_0 } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./dir/foo.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { setup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __glob__0_1 } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./dir/bar.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;./dir/foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: __glob__0_0,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;./dir/bar.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: __glob__0_1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Set <code>import</code> to <code>default</code> to import the default export.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dir/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  import: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  eager: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// code produced by vite:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __glob__0_0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./dir/foo.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __glob__0_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./dir/bar.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;./dir/foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: __glob__0_0,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;./dir/bar.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: __glob__0_1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="custom-queries" tabindex="-1">Custom Queries <a class="header-anchor" href="#custom-queries" aria-label="Permalink to &quot;Custom Queries&quot;">​</a></h4><p>You can also use the <code>query</code> option to provide custom queries to imports for other plugins to consume.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dir/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  query: { foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bar: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// code produced by vite:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;./dir/foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dir/foo.js?foo=bar&amp;bar=true&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;./dir/bar.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dir/bar.js?foo=bar&amp;bar=true&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="glob-import-caveats" tabindex="-1">Glob Import Caveats <a class="header-anchor" href="#glob-import-caveats" aria-label="Permalink to &quot;Glob Import Caveats&quot;">​</a></h3><p>Note that:</p><ul><li>This is a Vite-only feature and is not a web or ES standard.</li><li>The glob patterns are treated like import specifiers: they must be either relative (start with <code>./</code>) or absolute (start with <code>/</code>, resolved relative to project root) or an alias path (see <a href="/config/shared-options.html#resolve-alias"><code>resolve.alias</code> option</a>).</li><li>The glob matching is done via <a href="https://github.com/mrmlnc/fast-glob" target="_blank" rel="noreferrer"><code>fast-glob</code></a> - check out its documentation for <a href="https://github.com/mrmlnc/fast-glob#pattern-syntax" target="_blank" rel="noreferrer">supported glob patterns</a>.</li><li>You should also be aware that all the arguments in the <code>import.meta.glob</code> must be <strong>passed as literals</strong>. You can NOT use variables or expressions in them.</li></ul><h2 id="dynamic-import" tabindex="-1">Dynamic Import <a class="header-anchor" href="#dynamic-import" aria-label="Permalink to &quot;Dynamic Import&quot;">​</a></h2><p>Similar to <a href="#glob-import">glob import</a>, Vite also supports dynamic import with variables.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`./dir/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.js\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Note that variables only represent file names one level deep. If <code>file</code> is <code>&#39;foo/bar&#39;</code>, the import would fail. For more advanced usage, you can use the <a href="#glob-import">glob import</a> feature.</p><h2 id="webassembly" tabindex="-1">WebAssembly <a class="header-anchor" href="#webassembly" aria-label="Permalink to &quot;WebAssembly&quot;">​</a></h2><p>Pre-compiled <code>.wasm</code> files can be imported with <code>?init</code>. The default export will be an initialization function that returns a Promise of the <a href="https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Instance" target="_blank" rel="noreferrer"><code>WebAssembly.Instance</code></a>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> init </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./example.wasm?init&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  instance.exports.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>The init function can also take an importObject which is passed along to <a href="https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/instantiate" target="_blank" rel="noreferrer"><code>WebAssembly.instantiate</code></a> as its second argument:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  imports: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    someFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>In the production build, <code>.wasm</code> files smaller than <code>assetInlineLimit</code> will be inlined as base64 strings. Otherwise, they will be treated as a <a href="./assets.html">static asset</a> and fetched on-demand.</p><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p><a href="https://github.com/WebAssembly/esm-integration" target="_blank" rel="noreferrer">ES Module Integration Proposal for WebAssembly</a> is not currently supported. Use <a href="https://github.com/Menci/vite-plugin-wasm" target="_blank" rel="noreferrer"><code>vite-plugin-wasm</code></a> or other community plugins to handle this.</p></div><h3 id="accessing-the-webassembly-module" tabindex="-1">Accessing the WebAssembly Module <a class="header-anchor" href="#accessing-the-webassembly-module" aria-label="Permalink to &quot;Accessing the WebAssembly Module&quot;">​</a></h3><p>If you need access to the <code>Module</code> object, e.g. to instantiate it multiple times, use an <a href="./assets.html#explicit-url-imports">explicit URL import</a> to resolve the asset, and then perform the instantiation:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;foo.wasm?url&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> responsePromise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasmUrl)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiateStreaming</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(responsePromise)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="fetching-the-module-in-node-js" tabindex="-1">Fetching the module in Node.js <a class="header-anchor" href="#fetching-the-module-in-node-js" aria-label="Permalink to &quot;Fetching the module in Node.js&quot;">​</a></h3><p>In SSR, the <code>fetch()</code> happening as part of the <code>?init</code> import, may fail with <code>TypeError: Invalid URL</code>. See the issue <a href="https://github.com/vitejs/vite/issues/8882" target="_blank" rel="noreferrer">Support wasm in SSR</a>.</p><p>Here is an alternative, assuming the project base is the current directory:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;foo.wasm?url&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { readFile } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs/promises&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> resolvedUrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./test/boot.test.wasm?url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).default</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resolvedUrl)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="web-workers" tabindex="-1">Web Workers <a class="header-anchor" href="#web-workers" aria-label="Permalink to &quot;Web Workers&quot;">​</a></h2><h3 id="import-with-constructors" tabindex="-1">Import with Constructors <a class="header-anchor" href="#import-with-constructors" aria-label="Permalink to &quot;Import with Constructors&quot;">​</a></h3><p>A web worker script can be imported using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker" target="_blank" rel="noreferrer"><code>new Worker()</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/SharedWorker" target="_blank" rel="noreferrer"><code>new SharedWorker()</code></a>. Compared to the worker suffixes, this syntax leans closer to the standards and is the <strong>recommended</strong> way to create workers.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> worker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./worker.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url))</span></span></code></pre></div><p>The worker constructor also accepts options, which can be used to create &quot;module&quot; workers:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> worker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./worker.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url), {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="import-with-query-suffixes" tabindex="-1">Import with Query Suffixes <a class="header-anchor" href="#import-with-query-suffixes" aria-label="Permalink to &quot;Import with Query Suffixes&quot;">​</a></h3><p>A web worker script can be directly imported by appending <code>?worker</code> or <code>?sharedworker</code> to the import request. The default export will be a custom worker constructor:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyWorker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./worker?worker&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> worker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyWorker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>The worker script can also use ESM <code>import</code> statements instead of <code>importScripts()</code>. <strong>Note</strong>: During development this relies on <a href="https://caniuse.com/?search=module%20worker" target="_blank" rel="noreferrer">browser native support</a>, but for the production build it is compiled away.</p><p>By default, the worker script will be emitted as a separate chunk in the production build. If you wish to inline the worker as base64 strings, add the <code>inline</code> query:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyWorker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./worker?worker&amp;inline&#39;</span></span></code></pre></div><p>If you wish to retrieve the worker as a URL, add the <code>url</code> query:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyWorker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./worker?worker&amp;url&#39;</span></span></code></pre></div><p>See <a href="/config/worker-options.html">Worker Options</a> for details on configuring the bundling of all workers.</p><h2 id="build-optimizations" tabindex="-1">Build Optimizations <a class="header-anchor" href="#build-optimizations" aria-label="Permalink to &quot;Build Optimizations&quot;">​</a></h2><blockquote><p>Features listed below are automatically applied as part of the build process and there is no need for explicit configuration unless you want to disable them.</p></blockquote><h3 id="css-code-splitting" tabindex="-1">CSS Code Splitting <a class="header-anchor" href="#css-code-splitting" aria-label="Permalink to &quot;CSS Code Splitting&quot;">​</a></h3><p>Vite automatically extracts the CSS used by modules in an async chunk and generates a separate file for it. The CSS file is automatically loaded via a <code>&lt;link&gt;</code> tag when the associated async chunk is loaded, and the async chunk is guaranteed to only be evaluated after the CSS is loaded to avoid <a href="https://en.wikipedia.org/wiki/Flash_of_unstyled_content#:~:text=A%20flash%20of%20unstyled%20content,before%20all%20information%20is%20retrieved." target="_blank" rel="noreferrer">FOUC</a>.</p><p>If you&#39;d rather have all the CSS extracted into a single file, you can disable CSS code splitting by setting <a href="/config/build-options.html#build-csscodesplit"><code>build.cssCodeSplit</code></a> to <code>false</code>.</p><h3 id="preload-directives-generation" tabindex="-1">Preload Directives Generation <a class="header-anchor" href="#preload-directives-generation" aria-label="Permalink to &quot;Preload Directives Generation&quot;">​</a></h3><p>Vite automatically generates <code>&lt;link rel=&quot;modulepreload&quot;&gt;</code> directives for entry chunks and their direct imports in the built HTML.</p><h3 id="async-chunk-loading-optimization" tabindex="-1">Async Chunk Loading Optimization <a class="header-anchor" href="#async-chunk-loading-optimization" aria-label="Permalink to &quot;Async Chunk Loading Optimization&quot;">​</a></h3><p>In real world applications, Rollup often generates &quot;common&quot; chunks - code that is shared between two or more other chunks. Combined with dynamic imports, it is quite common to have the following scenario:</p>`,194),r=s('<p>In the non-optimized scenarios, when async chunk <code>A</code> is imported, the browser will have to request and parse <code>A</code> before it can figure out that it also needs the common chunk <code>C</code>. This results in an extra network roundtrip:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Entry ---&gt; A ---&gt; C</span></span></code></pre></div><p>Vite automatically rewrites code-split dynamic import calls with a preload step so that when <code>A</code> is requested, <code>C</code> is fetched <strong>in parallel</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Entry ---&gt; (A + C)</span></span></code></pre></div><p>It is possible for <code>C</code> to have further imports, which will result in even more roundtrips in the un-optimized scenario. Vite&#39;s optimization will trace all the direct imports to completely eliminate the roundtrips regardless of import depth.</p>',5),E=JSON.parse('{"title":"Features","description":"","frontmatter":{},"headers":[],"relativePath":"guide/features.md","filePath":"guide/features.md"}'),o={name:"guide/features.md"},y=Object.assign(o,{setup(k){return(d,c)=>{const i=a("svg-image");return e(),t("div",null,[h,n(i,{svg:l(p)},null,8,["svg"]),r])}}});export{E as __pageData,y as default};
