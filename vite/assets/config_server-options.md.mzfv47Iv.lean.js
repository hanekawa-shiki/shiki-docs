import{_ as s,o as a,c as n,R as l}from"./chunks/framework.HYN-VFUH.js";const u=JSON.parse('{"title":"开发服务器选项","description":"","frontmatter":{},"headers":[],"relativePath":"config/server-options.md","filePath":"config/server-options.md"}'),e={name:"config/server-options.md"},o=l(`<h1 id="server-options" tabindex="-1">开发服务器选项 <a class="header-anchor" href="#server-options" aria-label="Permalink to &quot;开发服务器选项 {#server-options}&quot;">​</a></h1><h2 id="server-host" tabindex="-1">server.host <a class="header-anchor" href="#server-host" aria-label="Permalink to &quot;server.host {#server-host}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>string | boolean</code></li><li><strong>默认：</strong> <code>&#39;localhost&#39;</code></li></ul><p>指定服务器应该监听哪个 IP 地址。 如果将此设置为 <code>0.0.0.0</code> 或者 <code>true</code> 将监听所有地址，包括局域网和公网地址。</p><p>也可以通过 CLI 使用 <code>--host 0.0.0.0</code> 或 <code>--host</code> 来设置。</p><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>在某些情况下，可能响应的是其他服务器而不是 Vite。</p><p>第一种情况是 <code>localhost</code> 被使用了。Node.js 在 v17 以下版本中默认会对 DNS 解析地址的结果进行重新排序。当访问 <code>localhost</code> 时，浏览器使用 DNS 来解析地址，这个地址可能与 Vite 正在监听的地址不同。当地址不一致时，Vite 会打印出来。</p><p>你可以设置 <a href="https://nodejs.org/api/dns.html#dns_dns_setdefaultresultorder_order" target="_blank" rel="noreferrer"><code>dns.setDefaultResultOrder(&#39;verbatim&#39;)</code></a> 来禁用这个重新排序的行为。Vite 会将地址打印为 <code>localhost</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineConfig } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vite&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> dns </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;dns&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">dns.</span><span style="color:#B392F0;">setDefaultResultOrder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;verbatim&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// omit</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineConfig } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vite&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> dns </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;dns&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">dns.</span><span style="color:#6F42C1;">setDefaultResultOrder</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;verbatim&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// omit</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>第二种情况是使用了通配主机地址（例如 <code>0.0.0.0</code>）。这是因为侦听非通配符主机的服务器优先于侦听通配符主机的服务器。</p></div><div class="tip custom-block"><p class="custom-block-title">在 WSL2 中通过 LAN 访问开发服务器</p><p>当你在 WSL2 运行 Vite 时，仅设置 <code>host: true</code> 来从局域网访问服务器是不够的。 请看 <a href="https://learn.microsoft.com/en-us/windows/wsl/networking#accessing-a-wsl-2-distribution-from-your-local-area-network-lan" target="_blank" rel="noreferrer">WSL 相关文档</a> 了解更多细节。</p></div><h2 id="server-port" tabindex="-1">server.port <a class="header-anchor" href="#server-port" aria-label="Permalink to &quot;server.port {#server-port}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>number</code></li><li><strong>默认值：</strong> <code>5173</code></li></ul><p>指定开发服务器端口。注意：如果端口已经被使用，Vite 会自动尝试下一个可用的端口，所以这可能不是开发服务器最终监听的实际端口。</p><h2 id="server-strictport" tabindex="-1">server.strictPort <a class="header-anchor" href="#server-strictport" aria-label="Permalink to &quot;server.strictPort {#server-strictport}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>boolean</code></li></ul><p>设为 <code>true</code> 时若端口已被占用则会直接退出，而不是尝试下一个可用端口。</p><h2 id="server-https" tabindex="-1">server.https <a class="header-anchor" href="#server-https" aria-label="Permalink to &quot;server.https {#server-https}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>https.ServerOptions</code></li></ul><p>启用 TLS + HTTP/2。注意：当 <a href="#server-proxy"><code>server.proxy</code> 选项</a> 也被使用时，将会仅使用 TLS。</p><p>这个值也可以是一个传递给 <code>https.createServer()</code> 的 <a href="https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener" target="_blank" rel="noreferrer">选项对象</a>。</p><p>需要一个合法可用的证书。对基本使用的配置需求来说，你可以添加 <a href="https://github.com/vitejs/vite-plugin-basic-ssl" target="_blank" rel="noreferrer">@vitejs/plugin-basic-ssl</a> 到项目插件中，它会自动创建和缓存一个自签名的证书。但我们推荐你创建和使用你自己的证书。</p><h2 id="server-open" tabindex="-1">server.open <a class="header-anchor" href="#server-open" aria-label="Permalink to &quot;server.open {#server-open}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>boolean | string</code></li></ul><p>开发服务器启动时，自动在浏览器中打开应用程序。当该值为字符串时，它将被用作 URL 的路径名。如果你想在你喜欢的某个浏览器打开该开发服务器，你可以设置环境变量 <code>process.env.BROWSER</code> （例如 <code>firefox</code>）。你还可以设置 <code>process.env.BROWSER_ARGS</code> 来传递额外的参数（例如 <code>--incognito</code>）。</p><p><code>BROWSER</code> 和 <code>BROWSER_ARGS</code> 都是特殊的环境变量，你可以将它们放在 <code>.env</code> 文件中进行设置，欲了解更多打开浏览器的更多内部细节，请参阅 <a href="https://github.com/sindresorhus/open#app" target="_blank" rel="noreferrer"><code>open</code> 包的源码</a>。</p><p><strong>示例：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  server: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    open: </span><span style="color:#9ECBFF;">&#39;/docs/index.html&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  server: {</span></span>
<span class="line"><span style="color:#24292E;">    open: </span><span style="color:#032F62;">&#39;/docs/index.html&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="server-proxy" tabindex="-1">server.proxy <a class="header-anchor" href="#server-proxy" aria-label="Permalink to &quot;server.proxy {#server-proxy}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>Record&lt;string, string | ProxyOptions&gt;</code></li></ul><p>为开发服务器配置自定义代理规则。期望接收一个 <code>{ key: options }</code> 对象。任何请求路径以 key 值开头的请求将被代理到对应的目标。如果 key 值以 <code>^</code> 开头，将被识别为 <code>RegExp</code>。<code>configure</code> 选项可用于访问 proxy 实例。</p><p>请注意，如果使用了非相对的 <a href="/config/shared-options.html#base">基础路径 <code>base</code></a>，则必须在每个 key 值前加上该 <code>base</code>。</p><p>继承自 <a href="https://github.com/http-party/node-http-proxy#options" target="_blank" rel="noreferrer"><code>http-proxy</code></a>。完整选项详见 <a href="https://github.com/vitejs/vite/blob/main/packages/vite/src/node/server/middlewares/proxy.ts#L12" target="_blank" rel="noreferrer">此处</a>.</p><p>在某些情况下，你可能也想要配置底层的开发服务器。（例如添加自定义的中间件到内部的 <a href="https://github.com/senchalabs/connect" target="_blank" rel="noreferrer">connect</a> 应用中）为了实现这一点，你需要编写你自己的 <a href="/guide/using-plugins.html">插件</a> 并使用 <a href="/guide/api-plugin.html#configureserver">configureServer</a> 函数。</p><p><strong>示例：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  server: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    proxy: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 字符串简写写法：http://localhost:5173/foo -&gt; http://localhost:4567/foo</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;/foo&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;http://localhost:4567&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 带选项写法：http://localhost:5173/api/bar -&gt; http://jsonplaceholder.typicode.com/bar</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;/api&#39;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        target: </span><span style="color:#9ECBFF;">&#39;http://jsonplaceholder.typicode.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        changeOrigin: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">rewrite</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">api</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 正则表达式写法：http://localhost:5173/fallback/ -&gt; http://jsonplaceholder.typicode.com/</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;^/fallback/.*&#39;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        target: </span><span style="color:#9ECBFF;">&#39;http://jsonplaceholder.typicode.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        changeOrigin: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">rewrite</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">fallback</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 使用 proxy 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;/api&#39;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        target: </span><span style="color:#9ECBFF;">&#39;http://jsonplaceholder.typicode.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        changeOrigin: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">proxy</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// proxy 是 &#39;http-proxy&#39; 的实例</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 代理 websockets 或 socket.io 写法：ws://localhost:5173/socket.io -&gt; ws://localhost:5174/socket.io</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;/socket.io&#39;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        target: </span><span style="color:#9ECBFF;">&#39;ws://localhost:5174&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ws: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  server: {</span></span>
<span class="line"><span style="color:#24292E;">    proxy: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 字符串简写写法：http://localhost:5173/foo -&gt; http://localhost:4567/foo</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;/foo&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;http://localhost:4567&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 带选项写法：http://localhost:5173/api/bar -&gt; http://jsonplaceholder.typicode.com/bar</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;/api&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        target: </span><span style="color:#032F62;">&#39;http://jsonplaceholder.typicode.com&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        changeOrigin: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">rewrite</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">path</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#22863A;font-weight:bold;">\\/</span><span style="color:#032F62;">api/</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 正则表达式写法：http://localhost:5173/fallback/ -&gt; http://jsonplaceholder.typicode.com/</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;^/fallback/.*&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        target: </span><span style="color:#032F62;">&#39;http://jsonplaceholder.typicode.com&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        changeOrigin: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">rewrite</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">path</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#22863A;font-weight:bold;">\\/</span><span style="color:#032F62;">fallback/</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 使用 proxy 实例</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;/api&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        target: </span><span style="color:#032F62;">&#39;http://jsonplaceholder.typicode.com&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        changeOrigin: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">proxy</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// proxy 是 &#39;http-proxy&#39; 的实例</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 代理 websockets 或 socket.io 写法：ws://localhost:5173/socket.io -&gt; ws://localhost:5174/socket.io</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;/socket.io&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        target: </span><span style="color:#032F62;">&#39;ws://localhost:5174&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        ws: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="server-cors" tabindex="-1">server.cors <a class="header-anchor" href="#server-cors" aria-label="Permalink to &quot;server.cors {#server-cors}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>boolean | CorsOptions</code></li></ul><p>为开发服务器配置 CORS。默认启用并允许任何源，传递一个 <a href="https://github.com/expressjs/cors#configuration-options" target="_blank" rel="noreferrer">选项对象</a> 来调整行为或设为 <code>false</code> 表示禁用。</p><h2 id="server-headers" tabindex="-1">server.headers <a class="header-anchor" href="#server-headers" aria-label="Permalink to &quot;server.headers {#server-headers}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>OutgoingHttpHeaders</code></li></ul><p>指定服务器响应的 header。</p><h2 id="server-hmr" tabindex="-1">server.hmr <a class="header-anchor" href="#server-hmr" aria-label="Permalink to &quot;server.hmr {#server-hmr}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>boolean | { protocol?: string, host?: string, port?: number, path?: string, timeout?: number, overlay?: boolean, clientPort?: number, server?: Server }</code></li></ul><p>禁用或配置 HMR 连接（用于 HMR websocket 必须使用不同的 http 服务器地址的情况）。</p><p>设置 <code>server.hmr.overlay</code> 为 <code>false</code> 可以禁用开发服务器错误的屏蔽。</p><p><code>clientPort</code> 是一个高级选项，只在客户端的情况下覆盖端口，这允许你为 websocket 提供不同的端口，而并非在客户端代码中查找。如果需要在 dev-server 情况下使用 SSL 代理，这非常有用。</p><p>当 <code>server.hmr.server</code> 被定义后，Vite 将会通过所提供的的服务器来处理 HMR 连接。如果不是在中间件模式下，Vite 将尝试通过已有服务器处理 HMR 连接。这在使用自签证书或想通过网络在某端口暴露 Vite 的情况下，非常有用。</p><p>查看 <a href="https://github.com/sapphi-red/vite-setup-catalogue" target="_blank" rel="noreferrer"><code>vite-setup-catalogue</code></a> 一节获取更多实例。</p><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>在默认配置下, 在 Vite 之前的反向代理应该支持代理 WebSocket。如果 Vite HMR 客户端连接 WebSocket 失败，该客户端将兜底为绕过反向代理、直接连接 WebSocket 到 Vite HMR 服务器：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Direct websocket connection fallback. Check out https://vitejs.dev/config/server-options.html#server-hmr to remove the previous connection error.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Direct websocket connection fallback. Check out https://vitejs.dev/config/server-options.html#server-hmr to remove the previous connection error.</span></span></code></pre></div><p>当该兜底策略偶然地可以被忽略时，这条报错将会出现在浏览器中。若要通过直接绕过反向代理来避免此错误，你可以:</p><ul><li>将反向代理配置为代理 WebSocket</li><li>设置 <a href="#server-strictport"><code>server.strictPort = true</code></a> 并设置 <code>server.hmr.clientPort</code> 的值与 <code>server.port</code> 相同</li><li>设置 <code>server.hmr.port</code> 为一个与 <a href="#server-port"><code>server.port</code></a> 不同的值</li></ul></div><h2 id="server-warmup" tabindex="-1">server.warmup <a class="header-anchor" href="#server-warmup" aria-label="Permalink to &quot;server.warmup&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>{ clientFiles?: string[], ssrFiles?: string[] }</code></li><li><strong>相关：</strong> <a href="/guide/performance.html#warm-up-frequently-used-files">预热常用文件</a></li></ul><p>提前转换和缓存文件以进行预热。可以在服务器启动时提高初始页面加载速度，并防止转换瀑布。</p><p><code>clientFiles</code> 是仅在客户端使用的文件，而 <code>ssrFiles</code> 是仅在服务器端渲染中使用的文件。它们接受一个文件路径数组或相对于 <code>root</code> 的 <a href="https://github.com/mrmlnc/fast-glob" target="_blank" rel="noreferrer"><code>fast-glob</code></a> 通配符。</p><p>请确保只添加经常使用的文件，以免在启动时过载 Vite 开发服务器。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  server: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    warmup: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      clientFiles: [</span><span style="color:#9ECBFF;">&#39;./src/components/*.vue&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;./src/utils/big-utils.js&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      ssrFiles: [</span><span style="color:#9ECBFF;">&#39;./src/server/modules/*.js&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  server: {</span></span>
<span class="line"><span style="color:#24292E;">    warmup: {</span></span>
<span class="line"><span style="color:#24292E;">      clientFiles: [</span><span style="color:#032F62;">&#39;./src/components/*.vue&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;./src/utils/big-utils.js&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      ssrFiles: [</span><span style="color:#032F62;">&#39;./src/server/modules/*.js&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="server-watch" tabindex="-1">server.watch <a class="header-anchor" href="#server-watch" aria-label="Permalink to &quot;server.watch {#server-watch}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>object | null</code></li></ul><p>传递给 <a href="https://github.com/paulmillr/chokidar#api" target="_blank" rel="noreferrer">chokidar</a> 的文件系统监听器选项。</p><p>Vite 服务器的文件监听器默认会监听 <code>root</code> 目录，同时会跳过 <code>.git/</code> 和 <code>node_modules/</code> 目录。当监听到文件更新时，Vite 会应用 HMR 并且只在需要时更新页面。</p><p>如果设置为 <code>null</code>，则不会监听任何文件。<code>server.watcher</code> 将提供一个兼容的事件发射器，但是调用 <code>add</code> 或 <code>unwatch</code> 将没有任何效果。</p><div class="warning custom-block"><p class="custom-block-title">监听 <code>node_modules</code> 中的文件</p><p>目前没有可行的方式来监听 <code>node_modules</code> 中的文件。若要了解更多详情和可能的临时替代方案，你可以关注 <a href="https://github.com/vitejs/vite/issues/8619" target="_blank" rel="noreferrer">issue #8619</a>。</p></div><div class="warning custom-block"><p class="custom-block-title">在 Windows Linux 子系统（WSL）上使用 Vite</p><p>当需要在 Windows Subsystem for Linux (WSL) 2 上运行 Vite 时，如果项目文件夹位于 Windows 文件系统中，你需要将此选项设置为 <code>{ usePolling: true }</code>。这是由于 Windows 文件系统的 <a href="https://github.com/microsoft/WSL/issues/4739" target="_blank" rel="noreferrer">WSL2 限制</a> 造成的。</p><p>要解决这一问题，你可以采取以下两种办法之一：</p><ul><li><strong>推荐</strong>：使用 WSL2 应用来编辑你的文件 <ul><li>同时我们推荐将你的项目移出 Windows 文件系统，从 WSL2 访问 Windows 文件系统非常慢。移除这一开销将大大提升性能表现。</li></ul></li><li>设置 <code>{ usePolling: true }</code><ul><li>注意 <a href="https://github.com/paulmillr/chokidar#performance" target="_blank" rel="noreferrer"><code>usePolling</code> 会导致高 CPU 占用率</a></li></ul></li></ul></div><h2 id="server-middlewaremode" tabindex="-1">server.middlewareMode <a class="header-anchor" href="#server-middlewaremode" aria-label="Permalink to &quot;server.middlewareMode {#server-middlewaremode}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>&#39;ssr&#39; | &#39;html&#39;</code></li><li><strong>默认值：</strong> <code>false</code></li></ul><p>以中间件模式创建 Vite 服务器。</p><ul><li><p><strong>相关：</strong> <a href="./shared-options.html#apptype">appType</a>，<a href="/guide/ssr.html#setting-up-the-dev-server">SSR - 设置开发服务器</a></p></li><li><p><strong>示例：</strong></p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> express </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;express&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createServer </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> createViteServer } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 以中间件模式创建 Vite 服务器</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vite</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createViteServer</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    server: { middlewareMode: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    appType: </span><span style="color:#9ECBFF;">&#39;custom&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 不引入 Vite 默认的 HTML 处理中间件</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 将 vite 的 connect 实例作中间件使用</span></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    vite.middlewares.</span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(req, res, next)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;*&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 由于 \`appType\` 的值是 \`&#39;custom&#39;\`，因此应在此处提供响应。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 请注意：如果 \`appType\` 值为 \`&#39;spa&#39;\` 或 \`&#39;mpa&#39;\`，Vite 会包含</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理 HTML 请求和 404 的中间件，因此用户中间件应该在</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Vite 的中间件之前添加，以确保其生效。</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> express </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;express&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createServer </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> createViteServer } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">express</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 以中间件模式创建 Vite 服务器</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vite</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createViteServer</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    server: { middlewareMode: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    appType: </span><span style="color:#032F62;">&#39;custom&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 不引入 Vite 默认的 HTML 处理中间件</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 将 vite 的 connect 实例作中间件使用</span></span>
<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">((</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    vite.middlewares.</span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(req, res, next)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;*&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 由于 \`appType\` 的值是 \`&#39;custom&#39;\`，因此应在此处提供响应。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 请注意：如果 \`appType\` 值为 \`&#39;spa&#39;\` 或 \`&#39;mpa&#39;\`，Vite 会包含</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理 HTML 请求和 404 的中间件，因此用户中间件应该在</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Vite 的中间件之前添加，以确保其生效。</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">()</span></span></code></pre></div><h2 id="server-fs-strict" tabindex="-1">server.fs.strict <a class="header-anchor" href="#server-fs-strict" aria-label="Permalink to &quot;server.fs.strict {#server-fs-strict}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>boolean</code></li><li><strong>默认：</strong> <code>true</code> (自 Vite 2.7 起默认启用)</li></ul><p>限制为工作区 root 路径以外的文件的访问。</p><h2 id="server-fs-allow" tabindex="-1">server.fs.allow <a class="header-anchor" href="#server-fs-allow" aria-label="Permalink to &quot;server.fs.allow {#server-fs-allow}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>string[]</code></li></ul><p>限制哪些文件可以通过 <code>/@fs/</code> 路径提供服务。当 <code>server.fs.strict</code> 设置为 true 时，访问这个目录列表外的文件将会返回 403 结果。</p><p>可以提供目录和文件。</p><p>Vite 将会搜索此根目录下潜在工作空间并作默认使用。一个有效的工作空间应符合以下几个条件，否则会默认以 <a href="/guide/#index-html-and-project-root">项目 root 目录</a> 作备选方案。</p><ul><li>在 <code>package.json</code> 中包含 <code>workspaces</code> 字段</li><li>包含以下几种文件之一 <ul><li><code>lerna.json</code></li><li><code>pnpm-workspace.yaml</code></li></ul></li></ul><p>接受一个路径作为自定义工作区的 root 目录。可以是绝对路径或是相对于 <a href="/guide/#index-html-and-project-root">项目 root 目录</a> 的相对路径。示例如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  server: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    fs: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 允许为项目根目录的上一级提供服务</span></span>
<span class="line"><span style="color:#E1E4E8;">      allow: [</span><span style="color:#9ECBFF;">&#39;..&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  server: {</span></span>
<span class="line"><span style="color:#24292E;">    fs: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 允许为项目根目录的上一级提供服务</span></span>
<span class="line"><span style="color:#24292E;">      allow: [</span><span style="color:#032F62;">&#39;..&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>当 <code>server.fs.allow</code> 被设置时，工作区根目录的自动检索将被禁用。当需要扩展默认的行为时，你可以使用暴露出来的工具函数 <code>searchForWorkspaceRoot</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineConfig, searchForWorkspaceRoot } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  server: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    fs: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      allow: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 搜索工作区的根目录</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">searchForWorkspaceRoot</span><span style="color:#E1E4E8;">(process.</span><span style="color:#B392F0;">cwd</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 自定义规则</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;/path/to/custom/allow_directory&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;/path/to/custom/allow_file.demo&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineConfig, searchForWorkspaceRoot } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  server: {</span></span>
<span class="line"><span style="color:#24292E;">    fs: {</span></span>
<span class="line"><span style="color:#24292E;">      allow: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 搜索工作区的根目录</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">searchForWorkspaceRoot</span><span style="color:#24292E;">(process.</span><span style="color:#6F42C1;">cwd</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 自定义规则</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;/path/to/custom/allow_directory&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;/path/to/custom/allow_file.demo&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="server-fs-deny" tabindex="-1">server.fs.deny <a class="header-anchor" href="#server-fs-deny" aria-label="Permalink to &quot;server.fs.deny {#server-fs-deny}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>string[]</code></li><li><strong>默认：</strong> <code>[&#39;.env&#39;, &#39;.env.*&#39;, &#39;*.{crt,pem}&#39;]</code></li></ul><p>用于限制 Vite 开发服务器提供敏感文件的黑名单。这会比 <a href="#server-fs-allow"><code>server.fs.allow</code></a> 选项的优先级更高。同时还支持 <a href="https://github.com/micromatch/picomatch#globbing-features" target="_blank" rel="noreferrer">picomatch 模式</a>。</p><h2 id="server-origin" tabindex="-1">server.origin <a class="header-anchor" href="#server-origin" aria-label="Permalink to &quot;server.origin {#server-origin}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>string</code></li></ul><p>用于定义开发调试阶段生成资源的 origin。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  server: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    origin: </span><span style="color:#9ECBFF;">&#39;http://127.0.0.1:8080&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  server: {</span></span>
<span class="line"><span style="color:#24292E;">    origin: </span><span style="color:#032F62;">&#39;http://127.0.0.1:8080&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="server-sourcemapignorelist" tabindex="-1">server.sourcemapIgnoreList <a class="header-anchor" href="#server-sourcemapignorelist" aria-label="Permalink to &quot;server.sourcemapIgnoreList {#server-sourcemapignorelist}&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>false | (sourcePath: string, sourcemapPath: string) =&gt; boolean</code></li><li><strong>默认：</strong> <code>(sourcePath) =&gt; sourcePath.includes(&#39;node_modules&#39;)</code></li></ul><p>是否忽略服务器 sourcemap 中的源文件，用于填充 <a href="https://developer.chrome.com/articles/x-google-ignore-list/" target="_blank" rel="noreferrer"><code>x_google_ignoreList</code> source map 扩展</a>。</p><p>对开发服务器来说 <code>server.sourcemapIgnoreList</code> 等价于 <a href="https://rollupjs.org/configuration-options/#output-sourcemapignorelist" target="_blank" rel="noreferrer"><code>build.rollupOptions.output.sourcemapIgnoreList</code></a>。两个配置选项之间的区别在于，rollup 函数使用相对路径调用 <code>sourcePath</code>，而 <code>server.sourcemapIgnoreList</code> 使用绝对路径调用。在开发过程中，大多数模块的映射和源文件位于同一个文件夹中，因此 <code>sourcePath</code> 的相对路径就是文件名本身。在这些情况下，使用绝对路径更加方便。</p><p>默认情况下，它会排除所有包含 <code>node_modules</code> 的路径。你可以传递 <code>false</code> 来禁用此行为，或者为了获得完全的控制，可以传递一个函数，该函数接受源路径和 sourcemap 的路径，并返回是否忽略源路径。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  server: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这是默认值，它将把所有路径中含有 node_modules 的文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加到忽略列表中。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">sourcemapIgnoreList</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">sourcePath</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">sourcemapPath</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sourcePath.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;node_modules&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  server: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这是默认值，它将把所有路径中含有 node_modules 的文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加到忽略列表中。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">sourcemapIgnoreList</span><span style="color:#24292E;">(</span><span style="color:#E36209;">sourcePath</span><span style="color:#24292E;">, </span><span style="color:#E36209;">sourcemapPath</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sourcePath.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;node_modules&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>需要单独设置 <a href="#server-sourcemapignorelist"><code>server.sourcemapIgnoreList</code></a> 和 <a href="https://rollupjs.org/configuration-options/#output-sourcemapignorelist" target="_blank" rel="noreferrer"><code>build.rollupOptions.output.sourcemapIgnoreList</code></a>。<code>server.sourcemapIgnoreList</code> 是一个仅适用于服务端的配置，并不从定义好的 rollup 选项中获得其默认值。</p></div>`,91),p=[o];function r(t,c,i,E,y,d){return a(),n("div",null,p)}const g=s(e,[["render",r]]);export{u as __pageData,g as default};
