import{_ as n,y as a,x as s,W as t}from"./plugin-vue_export-helper.0b0d78d5.js";const g='{"title":"Plugins","description":"","frontmatter":{},"headers":[{"level":2,"title":"Confirmando (ou fazendo commit de) Muta\xE7\xF5es Dentro de Plugins","slug":"confirmando-ou-fazendo-commit-de-mutacoes-dentro-de-plugins"},{"level":2,"title":"Capturando os Momentos do Estado","slug":"capturando-os-momentos-do-estado"},{"level":2,"title":"Plugin de Log Integrado","slug":"plugin-de-log-integrado"}],"relativePath":"ptbr/guide/plugins.md","lastUpdated":1702210160133}',o={},e=t(`<h1 id="plugins" tabindex="-1">Plugins <a class="header-anchor" href="#plugins" aria-hidden="true">#</a></h1><div class="scrimba"><a href="https://scrimba.com/p/pnyzgAP/cvp8ZkCR" target="_blank" rel="noopener noreferrer">Tente esta li\xE7\xE3o no Scrimba</a></div><p>Os <em>stores</em> do Vuex aceitam a op\xE7\xE3o <em>plugins</em> que exp\xF5e gatilhos (ou <em>hooks</em>) para cada muta\xE7\xE3o. Um <em>plugin</em> Vuex \xE9 simplesmente uma fun\xE7\xE3o que recebe um <em>store</em> como seu \xFAnico argumento:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">myPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// chamado quando o store \xE9 inicializado</span>
  store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// chamada ap\xF3s cada muta\xE7\xE3o.</span>
    <span class="token comment">// A muta\xE7\xE3o vem no formato de \`{ type, payload }\`.</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>E pode ser usada assim:</p><div class="language-js"><pre><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>myPlugin<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="confirmando-ou-fazendo-commit-de-mutacoes-dentro-de-plugins" tabindex="-1">Confirmando (ou fazendo <em>commit</em> de) Muta\xE7\xF5es Dentro de Plugins <a class="header-anchor" href="#confirmando-ou-fazendo-commit-de-mutacoes-dentro-de-plugins" aria-hidden="true">#</a></h2><p><em>Plugins</em> n\xE3o tem permiss\xE3o para alterar o estado diretamente - similar aos seus componentes, eles podem apenas acionar mudan\xE7as confirmando (ou fazendo o <em>commit</em> de) muta\xE7\xF5es.</p><p>Por confirmar (ou fazer <em>commit</em> de) muta\xE7\xF5es, um <em>plugin</em> pode ser usado para sincronizar uma fonte de dados ao <em>store</em>. Por exemplo, para sincronizar uma fonte de dados <em>websocket</em> ao <em>store</em> (isso \xE9 s\xF3 um exemplo inventado, na realidade a fun\xE7\xE3o <em>createPlugin</em> pode receber par\xE2metros adicionais para tarefas mais complexas):</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createWebSocketPlugin</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;receiveData&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">mutation</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;UPDATE_DATA&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;update&#39;</span><span class="token punctuation">,</span> mutation<span class="token punctuation">.</span>payload<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">createWebSocketPlugin</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  state<span class="token punctuation">,</span>
  mutations<span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>plugin<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="capturando-os-momentos-do-estado" tabindex="-1">Capturando os Momentos do Estado <a class="header-anchor" href="#capturando-os-momentos-do-estado" aria-hidden="true">#</a></h2><p>\xC0s vezes, um <em>plugin</em> pode querer receber &quot;momentos&quot; do estado, e tamb\xE9m comparar o estado p\xF3s-muta\xE7\xE3o com o estado de pr\xE9-muta\xE7\xE3o. Para conseguir isso, voc\xEA precisar\xE1 realizar uma c\xF3pia-profunda do objeto de estado:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">myPluginWithSnapshot</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> prevState <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">)</span>
  store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> nextState <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>

    <span class="token comment">// compara \`prevState\` e \`nextState\`...</span>

    <span class="token comment">// salva o estado para a pr\xF3xima muta\xE7\xE3o</span>
    prevState <span class="token operator">=</span> nextState
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong><em>Plugins</em> que capturam momentos do estado devem ser usados apenas durante o desenvolvimento.</strong> Quando usamos <em>webpack</em> ou <em>Browserify</em>, podemos construir nossas pr\xF3prias ferramentas de distribui\xE7\xE3o (ou nossos pr\xF3prios <em>builds</em>) que lidam com isso para n\xF3s:</p><div class="language-js"><pre><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span>
    <span class="token operator">?</span> <span class="token punctuation">[</span>myPluginWithSnapshot<span class="token punctuation">]</span>
    <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>O <em>plugin</em> vai ser usado por padr\xE3o. Para produ\xE7\xE3o, voc\xEA vai precisar do <a href="https://webpack.js.org/plugins/define-plugin/" target="_blank" rel="noopener noreferrer">DefinePlugin</a> para webpack ou <a href="https://github.com/hughsk/envify" target="_blank" rel="noopener noreferrer">envify</a> para Browserify para converter o valor do <code>process.<wbr>env.NODE_ENV !== &#39;production&#39;</code> para <code>false</code> na distribui\xE7\xE3o (ou <em>build</em>) final.</p><h2 id="plugin-de-log-integrado" tabindex="-1">Plugin de Log Integrado <a class="header-anchor" href="#plugin-de-log-integrado" aria-hidden="true">#</a></h2><p>Vuex vem com um <em>plugin</em> de <em>log</em> para casos comuns de depura\xE7\xE3o:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createLogger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>A fun\xE7\xE3o <code>createLogger</code> tem algumas op\xE7\xF5es:</p><div class="language-js"><pre><code><span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">collapsed</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// expande automaticamente muta\xE7\xF5es registradas no log</span>
  <span class="token function">filter</span> <span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> stateBefore<span class="token punctuation">,</span> stateAfter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// retorna \`true\` se uma muta\xE7\xE3o deve ser registrada no log</span>
    <span class="token comment">// \`mutation\` \xE9 um \`{ type, payload }\`</span>
    <span class="token keyword">return</span> mutation<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&quot;aBlocklistedMutation&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">actionFilter</span> <span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// o mesmo que \`filter\`, mas para a\xE7\xF5es</span>
    <span class="token comment">// \`action\` \xE9 um \`{ type, payload }\`</span>
    <span class="token keyword">return</span> action<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&quot;aBlocklistedAction&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">transformer</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// transforma o estado antes de regitr\xE1-lo no log.</span>
    <span class="token comment">// por exemplo, retorna apenas uma sub-\xE1rvore espec\xEDfica</span>
    <span class="token keyword">return</span> state<span class="token punctuation">.</span>subTree
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mutationTransformer</span> <span class="token punctuation">(</span><span class="token parameter">mutation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// muta\xE7\xF5es s\xE3o registradas no log no formato de  \`{ type, payload }\`</span>
    <span class="token comment">// mas podemos format\xE1-las como quisermos.</span>
    <span class="token keyword">return</span> mutation<span class="token punctuation">.</span>type
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">actionTransformer</span> <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// O mesmo que mutationTransformer mas para a\xE7\xF5es</span>
    <span class="token keyword">return</span> action<span class="token punctuation">.</span>type
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">logActions</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Log de A\xE7\xF5es</span>
  <span class="token literal-property property">logMutations</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Log de muta\xE7\xF5es</span>
  <span class="token literal-property property">logger</span><span class="token operator">:</span> console<span class="token punctuation">,</span> <span class="token comment">// implementa\xE7\xE3o da API \`console\`, valor padr\xE3o \`console\`</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>O arquivo de <em>log</em> tamb\xE9m pode ser inclu\xEDdo diretamente via <em>tag</em> <code>&lt;script&gt;</code>, e vai expor a fun\xE7\xE3o <code>createVuexLogger</code> globalmente.</p><p>Perceba que o <em>plugin</em> de <em>log</em> captura momentos do estado, ent\xE3o use-o apenas durante o desenvolvimento.</p>`,24),p=[e];function c(u,r,l,i,k,m){return s(),a("div",null,p)}var f=n(o,[["render",c]]);export{g as __pageData,f as default};
