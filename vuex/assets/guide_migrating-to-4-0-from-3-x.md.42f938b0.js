import{_ as e,y as n,x as s,W as a}from"./plugin-vue_export-helper.0b0d78d5.js";const g='{"title":"Migrating to 4.0 from 3.x","description":"","frontmatter":{},"headers":[{"level":2,"title":"Breaking Changes","slug":"breaking-changes"},{"level":3,"title":"Installation process","slug":"installation-process"},{"level":3,"title":"TypeScript support","slug":"typescript-support"},{"level":3,"title":"Bundles are now aligned with Vue 3","slug":"bundles-are-now-aligned-with-vue-3"},{"level":3,"title":"createLogger function is exported from the core module","slug":"createlogger-function-is-exported-from-the-core-module"},{"level":2,"title":"New Features","slug":"new-features"},{"level":3,"title":"New useStore composition function","slug":"new-usestore-composition-function"}],"relativePath":"guide/migrating-to-4-0-from-3-x.md","lastUpdated":1702210160123}',t={},o=a(`<h1 id="migrating-to-4-0-from-3-x" tabindex="-1">Migrating to 4.0 from 3.x <a class="header-anchor" href="#migrating-to-4-0-from-3-x" aria-hidden="true">#</a></h1><p>Almost all Vuex 4 APIs have remained unchanged from Vuex 3. However, there are still a few breaking changes that you must fix.</p><ul><li><a href="#breaking-changes">Breaking Changes</a><ul><li><a href="#installation-process">Installation process</a></li><li><a href="#typescript-support">TypeScript support</a></li><li><a href="#bundles-are-now-aligned-with-vue-3">Bundles are now aligned with Vue 3</a></li><li><a href="#createlogger-function-is-exported-from-the-core-module">&quot;createLogger&quot; function is exported from the core module</a></li></ul></li><li><a href="#new-features">New Features</a><ul><li><a href="#new-usestore-composition-function">New &quot;useStore&quot; composition function</a></li></ul></li></ul><h2 id="breaking-changes" tabindex="-1">Breaking Changes <a class="header-anchor" href="#breaking-changes" aria-hidden="true">#</a></h2><h3 id="installation-process" tabindex="-1">Installation process <a class="header-anchor" href="#installation-process" aria-hidden="true">#</a></h3><p>To align with the new Vue 3 initialization process, the installation process of Vuex has changed. To create a new store, users are now encouraged to use the newly introduced createStore function.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">state</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>To install Vuex to a Vue instance, pass the <code>store</code> instead of Vuex.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Whilst this is not technically a breaking change, you may still use the <code>new Store(...)</code> syntax, we recommend this approach to align with Vue 3 and Vue Router Next.</p></div><h3 id="typescript-support" tabindex="-1">TypeScript support <a class="header-anchor" href="#typescript-support" aria-hidden="true">#</a></h3><p>Vuex 4 removes its global typings for <code>this.$store</code> within a Vue component to solve <a href="https://github.com/vuejs/vuex/issues/994" target="_blank" rel="noopener noreferrer">issue #994</a>. When used with TypeScript, you must declare your own module augmentation.</p><p>Place the following code in your project to allow <code>this.$store</code> to be typed correctly:</p><div class="language-ts"><pre><code><span class="token comment">// vuex-shim.d.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentCustomProperties <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;@vue/runtime-core&#39;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Declare your own store states.</span>
  <span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    count<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">interface</span> <span class="token class-name">ComponentCustomProperties</span> <span class="token punctuation">{</span>
    $store<span class="token operator">:</span> Store<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>You can learn more in the <a href="./typescript-support.html">TypeScript Support</a> section.</p><h3 id="bundles-are-now-aligned-with-vue-3" tabindex="-1">Bundles are now aligned with Vue 3 <a class="header-anchor" href="#bundles-are-now-aligned-with-vue-3" aria-hidden="true">#</a></h3><p>The following bundles are generated to align with Vue 3 bundles:</p><ul><li><code>vuex.global(.prod).js</code><ul><li>For direct use with <code>&lt;script src=&quot;...&quot;&gt;</code> in the browser. Exposes the Vuex global.</li><li>Global build is built as IIFE, and not UMD, and is only meant for direct use with <code>&lt;script src=&quot;...&quot;&gt;</code>.</li><li>Contains hard-coded prod/dev branches and the prod build is pre-minified. Use the <code>.prod.js</code> files for production.</li></ul></li><li><code>vuex.esm-browser(.prod).js</code><ul><li>For use with native ES module imports (including module supporting browsers via <code>&lt;script type=&quot;module&quot;&gt;</code>.</li></ul></li><li><code>vuex.esm-bundler.js</code><ul><li>For use with bundlers such as <code>webpack</code>, <code>rollup</code> and <code>parcel</code>.</li><li>Leaves prod/dev branches with <code>process.<wbr>env.NODE_ENV</code> guards (must be replaced by bundler).</li><li>Does not ship minified builds (to be done together with the rest of the code after bundling).</li></ul></li><li><code>vuex.cjs.js</code><ul><li>For use in Node.js server-side rendering with <code>require()</code>.</li></ul></li></ul><h3 id="createlogger-function-is-exported-from-the-core-module" tabindex="-1"><code>createLogger</code> function is exported from the core module <a class="header-anchor" href="#createlogger-function-is-exported-from-the-core-module" aria-hidden="true">#</a></h3><p>In Vuex 3, <code>createLogger</code> function was exported from <code>vuex/dist/logger</code> but it&#39;s now included in the core package. The function should be imported directly from the <code>vuex</code> package.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createLogger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
</code></pre></div><h2 id="new-features" tabindex="-1">New Features <a class="header-anchor" href="#new-features" aria-hidden="true">#</a></h2><h3 id="new-usestore-composition-function" tabindex="-1">New <code>useStore</code> composition function <a class="header-anchor" href="#new-usestore-composition-function" aria-hidden="true">#</a></h3><p>Vuex 4 introduces a new API to interact with the store in Composition API. You can use the <code>useStore</code> composition function to retrieve the store within the component <code>setup</code> hook.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>You can learn more in the <a href="./composition-api.html">Composition API</a> section.</p>`,26),p=[o];function r(c,i,l,u,d,k){return s(),n("div",null,p)}var m=e(t,[["render",r]]);export{g as __pageData,m as default};
