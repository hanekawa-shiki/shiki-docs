import{_ as a,y as s,x as e,W as o}from"./plugin-vue_export-helper.0b0d78d5.js";const v='{"title":"Estado","description":"","frontmatter":{},"headers":[{"level":2,"title":"\xC1rvore \xDAnica de Estado","slug":"arvore-unica-de-estado"},{"level":2,"title":"Obtendo o Estado Vuex nos Componentes Vue","slug":"obtendo-o-estado-vuex-nos-componentes-vue"},{"level":2,"title":"O M\xE9todo Auxiliar mapState","slug":"o-metodo-auxiliar-mapstate"},{"level":2,"title":"Objeto Spread Operator","slug":"objeto-spread-operator"},{"level":2,"title":"Componentes Ainda Podem Ter Um Estado Local","slug":"componentes-ainda-podem-ter-um-estado-local"}],"relativePath":"ptbr/guide/state.md","lastUpdated":1702210160133}',n={},t=o(`<h1 id="estado" tabindex="-1">Estado <a class="header-anchor" href="#estado" aria-hidden="true">#</a></h1><h2 id="arvore-unica-de-estado" tabindex="-1">\xC1rvore \xDAnica de Estado <a class="header-anchor" href="#arvore-unica-de-estado" aria-hidden="true">#</a></h2><div class="scrimba"><a href="https://scrimba.com/p/pnyzgAP/cWw3Zhb" target="_blank" rel="noopener noreferrer">Tente esta li\xE7\xE3o no Scrimba</a></div><p>Vuex usa uma <strong>\xFAnica \xE1rvore de estado</strong> - ou seja, este \xFAnico objeto cont\xE9m todo o estado da sua aplica\xE7\xE3o e serve como &quot;fonte \xFAnica da verdade&quot;. Isso tamb\xE9m significa que normalmente voc\xEA ter\xE1 apenas uma <em>store</em> para cada aplica\xE7\xE3o. Uma \xFAnica \xE1rvore de estado facilita a localiza\xE7\xE3o de uma parte espec\xEDfica do estado e nos permite capiturar facilmente momentos do estado atual da aplica\xE7\xE3o para fins de depura\xE7\xE3o.</p><p>A \xE1rvore \xFAnica de estado n\xE3o entra em conflito com a modularidade - em cap\xEDtulos posteriores, discutiremos como dividir seu estado e muta\xE7\xF5es em sub-m\xF3dulos.</p><p>Os dados que voc\xEA armazena no Vuex seguem as mesmas regras que o <code>data</code> em uma inst\xE2ncia do Vue, ou seja, o objeto de estado deve ser simples. <strong>Veja tamb\xE9m:</strong> <a href="https://v3.vuejs.org/api/options-data.html#data-2" target="_blank" rel="noopener noreferrer">Vue#data</a>.</p><h2 id="obtendo-o-estado-vuex-nos-componentes-vue" tabindex="-1">Obtendo o Estado Vuex nos Componentes Vue <a class="header-anchor" href="#obtendo-o-estado-vuex-nos-componentes-vue" aria-hidden="true">#</a></h2><p>Ent\xE3o, como exibimos o estado dentro do <em>store</em> em nossos componentes Vue? Como os <em>stores</em> Vuex s\xE3o reativos, a maneira mais simples de &quot;recuperar&quot; o estado dele \xE9 simplesmente retornar algum estado do <em>store</em> de dentro de um <a href="https://vuejs.org/guide/computed.html" target="_blank" rel="noopener noreferrer">dado computado</a>:</p><div class="language-js"><pre><code><span class="token comment">// vamos criar um componente de Contador</span>
<span class="token keyword">const</span> Counter <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;{{ count }}&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">count</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Sempre que o <code>store.state.count</code> mudar, far\xE1 com que o dado computado seja reavaliado e ative as atualiza\xE7\xF5es de DOM associadas.</p><p>No entanto, esse padr\xE3o faz com que o componente dependa do <em>singleton</em> do <em>store</em> global. Ao usar um sistema de m\xF3dulo, ele precisa importar o <em>store</em> em todos os componentes que usam o estado do <em>store</em> e tamb\xE9m requer dados fict\xEDcios (ou <em>mocking</em>) ao testar o componente.</p><p>O Vuex &quot;injeta&quot; o <em>store</em> em todos os componentes filhos do componente raiz atrav\xE9s do sistema de <em>plugins</em> do Vue e estar\xE1 dispon\xEDvel neles como <code>this.$store</code>. Vamos atualizar nossa implementa\xE7\xE3o do <code>Counter</code>:</p><div class="language-js"><pre><code><span class="token keyword">const</span> Counter <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;{{ count }}&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">count</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="o-metodo-auxiliar-mapstate" tabindex="-1">O M\xE9todo Auxiliar <code>mapState</code> <a class="header-anchor" href="#o-metodo-auxiliar-mapstate" aria-hidden="true">#</a></h2><div class="scrimba"><a href="https://scrimba.com/p/pnyzgAP/c8Pz7BSK" target="_blank" rel="noopener noreferrer">Tente esta li\xE7\xE3o no Scrimba</a></div><p>Quando um componente precisa usar v\xE1rias propriedades ou <em>getters</em> de estado do <em>store</em>, declarar todas esses dados computados pode ser repetitivo e verboso. Para lidar com isso, podemos fazer uso do m\xE9todo auxiliar <code>mapState</code> que gera fun\xE7\xF5es <em>getter</em> computadas para n\xF3s, economizando algumas linhas de c\xF3digo:</p><div class="language-js"><pre><code><span class="token comment">// em builds completos, os m\xE9todos auxiliares s\xE3o expostos como Vuex.mapState</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// As arrow functions (ou fun\xE7\xF5es de seta) podem tornar o c\xF3digo muito sucinto!</span>
    <span class="token function-variable function">count</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>

    <span class="token comment">// passar o valor da String &#39;count&#39; \xE9 o mesmo que \`state =&gt; state.count\`</span>
    <span class="token literal-property property">countAlias</span><span class="token operator">:</span> <span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span>

    <span class="token comment">// para acessar o estado local com \`this\`, uma fun\xE7\xE3o normal deve ser usada</span>
    <span class="token function">countPlusLocalState</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localCount
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Tamb\xE9m podemos passar um <em>Array</em> de <em>Strings</em> para <code>mapState</code> quando o nome de um dado computado mapeado \xE9 o mesmo que um nome de \xE1rvore secund\xE1ria do estado.</p><div class="language-js"><pre><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token comment">// mapeia this.count para store.state.count</span>
  <span class="token string">&#39;count&#39;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="objeto-spread-operator" tabindex="-1">Objeto Spread Operator <a class="header-anchor" href="#objeto-spread-operator" aria-hidden="true">#</a></h2><p>Observe que <code>mapState</code> retorna um objeto. Como us\xE1-lo em combina\xE7\xE3o com outros dados computados locais? Normalmente, ter\xEDamos que usar um utilit\xE1rio para fundir v\xE1rios objetos em um para que possamos passar o objeto final para <code>computed</code>. No entanto, com o <a href="https://github.com/tc39/proposal-object-rest-spread" target="_blank" rel="noopener noreferrer">objeto spread operator</a>, podemos simplificar muito a sintaxe:</p><div class="language-js"><pre><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">localComputed</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// mistura isso no objeto externo com o objeto spread operator</span>
  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="componentes-ainda-podem-ter-um-estado-local" tabindex="-1">Componentes Ainda Podem Ter Um Estado Local <a class="header-anchor" href="#componentes-ainda-podem-ter-um-estado-local" aria-hidden="true">#</a></h2><p>Usar Vuex n\xE3o significa que voc\xEA deve colocar <strong>todo</strong> o estado no Vuex. Embora colocar mais estado no Vuex torna suas muta\xE7\xF5es de estado mais expl\xEDcitas e depur\xE1veis, \xE0s vezes tamb\xE9m pode tornar o c\xF3digo mais verboso e indireto. Se uma parte do estado pertencer estritamente a um \xFAnico componente, n\xE3o haver\xE1 problema em deix\xE1-lo apenas como um estado local. Voc\xEA deve pesar os pr\xF3s e contras e tomar decis\xF5es que atendam \xE0s necessidades de desenvolvimento da sua aplica\xE7\xE3o.</p>`,24),p=[t];function r(c,u,d,i,l,m){return e(),s("div",null,p)}var g=a(n,[["render",r]]);export{v as __pageData,g as default};
