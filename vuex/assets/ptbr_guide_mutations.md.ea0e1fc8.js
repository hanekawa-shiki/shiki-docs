import{_ as a,y as n,x as s,W as o}from"./plugin-vue_export-helper.0b0d78d5.js";const h='{"title":"Muta\xE7\xF5es","description":"","frontmatter":{},"headers":[{"level":2,"title":"Confirma\xE7\xE3o (ou Commit) com Payload","slug":"confirmacao-ou-commit-com-payload"},{"level":2,"title":"Confirma\xE7\xE3o (ou Commit) Estilo-Objeto","slug":"confirmacao-ou-commit-estilo-objeto"},{"level":2,"title":"Usando Constantes para Declarar os Tipos de Muta\xE7\xE3o","slug":"usando-constantes-para-declarar-os-tipos-de-mutacao"},{"level":2,"title":"Muta\xE7\xF5es Devem Ser S\xEDncronas","slug":"mutacoes-devem-ser-sincronas"},{"level":2,"title":"Confirmando (ou fazendo Commits de) Muta\xE7\xF5es em Componentes","slug":"confirmando-ou-fazendo-commits-de-mutacoes-em-componentes"},{"level":2,"title":"Vamos as A\xE7\xF5es","slug":"vamos-as-acoes"}],"relativePath":"ptbr/guide/mutations.md","lastUpdated":1702210160133}',e={},t=o(`<h1 id="mutacoes" tabindex="-1">Muta\xE7\xF5es <a class="header-anchor" href="#mutacoes" aria-hidden="true">#</a></h1><div class="scrimba"><a href="https://scrimba.com/p/pnyzgAP/ckMZp4HN" target="_blank" rel="noopener noreferrer">Tente esta li\xE7\xE3o no Scrimba</a></div><p>A \xFAnica maneira de realmente mudar de estado em um <em>store</em> Vuex \xE9 por confirmar (ou fazer <em>commit</em> de) uma muta\xE7\xE3o. As muta\xE7\xF5es do Vuex s\xE3o muito semelhantes aos eventos: cada muta\xE7\xE3o tem uma <em>String</em> <strong><em>type</em></strong> e um <strong><em>handler</em></strong>. Na fun\xE7\xE3o manipuladora (ou <em>handler</em>) \xE9 onde realizamos modifica\xE7\xF5es de estado reais e ele receber\xE1 o estado como o 1\xBA argumento:</p><div class="language-js"><pre><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// muda o estado</span>
      state<span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Voc\xEA n\xE3o pode chamar diretamente uma fun\xE7\xE3o manipuladora de muta\xE7\xE3o. Pense nisso mais como registro de evento: &quot;Quando uma muta\xE7\xE3o com o <em>type</em> <code>increment</code> \xE9 acionada, chame este <em>handler</em>.&quot; Para invocar uma fun\xE7\xE3o manipuladora de muta\xE7\xE3o (<em>handler</em>), voc\xEA precisa chamar <code>store.commit</code> com seu tipo (<em>type</em>):</p><div class="language-js"><pre><code>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="confirmacao-ou-commit-com-payload" tabindex="-1">Confirma\xE7\xE3o (ou Commit) com Payload <a class="header-anchor" href="#confirmacao-ou-commit-com-payload" aria-hidden="true">#</a></h2><p>Voc\xEA pode passar um argumento adicional para o <code>store.commit</code>, que \xE9 chamado de <strong><em>payload</em></strong> para a muta\xE7\xE3o:</p><div class="language-js"><pre><code><span class="token comment">// ...</span>
<span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>count <span class="token operator">+=</span> n
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
</code></pre></div><p>Na maioria dos casos, o <em>payload</em> deve ser um objeto para que possa conter v\xE1rios campos, e a muta\xE7\xE3o gravada tamb\xE9m ser\xE1 mais descritiva:</p><div class="language-js"><pre><code><span class="token comment">// ...</span>
<span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>count <span class="token operator">+=</span> payload<span class="token punctuation">.</span>amount
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="confirmacao-ou-commit-estilo-objeto" tabindex="-1">Confirma\xE7\xE3o (ou Commit) Estilo-Objeto <a class="header-anchor" href="#confirmacao-ou-commit-estilo-objeto" aria-hidden="true">#</a></h2><p>Uma maneira alternativa de confirmar (ou fazer um <em>commit</em> de) uma muta\xE7\xE3o \xE9 usando diretamente um objeto que tenha uma propriedade <code>type</code>:</p><div class="language-js"><pre><code>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;increment&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Ao usar a Confirma\xE7\xE3o Estilo-Objeto, o objeto inteiro ser\xE1 passado como o <em>payload</em> para os manipuladores de muta\xE7\xE3o, portanto, a fun\xE7\xE3o manipuladora permanecer\xE1 a mesma:</p><div class="language-js"><pre><code><span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>count <span class="token operator">+=</span> payload<span class="token punctuation">.</span>amount
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="usando-constantes-para-declarar-os-tipos-de-mutacao" tabindex="-1">Usando Constantes para Declarar os Tipos de Muta\xE7\xE3o <a class="header-anchor" href="#usando-constantes-para-declarar-os-tipos-de-mutacao" aria-hidden="true">#</a></h2><p>\xC9 um padr\xE3o comumente visto usar constantes para declarar tipos de muta\xE7\xE3o em v\xE1rias implementa\xE7\xF5es do Flux. Isso permite que o c\xF3digo aproveite as ferramentas como os <em>linters</em>, e colocar todas as constantes em um \xFAnico arquivo permite que seus colaboradores tenham uma vis\xE3o geral das muta\xE7\xF5es poss\xEDveis em toda a aplica\xE7\xE3o:</p><div class="language-js"><pre><code><span class="token comment">// mutation-types.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SOME_MUTATION</span> <span class="token operator">=</span> <span class="token string">&#39;SOME_MUTATION&#39;</span>
</code></pre></div><div class="language-js"><pre><code><span class="token comment">// store.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">SOME_MUTATION</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./mutation-types&#39;</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// podemos usar o recurso de nome do dado computado do ES2015</span>
    <span class="token comment">// para usar uma constante como o nome da fun\xE7\xE3o</span>
    <span class="token punctuation">[</span><span class="token constant">SOME_MUTATION</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// muda o estado</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Se usar constantes \xE9 em grande parte uma prefer\xEAncia - pode ser \xFAtil em grandes projetos com muitos desenvolvedores, mas \xE9 totalmente opcional se voc\xEA n\xE3o gostar deles.</p><h2 id="mutacoes-devem-ser-sincronas" tabindex="-1">Muta\xE7\xF5es Devem Ser S\xEDncronas <a class="header-anchor" href="#mutacoes-devem-ser-sincronas" aria-hidden="true">#</a></h2><p>Uma regra importante a lembrar \xE9 que <strong>as fun\xE7\xF5es manipuladoras de muta\xE7\xE3o devem ser s\xEDncronas</strong>. Por qu\xEA? Considere o seguinte exemplo:</p><div class="language-js"><pre><code><span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">someMutation</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    api<span class="token punctuation">.</span><span class="token function">callAsyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Agora imagine que estamos depurando a aplica\xE7\xE3o e observando os logs de muta\xE7\xE3o do <em>devtool</em>. Para cada muta\xE7\xE3o registrada, o <em>devtool</em> precisar\xE1 capturar os momentos &quot;antes&quot; e &quot;depois&quot; do estado. No entanto, o <em>callback</em> ass\xEDncrono dentro da muta\xE7\xE3o de exemplo acima torna isso imposs\xEDvel: o <em>callback</em> ainda n\xE3o \xE9 chamado quando a muta\xE7\xE3o \xE9 confirmada (ou o <em>commit</em> da muta\xE7\xE3o \xE9 feito) e n\xE3o h\xE1 como o <em>devtool</em> saber quando o <em>callback</em> ser\xE1 realmente chamado - qualquer muta\xE7\xE3o de estado executada no <em>callback</em> \xE9 essencialmente imposs\xEDvel de rastrear!</p><h2 id="confirmando-ou-fazendo-commits-de-mutacoes-em-componentes" tabindex="-1">Confirmando (ou fazendo Commits de) Muta\xE7\xF5es em Componentes <a class="header-anchor" href="#confirmando-ou-fazendo-commits-de-mutacoes-em-componentes" aria-hidden="true">#</a></h2><p>Voc\xEA pode confirmar (ou fazer <em>commit</em> de) muta\xE7\xF5es em componentes com <code>this.$store.commit(&#39;xxx&#39;)</code>, ou use o m\xE9todo auxiliar <code>mapMutations</code> que mapeia m\xE9todos de componentes para chamadas <code>store.commit</code> (requer inje\xE7\xE3o do <em>store</em> raiz):</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mapMutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token string">&#39;increment&#39;</span><span class="token punctuation">,</span> <span class="token comment">// mapeia \`this.increment()\` para \`this.$store.commit(&#39;increment&#39;)\`</span>

      <span class="token comment">// \`mapMutations\` also supports payloads:</span>
      <span class="token string">&#39;incrementBy&#39;</span> <span class="token comment">// mapeia \`this.incrementBy(amount)\` para\`this.$store.commit(&#39;incrementBy&#39;, amount)\`</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">add</span><span class="token operator">:</span> <span class="token string">&#39;increment&#39;</span> <span class="token comment">// mapeia \`this.add()\` para\`this.$store.commit(&#39;increment&#39;)\`</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="vamos-as-acoes" tabindex="-1">Vamos as A\xE7\xF5es <a class="header-anchor" href="#vamos-as-acoes" aria-hidden="true">#</a></h2><p>A assincronicidade combinada com muta\xE7\xE3o de estado pode tornar seu programa muito dif\xEDcil de entender. Por exemplo, quando voc\xEA chama dois m\xE9todos com retornos de <em>callbacks</em> ass\xEDncronos que alteram o estado, como saber quando eles s\xE3o chamados e qual retorno de <em>callback</em> foi chamado primeiro? \xC9 exatamente por isso que queremos separar os dois conceitos. No Vuex, <strong>muta\xE7\xF5es s\xE3o transa\xE7\xF5es s\xEDncronas</strong>:</p><div class="language-js"><pre><code>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// qualquer mudan\xE7a de estado que a muta\xE7\xE3o &quot;increment&quot; pode causar</span>
<span class="token comment">// deve ser feito neste momento.</span>
</code></pre></div><p>Para lidar com opera\xE7\xF5es ass\xEDncronas, vamos apresentar <a href="./actions.html">A\xE7\xF5es</a>.</p>`,34),p=[t];function c(r,u,i,m,l,d){return s(),n("div",null,p)}var f=a(e,[["render",c]]);export{h as __pageData,f as default};
