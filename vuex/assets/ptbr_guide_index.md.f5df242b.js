import{_ as a,y as s,x as n,W as e}from"./plugin-vue_export-helper.0b0d78d5.js";const f='{"title":"Come\xE7ando","description":"","frontmatter":{},"headers":[{"level":2,"title":"Um Store Bem Simples","slug":"um-store-bem-simples"}],"relativePath":"ptbr/guide/index.md","lastUpdated":1702210160132}',o={},t=e(`<h1 id="comecando" tabindex="-1">Come\xE7ando <a class="header-anchor" href="#comecando" aria-hidden="true">#</a></h1><div class="scrimba"><a href="https://scrimba.com/p/pnyzgAP/cMPa2Uk" target="_blank" rel="noopener noreferrer">Tente esta li\xE7\xE3o no Scrimba</a></div><p>No centro de cada aplica\xE7\xE3o Vuex existe o <strong><em>store</em></strong>. Um &quot;<em>store</em>&quot; \xE9 basicamente um cont\xEAiner que mant\xE9m o <strong>estado</strong> da sua aplica\xE7\xE3o. H\xE1 duas coisas que tornam um <em>store</em> Vuex diferente de um objeto global simples:</p><ol><li><p>Os <em>stores</em> Vuex s\xE3o reativos. Quando os componentes do Vue obt\xEAm o estado dele, eles atualizar\xE3o de forma reativa e eficiente se o estado do <em>store</em> mudar.</p></li><li><p>Voc\xEA n\xE3o pode alterar diretamente os estados do <em>store</em>. A \xFAnica maneira de mudar o estado de um <em>store</em> \xE9 explicitamente <strong>confirmando (ou fazendo <em>commit</em> de) muta\xE7\xF5es</strong>. Isso garante que cada mudan\xE7a de estado deixe um registro rastre\xE1vel, e permite ferramentas que nos ajudem a entender melhor nossas aplica\xE7\xF5es.</p></li></ol><h2 id="um-store-bem-simples" tabindex="-1">Um Store Bem Simples <a class="header-anchor" href="#um-store-bem-simples" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Vamos usar a sintaxe ES2015 para exemplos de c\xF3digo para o resto da documenta\xE7\xE3o. Se voc\xEA ainda n\xE3o aprendeu como us\xE1-la, <a href="https://babeljs.io/docs/learn-es2015/" target="_blank" rel="noopener noreferrer">veja aqui</a>!</p></div><p>Ap\xF3s <a href="./../installation.html">instalar</a> o Vuex, vamos criar um <em>store</em>. \xC9 bem simples - basta fornecer um objeto de estado inicial, e algumas muta\xE7\xF5es:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>

<span class="token comment">// Cria uma nova inst\xE2ncia do store.</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">state</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* seu componente raiz */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Instale a inst\xE2ncia do store como um plugin</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>
</code></pre></div><p>Agora, voc\xEA pode acessar o objeto de estado como <code>store.state</code> e acionar uma mudan\xE7a de estado com o m\xE9todo <code>store.commit</code>:</p><div class="language-js"><pre><code>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// -&gt; 1</span>
</code></pre></div><p>Em um componente Vue, voc\xEA pode acessar o <em>store</em> como <code>this.$store</code>. Agora podemos confirmar (ou fazer <em>commit</em> de) uma muta\xE7\xE3o usando um m\xE9todo de componente:</p><div class="language-js"><pre><code><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Novamente, a raz\xE3o pela qual estamos confirmando (ou fazendo <em>commit</em> de) uma muta\xE7\xE3o em vez de mudar <code>store.state.count</code> diretamente, \xE9 porque queremos rastre\xE1-la explicitamente. Esta conven\xE7\xE3o simples torna sua inten\xE7\xE3o mais expl\xEDcita, para que voc\xEA possa raciocinar melhor sobre as mudan\xE7as de estado em sua aplica\xE7\xE3o ao ler o c\xF3digo. Al\xE9m disso, isso nos d\xE1 a oportunidade de implementar ferramentas que podem registrar cada muta\xE7\xE3o, capturar momentos do estado ou mesmo realizar depura\xE7\xE3o viajando pelo hist\xF3rico de estado (<em>time travel</em>).</p><p>Usar o estado do <em>store</em> em um componente simplesmente envolve o retorno do estado dentro de um dado computado, porque o estado do <em>store</em> \xE9 reativo. Acionar altera\xE7\xF5es simplesmente significa confirmar (ou fazer <em>commit</em> de) muta\xE7\xF5es nos m\xE9todos dos componentes.</p><p>A seguir, discutiremos cada conceito b\xE1sico em detalhes muito mais sutis, come\xE7ando com <a href="./state.html">Estado</a>.</p>`,15),p=[t];function c(r,i,u,m,l,d){return n(),s("div",null,p)}var g=a(o,[["render",c]]);export{f as __pageData,g as default};
