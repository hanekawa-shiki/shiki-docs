import{_ as a,y as n,x as s,W as t}from"./plugin-vue_export-helper.0b0d78d5.js";const g='{"title":"Manipula\xE7\xE3o de Formul\xE1rios","description":"","frontmatter":{},"headers":[{"level":2,"title":"Dados Computados Bidirecionais (Two-way)","slug":"dados-computados-bidirecionais-two-way"}],"relativePath":"ptbr/guide/forms.md","lastUpdated":1702210160131}',o={},p=t(`<h1 id="manipulacao-de-formularios" tabindex="-1">Manipula\xE7\xE3o de Formul\xE1rios <a class="header-anchor" href="#manipulacao-de-formularios" aria-hidden="true">#</a></h1><div class="scrimba"><a href="https://scrimba.com/p/pnyzgAP/cqKRgEC9" target="_blank" rel="noopener noreferrer">Tente esta li\xE7\xE3o no Scrimba</a></div><p>Ao usar o Vuex no modo estrito, pode ser um pouco complicado usar <code>v-model</code> em um peda\xE7o do estado que pertence ao Vuex:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>obj.message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Assumindo que <code>obj</code> \xE9 um dado computado que retorna um Objeto do <em>store</em>, o <code>v-model</code> aqui tentar\xE1 alterar diretamente o <code>obj.message</code> quando o usu\xE1rio digitar alguma coisa. No modo estrito, isso resultar\xE1 em um erro porque a muta\xE7\xE3o n\xE3o \xE9 executada dentro de uma fun\xE7\xE3o expl\xEDcita manipuladora de muta\xE7\xE3o do Vuex.</p><p>O &quot;modo Vuex&quot; de lidar com isso \xE9 vinculando o valor do(s) <code>&lt;input&gt;</code>&#39;s e chamar uma a\xE7\xE3o no evento <em>input</em> ou <em>change</em>:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>updateMessage<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-js"><pre><code><span class="token comment">// ...</span>
<span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">message</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>message
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">updateMessage</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;updateMessage&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>E aqui est\xE1 a fun\xE7\xE3o manipuladora de muta\xE7\xE3o:</p><div class="language-js"><pre><code><span class="token comment">// ...</span>
<span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">updateMessage</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>message <span class="token operator">=</span> message
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="dados-computados-bidirecionais-two-way" tabindex="-1">Dados Computados Bidirecionais (Two-way) <a class="header-anchor" href="#dados-computados-bidirecionais-two-way" aria-hidden="true">#</a></h2><p>\xC9 certo que o c\xF3digo acima \xE9 um pouco mais verboso do que o <code>v-model</code> + estado local, e tamb\xE9m perdemos alguns dos recursos \xFAteis do <code>v-model</code>. Uma abordagem alternativa \xE9 usar um dado computado bidirecional com um <em>setter</em>:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-js"><pre><code><span class="token comment">// ...</span>
<span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>message
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;updateMessage&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,14),e=[p];function c(u,l,i,r,d,k){return s(),n("div",null,e)}var v=a(o,[["render",c]]);export{g as __pageData,v as default};
