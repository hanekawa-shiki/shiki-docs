import{_ as s,y as n,x as a,W as e}from"./plugin-vue_export-helper.0b0d78d5.js";const g='{"title":"Getters","description":"","frontmatter":{},"headers":[{"level":2,"title":"Acesso Estilo-Propriedade","slug":"acesso-estilo-propriedade"},{"level":2,"title":"Acesso Estilo-M\xE9todo","slug":"acesso-estilo-metodo"},{"level":2,"title":"O Auxiliar mapGetters","slug":"o-auxiliar-mapgetters"}],"relativePath":"ptbr/guide/getters.md","lastUpdated":1702210160131}',t={},o=e(`<h1 id="getters" tabindex="-1">Getters <a class="header-anchor" href="#getters" aria-hidden="true">#</a></h1><div class="scrimba"><a href="https://scrimba.com/p/pnyzgAP/c2Be7TB" target="_blank" rel="noopener noreferrer">Tente esta li\xE7\xE3o no Scrimba</a></div><p>\xC0s vezes, talvez precisemos calcular o estado derivado com base no estado do <em>store</em>, por exemplo, filtrar atrav\xE9s de uma lista de itens e cont\xE1-los:</p><div class="language-js"><pre><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">doneTodosCount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=&gt;</span> todo<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">.</span>length
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Se mais do que um componente precisa fazer uso disso, temos que duplicar a fun\xE7\xE3o, ou extra\xED-lo em um auxiliar compartilhado e import\xE1-lo em v\xE1rios lugares - ambos s\xE3o menos do que o ideal.</p><p>O Vuex nos permite definir <em>getters</em> no <em>store</em>. Voc\xEA pode pensar neles como dados computados para os <em>stores</em>. Como os dados computados, o resultado de um <em>getter</em> \xE9 armazenado em <em>cache</em> com base em suas depend\xEAncias e s\xF3 ser\xE1 reavaliado quando algumas de suas depend\xEAncias forem alteradas.</p><p>Os <em>getters</em> receber\xE3o o estado como 1\xBA argumento:</p><div class="language-js"><pre><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">doneTodos</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=&gt;</span> todo<span class="token punctuation">.</span>done<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="acesso-estilo-propriedade" tabindex="-1">Acesso Estilo-Propriedade <a class="header-anchor" href="#acesso-estilo-propriedade" aria-hidden="true">#</a></h2><p>Os <em>getters</em> ser\xE3o expostos no objeto <code>store.getters</code> e voc\xEA acessa valores como propriedades:</p><div class="language-js"><pre><code>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>doneTodos <span class="token comment">// -&gt; [{ id: 1, text: &#39;...&#39;, done: true }]</span>
</code></pre></div><p>Os <em>getters</em> tamb\xE9m recebem outros <em>getters</em> como o 2\xBA argumento:</p><div class="language-js"><pre><code><span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token function">doneTodosCount</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> getters</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> getters<span class="token punctuation">.</span>doneTodos<span class="token punctuation">.</span>length
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>doneTodosCount <span class="token comment">// -&gt; 1</span>
</code></pre></div><p>Agora podemos usar facilmente isso dentro de qualquer componente:</p><div class="language-js"><pre><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">doneTodosCount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>doneTodosCount
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Observe que os <em>getters</em> acessados \u200B\u200Bcomo propriedades s\xE3o armazenados em <em>cache</em> como parte do sistema de reatividade do Vue.</p><h2 id="acesso-estilo-metodo" tabindex="-1">Acesso Estilo-M\xE9todo <a class="header-anchor" href="#acesso-estilo-metodo" aria-hidden="true">#</a></h2><p>Voc\xEA tamb\xE9m pode passar argumentos para os <em>getters</em> retornando uma fun\xE7\xE3o. Isso \xE9 particularmente \xFAtil quando voc\xEA deseja consultar um <em>Array</em> no <em>store</em>:</p><div class="language-js"><pre><code><span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token function-variable function">getTodoById</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=&gt;</span> todo<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span><span class="token function">getTodoById</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// -&gt; { id: 2, text: &#39;...&#39;, done: false }</span>
</code></pre></div><p>Observe que os <em>getters</em> acessados \u200B\u200Bvia m\xE9todos ser\xE3o executados toda vez que voc\xEA os chamar, e o resultado n\xE3o ser\xE1 armazenado em <em>cache</em>.</p><h2 id="o-auxiliar-mapgetters" tabindex="-1">O Auxiliar <code>mapGetters</code> <a class="header-anchor" href="#o-auxiliar-mapgetters" aria-hidden="true">#</a></h2><p>O auxiliar <em>mapGetters</em> simplesmente mapeia os <em>getters</em> do <em>store</em> para os dados computados locais:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// mistura os getters nos dados computatos com o operador spread</span>
    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token string">&#39;doneTodosCount&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;anotherGetter&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Se voc\xEA deseja mapear um <em>getter</em> com um nome diferente, use um objeto:</p><div class="language-js"><pre><code><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// mapeia \`this.doneCount\` para \`this.$store.getters.doneTodosCount\`</span>
  <span class="token literal-property property">doneCount</span><span class="token operator">:</span> <span class="token string">&#39;doneTodosCount&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>`,27),p=[o];function c(r,l,u,i,d,k){return a(),n("div",null,p)}var y=s(t,[["render",c]]);export{g as __pageData,y as default};
