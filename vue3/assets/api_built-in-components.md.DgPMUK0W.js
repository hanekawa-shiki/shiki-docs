import{_ as s,c as n,o as a,b as l}from"./chunks/framework.B9NywAPp.js";const e=JSON.parse('{"title":"Built-in Components","description":"","frontmatter":{"pageClass":"api"},"headers":[{"level":2,"title":"<Transition>","slug":"transition","link":"#transition","children":[]},{"level":2,"title":"<TransitionGroup>","slug":"transitiongroup","link":"#transitiongroup","children":[]},{"level":2,"title":"<KeepAlive>","slug":"keepalive","link":"#keepalive","children":[]},{"level":2,"title":"<Teleport>","slug":"teleport","link":"#teleport","children":[]},{"level":2,"title":"<Suspense>","slug":"suspense","link":"#suspense","children":[]}],"relativePath":"api/built-in-components.md","filePath":"api/built-in-components.md"}'),o={name:"api/built-in-components.md"},p=[l('<h1 id="built-in-components" tabindex="-1">Built-in Components <a class="header-anchor" href="#built-in-components" aria-label="Permalink to &quot;Built-in Components {#built-in-components}&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">Registration and Usage</p><p>Built-in components can be used directly in templates without needing to be registered. They are also tree-shakeable: they are only included in the build when they are used.</p><p>When using them in <a href="/guide/extras/render-function.html">render functions</a>, they need to be imported explicitly. For example:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h, Transition } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(Transition, {</span></span>\n<span class="line"><span style="color:#6A737D;">  /* props */</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div></div><h2 id="transition" tabindex="-1"><code>&lt;Transition&gt;</code> <a class="header-anchor" href="#transition" aria-label="Permalink to &quot;`&lt;Transition&gt;` {#transition}&quot;">​</a></h2><p>Provides animated transition effects to a <strong>single</strong> element or component.</p><ul><li><p><strong>Props</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> TransitionProps</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">  /**</span></span>\n<span class="line"><span style="color:#6A737D;">   * Used to automatically generate transition CSS class names.</span></span>\n<span class="line"><span style="color:#6A737D;">   * e.g. `name: &#39;fade&#39;` will auto expand to `.fade-enter`,</span></span>\n<span class="line"><span style="color:#6A737D;">   * `.fade-enter-active`, etc.</span></span>\n<span class="line"><span style="color:#6A737D;">   */</span></span>\n<span class="line"><span style="color:#FFAB70;">  name</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#6A737D;">  /**</span></span>\n<span class="line"><span style="color:#6A737D;">   * Whether to apply CSS transition classes.</span></span>\n<span class="line"><span style="color:#6A737D;">   * Default: true</span></span>\n<span class="line"><span style="color:#6A737D;">   */</span></span>\n<span class="line"><span style="color:#FFAB70;">  css</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span></span>\n<span class="line"><span style="color:#6A737D;">  /**</span></span>\n<span class="line"><span style="color:#6A737D;">   * Specifies the type of transition events to wait for to</span></span>\n<span class="line"><span style="color:#6A737D;">   * determine transition end timing.</span></span>\n<span class="line"><span style="color:#6A737D;">   * Default behavior is auto detecting the type that has</span></span>\n<span class="line"><span style="color:#6A737D;">   * longer duration.</span></span>\n<span class="line"><span style="color:#6A737D;">   */</span></span>\n<span class="line"><span style="color:#FFAB70;">  type</span><span style="color:#F97583;">?:</span><span style="color:#9ECBFF;"> &#39;transition&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;animation&#39;</span></span>\n<span class="line"><span style="color:#6A737D;">  /**</span></span>\n<span class="line"><span style="color:#6A737D;">   * Specifies explicit durations of the transition.</span></span>\n<span class="line"><span style="color:#6A737D;">   * Default behavior is wait for the first `transitionend`</span></span>\n<span class="line"><span style="color:#6A737D;">   * or `animationend` event on the root transition element.</span></span>\n<span class="line"><span style="color:#6A737D;">   */</span></span>\n<span class="line"><span style="color:#FFAB70;">  duration</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> number</span><span style="color:#F97583;"> |</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">enter</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">; </span><span style="color:#FFAB70;">leave</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;"> }</span></span>\n<span class="line"><span style="color:#6A737D;">  /**</span></span>\n<span class="line"><span style="color:#6A737D;">   * Controls the timing sequence of leaving/entering transitions.</span></span>\n<span class="line"><span style="color:#6A737D;">   * Default behavior is simultaneous.</span></span>\n<span class="line"><span style="color:#6A737D;">   */</span></span>\n<span class="line"><span style="color:#FFAB70;">  mode</span><span style="color:#F97583;">?:</span><span style="color:#9ECBFF;"> &#39;in-out&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;out-in&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;default&#39;</span></span>\n<span class="line"><span style="color:#6A737D;">  /**</span></span>\n<span class="line"><span style="color:#6A737D;">   * Whether to apply transition on initial render.</span></span>\n<span class="line"><span style="color:#6A737D;">   * Default: false</span></span>\n<span class="line"><span style="color:#6A737D;">   */</span></span>\n<span class="line"><span style="color:#FFAB70;">  appear</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  /**</span></span>\n<span class="line"><span style="color:#6A737D;">   * Props for customizing transition classes.</span></span>\n<span class="line"><span style="color:#6A737D;">   * Use kebab-case in templates, e.g. enter-from-class=&quot;xxx&quot;</span></span>\n<span class="line"><span style="color:#6A737D;">   */</span></span>\n<span class="line"><span style="color:#FFAB70;">  enterFromClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#FFAB70;">  enterActiveClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#FFAB70;">  enterToClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#FFAB70;">  appearFromClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#FFAB70;">  appearActiveClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#FFAB70;">  appearToClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#FFAB70;">  leaveFromClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#FFAB70;">  leaveActiveClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#FFAB70;">  leaveToClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Events</strong></p><ul><li><code>@before-enter</code></li><li><code>@before-leave</code></li><li><code>@enter</code></li><li><code>@leave</code></li><li><code>@appear</code></li><li><code>@after-enter</code></li><li><code>@after-leave</code></li><li><code>@after-appear</code></li><li><code>@enter-cancelled</code></li><li><code>@leave-cancelled</code> (<code>v-show</code> only)</li><li><code>@appear-cancelled</code></li></ul></li><li><p><strong>Example</strong></p><p>Simple element:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">ok</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;toggled content&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Forcing a transition by changing the <code>key</code> attribute:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">text</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;{{ text }}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Dynamic component, with transition mode + animate on appear:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;fade&quot;</span><span style="color:#B392F0;"> mode</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;out-in&quot;</span><span style="color:#B392F0;"> appear</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Listening to transition events:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">after-enter</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">onTransitionComplete</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-show</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">ok</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;toggled content&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>See also</strong> <a href="/guide/built-ins/transition.html">Guide - Transition</a></p></li></ul><h2 id="transitiongroup" tabindex="-1"><code>&lt;TransitionGroup&gt;</code> <a class="header-anchor" href="#transitiongroup" aria-label="Permalink to &quot;`&lt;TransitionGroup&gt;` {#transitiongroup}&quot;">​</a></h2><p>Provides transition effects for <strong>multiple</strong> elements or components in a list.</p><ul><li><p><strong>Props</strong></p><p><code>&lt;TransitionGroup&gt;</code> accepts the same props as <code>&lt;Transition&gt;</code> except <code>mode</code>, plus two additional props:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> TransitionGroupProps</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> Omit</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">TransitionProps</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;mode&#39;</span><span style="color:#E1E4E8;">&gt; {</span></span>\n<span class="line"><span style="color:#6A737D;">  /**</span></span>\n<span class="line"><span style="color:#6A737D;">   * If not defined, renders as a fragment.</span></span>\n<span class="line"><span style="color:#6A737D;">   */</span></span>\n<span class="line"><span style="color:#FFAB70;">  tag</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#6A737D;">  /**</span></span>\n<span class="line"><span style="color:#6A737D;">   * For customizing the CSS class applied during move transitions.</span></span>\n<span class="line"><span style="color:#6A737D;">   * Use kebab-case in templates, e.g. move-class=&quot;xxx&quot;</span></span>\n<span class="line"><span style="color:#6A737D;">   */</span></span>\n<span class="line"><span style="color:#FFAB70;">  moveClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Events</strong></p><p><code>&lt;TransitionGroup&gt;</code> emits the same events as <code>&lt;Transition&gt;</code>.</p></li><li><p><strong>Details</strong></p><p>By default, <code>&lt;TransitionGroup&gt;</code> doesn&#39;t render a wrapper DOM element, but one can be defined via the <code>tag</code> prop.</p><p>Note that every child in a <code>&lt;transition-group&gt;</code> must be <a href="/guide/essentials/list.html#maintaining-state-with-key"><strong>uniquely keyed</strong></a> for the animations to work properly.</p><p><code>&lt;TransitionGroup&gt;</code> supports moving transitions via CSS transform. When a child&#39;s position on screen has changed after an update, it will get applied a moving CSS class (auto generated from the <code>name</code> attribute or configured with the <code>move-class</code> prop). If the CSS <code>transform</code> property is &quot;transition-able&quot; when the moving class is applied, the element will be smoothly animated to its destination using the <a href="https://aerotwist.com/blog/flip-your-animations/" target="_blank" rel="noreferrer">FLIP technique</a>.</p></li><li><p><strong>Example</strong></p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">TransitionGroup</span><span style="color:#B392F0;"> tag</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ul&quot;</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;slide&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">li</span><span style="color:#B392F0;"> v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">item </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> items</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">item.id</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    {{ item.text }}</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">TransitionGroup</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>See also</strong> <a href="/guide/built-ins/transition-group.html">Guide - TransitionGroup</a></p></li></ul><h2 id="keepalive" tabindex="-1"><code>&lt;KeepAlive&gt;</code> <a class="header-anchor" href="#keepalive" aria-label="Permalink to &quot;`&lt;KeepAlive&gt;` {#keepalive}&quot;">​</a></h2><p>Caches dynamically toggled components wrapped inside.</p><ul><li><p><strong>Props</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> KeepAliveProps</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">  /**</span></span>\n<span class="line"><span style="color:#6A737D;">   * If specified, only components with names matched by</span></span>\n<span class="line"><span style="color:#6A737D;">   * `include` will be cached.</span></span>\n<span class="line"><span style="color:#6A737D;">   */</span></span>\n<span class="line"><span style="color:#FFAB70;">  include</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> MatchPattern</span></span>\n<span class="line"><span style="color:#6A737D;">  /**</span></span>\n<span class="line"><span style="color:#6A737D;">   * Any component with a name matched by `exclude` will</span></span>\n<span class="line"><span style="color:#6A737D;">   * not be cached.</span></span>\n<span class="line"><span style="color:#6A737D;">   */</span></span>\n<span class="line"><span style="color:#FFAB70;">  exclude</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> MatchPattern</span></span>\n<span class="line"><span style="color:#6A737D;">  /**</span></span>\n<span class="line"><span style="color:#6A737D;">   * The maximum number of component instances to cache.</span></span>\n<span class="line"><span style="color:#6A737D;">   */</span></span>\n<span class="line"><span style="color:#FFAB70;">  max</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> number</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> MatchPattern</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> RegExp</span><span style="color:#F97583;"> |</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">string</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> RegExp</span><span style="color:#E1E4E8;">)[]</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>When wrapped around a dynamic component, <code>&lt;KeepAlive&gt;</code> caches the inactive component instances without destroying them.</p><p>There can only be one active component instance as the direct child of <code>&lt;KeepAlive&gt;</code> at any time.</p><p>When a component is toggled inside <code>&lt;KeepAlive&gt;</code>, its <code>activated</code> and <code>deactivated</code> lifecycle hooks will be invoked accordingly, providing an alternative to <code>mounted</code> and <code>unmounted</code>, which are not called. This applies to the direct child of <code>&lt;KeepAlive&gt;</code> as well as to all of its descendants.</p></li><li><p><strong>Example</strong></p><p>Basic usage:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>When used with <code>v-if</code> / <code>v-else</code> branches, there must be only one component rendered at a time:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">comp-a</span><span style="color:#B392F0;"> v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;"> 1</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">comp-a</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">comp-b</span><span style="color:#B392F0;"> v-else</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">comp-b</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Used together with <code>&lt;Transition&gt;</code>:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Using <code>include</code> / <code>exclude</code>:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- comma-delimited string --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#B392F0;"> include</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;a,b&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- regex (use `v-bind`) --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">include</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;/</span><span style="color:#DBEDFF;">a</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">b</span><span style="color:#9ECBFF;">/&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- Array (use `v-bind`) --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">include</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">]</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Usage with <code>max</code>:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>See also</strong> <a href="/guide/built-ins/keep-alive.html">Guide - KeepAlive</a></p></li></ul><h2 id="teleport" tabindex="-1"><code>&lt;Teleport&gt;</code> <a class="header-anchor" href="#teleport" aria-label="Permalink to &quot;`&lt;Teleport&gt;` {#teleport}&quot;">​</a></h2><p>Renders its slot content to another part of the DOM.</p><ul><li><p><strong>Props</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> TeleportProps</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">  /**</span></span>\n<span class="line"><span style="color:#6A737D;">   * Required. Specify target container.</span></span>\n<span class="line"><span style="color:#6A737D;">   * Can either be a selector or an actual element.</span></span>\n<span class="line"><span style="color:#6A737D;">   */</span></span>\n<span class="line"><span style="color:#FFAB70;">  to</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> HTMLElement</span></span>\n<span class="line"><span style="color:#6A737D;">  /**</span></span>\n<span class="line"><span style="color:#6A737D;">   * When `true`, the content will remain in its original</span></span>\n<span class="line"><span style="color:#6A737D;">   * location instead of moved into the target container.</span></span>\n<span class="line"><span style="color:#6A737D;">   * Can be changed dynamically.</span></span>\n<span class="line"><span style="color:#6A737D;">   */</span></span>\n<span class="line"><span style="color:#FFAB70;">  disabled</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Example</strong></p><p>Specifying target container:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Teleport</span><span style="color:#B392F0;"> to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;#some-id&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Teleport</span><span style="color:#B392F0;"> to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;.some-class&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Teleport</span><span style="color:#B392F0;"> to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;[data-teleport]&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>Conditionally disabling:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Teleport</span><span style="color:#B392F0;"> to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;#popup&quot;</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">disabled</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">displayVideoInline</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">video</span><span style="color:#B392F0;"> src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;./my-movie.mp4&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Teleport</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>See also</strong> <a href="/guide/built-ins/teleport.html">Guide - Teleport</a></p></li></ul><h2 id="suspense" tabindex="-1"><code>&lt;Suspense&gt;</code> <sup class="vt-badge experimental"></sup> <a class="header-anchor" href="#suspense" aria-label="Permalink to &quot;`&lt;Suspense&gt;` &lt;sup class=&quot;vt-badge experimental&quot; /&gt; {#suspense}&quot;">​</a></h2><p>Used for orchestrating nested async dependencies in a component tree.</p><ul><li><p><strong>Props</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> SuspenseProps</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">  timeout</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> number</span></span>\n<span class="line"><span style="color:#FFAB70;">  suspensible</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Events</strong></p><ul><li><code>@resolve</code></li><li><code>@pending</code></li><li><code>@fallback</code></li></ul></li><li><p><strong>Details</strong></p><p><code>&lt;Suspense&gt;</code> accepts two slots: the <code>#default</code> slot and the <code>#fallback</code> slot. It will display the content of the fallback slot while rendering the default slot in memory.</p><p>If it encounters async dependencies (<a href="/guide/components/async.html">Async Components</a> and components with <a href="/guide/built-ins/suspense.html#async-setup"><code>async setup()</code></a>) while rendering the default slot, it will wait until all of them are resolved before displaying the default slot.</p><p>By setting the Suspense as <code>suspensible</code>, all the async dependency handling will be handled by the parent Suspense. See <a href="https://github.com/vuejs/core/pull/6736" target="_blank" rel="noreferrer">implementation details</a></p></li><li><p><strong>See also</strong> <a href="/guide/built-ins/suspense.html">Guide - Suspense</a></p></li></ul>',17)];const t=s(o,[["render",function(s,l,e,o,t,c){return a(),n("div",null,p)}]]);export{e as __pageData,t as default};
