import{_ as s,c as a,o as n,b as l}from"./chunks/framework.B9NywAPp.js";const e=JSON.parse('{"title":"Reactivity API: Core","description":"","frontmatter":{},"headers":[{"level":2,"title":"ref()","slug":"ref","link":"#ref","children":[]},{"level":2,"title":"computed()","slug":"computed","link":"#computed","children":[]},{"level":2,"title":"reactive()","slug":"reactive","link":"#reactive","children":[]},{"level":2,"title":"readonly()","slug":"readonly","link":"#readonly","children":[]},{"level":2,"title":"watchEffect()","slug":"watcheffect","link":"#watcheffect","children":[]},{"level":2,"title":"watchPostEffect()","slug":"watchposteffect","link":"#watchposteffect","children":[]},{"level":2,"title":"watchSyncEffect()","slug":"watchsynceffect","link":"#watchsynceffect","children":[]},{"level":2,"title":"watch()","slug":"watch","link":"#watch","children":[]}],"relativePath":"api/reactivity-core.md","filePath":"api/reactivity-core.md"}'),p={name:"api/reactivity-core.md"},o=[l('<h1 id="reactivity-api-core" tabindex="-1">Reactivity API: Core <a class="header-anchor" href="#reactivity-api-core" aria-label="Permalink to &quot;Reactivity API: Core {#reactivity-api-core}&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">See also</p><p>To better understand the Reactivity APIs, it is recommended to read the following chapters in the guide:</p><ul><li><a href="/guide/essentials/reactivity-fundamentals.html">Reactivity Fundamentals</a> (with the API preference set to Composition API)</li><li><a href="/guide/extras/reactivity-in-depth.html">Reactivity in Depth</a></li></ul></div><h2 id="ref" tabindex="-1">ref() <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;ref() {#ref}&quot;">​</a></h2><p>Takes an inner value and returns a reactive and mutable ref object, which has a single property <code>.value</code> that points to the inner value.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">UnwrapRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>\n<span class="line"><span style="color:#FFAB70;">  value</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>The ref object is mutable - i.e. you can assign new values to <code>.value</code>. It is also reactive - i.e. any read operations to <code>.value</code> are tracked, and write operations will trigger associated effects.</p><p>If an object is assigned as a ref&#39;s value, the object is made deeply reactive with <a href="#reactive">reactive()</a>. This also means if the object contains nested refs, they will be deeply unwrapped.</p><p>To avoid the deep conversion, use <a href="./reactivity-advanced.html#shallowref"><code>shallowRef()</code></a> instead.</p></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count.value) </span><span style="color:#6A737D;">// 0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">count.value </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 1</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count.value) </span><span style="color:#6A737D;">// 1</span></span></code></pre></div></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/essentials/reactivity-fundamentals.html#ref">Guide - Reactivity Fundamentals with <code>ref()</code></a></li><li><a href="/guide/typescript/composition-api.html#typing-ref">Guide - Typing <code>ref()</code></a> <sup class="vt-badge ts"></sup></li></ul></li></ul><h2 id="computed" tabindex="-1">computed() <a class="header-anchor" href="#computed" aria-label="Permalink to &quot;computed() {#computed}&quot;">​</a></h2><p>Takes a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#description" target="_blank" rel="noreferrer">getter function</a> and returns a readonly reactive <a href="#ref">ref</a> object for the returned value from the getter. It can also take an object with <code>get</code> and <code>set</code> functions to create a writable ref object.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// read-only</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> computed</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span></span>\n<span class="line"><span style="color:#B392F0;">  getter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">oldValue</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#6A737D;">  // see &quot;Computed Debugging&quot; link below</span></span>\n<span class="line"><span style="color:#FFAB70;">  debuggerOptions</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> DebuggerOptions</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Readonly</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Readonly</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;&gt;&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// writable</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> computed</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span></span>\n<span class="line"><span style="color:#FFAB70;">  options</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">    get</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">oldValue</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> T</span></span>\n<span class="line"><span style="color:#B392F0;">    set</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#FFAB70;">  debuggerOptions</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> DebuggerOptions</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>Example</strong></p><p>Creating a readonly computed ref:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> plusOne</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> computed</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> count.value </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(plusOne.value) </span><span style="color:#6A737D;">// 2</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">plusOne.value</span><span style="color:#F97583;">++</span><span style="color:#6A737D;"> // error</span></span></code></pre></div><p>Creating a writable computed ref:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> plusOne</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> computed</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#B392F0;">  get</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> count.value </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#B392F0;">  set</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    count.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;"> 1</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">plusOne.value </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 1</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count.value) </span><span style="color:#6A737D;">// 0</span></span></code></pre></div><p>Debugging:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> plusOne</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> computed</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> count.value </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#B392F0;">  onTrack</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">    debugger</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#B392F0;">  onTrigger</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">    debugger</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/essentials/computed.html">Guide - Computed Properties</a></li><li><a href="/guide/extras/reactivity-in-depth.html#computed-debugging">Guide - Computed Debugging</a></li><li><a href="/guide/typescript/composition-api.html#typing-computed">Guide - Typing <code>computed()</code></a> <sup class="vt-badge ts"></sup></li><li><a href="/guide/best-practices/performance.html#computed-stability">Guide - Performance - Computed Stability</a> <sup class="vt-badge" data-text="3.4+"></sup></li></ul></li></ul><h2 id="reactive" tabindex="-1">reactive() <a class="header-anchor" href="#reactive" aria-label="Permalink to &quot;reactive() {#reactive}&quot;">​</a></h2><p>Returns a reactive proxy of the object.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> extends</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">target</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> UnwrapNestedRefs</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>The reactive conversion is &quot;deep&quot;: it affects all nested properties. A reactive object also deeply unwraps any properties that are <a href="#ref">refs</a> while maintaining reactivity.</p><p>It should also be noted that there is no ref unwrapping performed when the ref is accessed as an element of a reactive array or a native collection type like <code>Map</code>.</p><p>To avoid the deep conversion and only retain reactivity at the root level, use <a href="./reactivity-advanced.html#shallowreactive">shallowReactive()</a> instead.</p><p>The returned object and its nested objects are wrapped with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">ES Proxy</a> and <strong>not</strong> equal to the original objects. It is recommended to work exclusively with the reactive proxy and avoid relying on the original object.</p></li><li><p><strong>Example</strong></p><p>Creating a reactive object:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> obj</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"><span style="color:#E1E4E8;">obj.count</span><span style="color:#F97583;">++</span></span></code></pre></div><p>Ref unwrapping:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> obj</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({ count })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// ref will be unwrapped</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj.count </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> count.value) </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// it will update `obj.count`</span></span>\n<span class="line"><span style="color:#E1E4E8;">count.value</span><span style="color:#F97583;">++</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count.value) </span><span style="color:#6A737D;">// 2</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj.count) </span><span style="color:#6A737D;">// 2</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// it will also update `count` ref</span></span>\n<span class="line"><span style="color:#E1E4E8;">obj.count</span><span style="color:#F97583;">++</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj.count) </span><span style="color:#6A737D;">// 3</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count.value) </span><span style="color:#6A737D;">// 3</span></span></code></pre></div><p>Note that refs are <strong>not</strong> unwrapped when accessed as array or collection elements:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> books</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">([</span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Vue 3 Guide&#39;</span><span style="color:#E1E4E8;">)])</span></span>\n<span class="line"><span style="color:#6A737D;">// need .value here</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(books[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].value)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> map</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Map</span><span style="color:#E1E4E8;">([[</span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)]]))</span></span>\n<span class="line"><span style="color:#6A737D;">// need .value here</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(map.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">).value)</span></span></code></pre></div><p>When assigning a <a href="#ref">ref</a> to a <code>reactive</code> property, that ref will also be automatically unwrapped:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> obj</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">obj.count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> count</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj.count) </span><span style="color:#6A737D;">// 1</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj.count </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> count.value) </span><span style="color:#6A737D;">// true</span></span></code></pre></div></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/essentials/reactivity-fundamentals.html">Guide - Reactivity Fundamentals</a></li><li><a href="/guide/typescript/composition-api.html#typing-reactive">Guide - Typing <code>reactive()</code></a> <sup class="vt-badge ts"></sup></li></ul></li></ul><h2 id="readonly" tabindex="-1">readonly() <a class="header-anchor" href="#readonly" aria-label="Permalink to &quot;readonly() {#readonly}&quot;">​</a></h2><p>Takes an object (reactive or plain) or a <a href="#ref">ref</a> and returns a readonly proxy to the original.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> readonly</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> extends</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">&gt;(</span></span>\n<span class="line"><span style="color:#FFAB70;">  target</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> DeepReadonly</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">UnwrapNestedRefs</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;&gt;</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>A readonly proxy is deep: any nested property accessed will be readonly as well. It also has the same ref-unwrapping behavior as <code>reactive()</code>, except the unwrapped values will also be made readonly.</p><p>To avoid the deep conversion, use <a href="./reactivity-advanced.html#shallowreadonly">shallowReadonly()</a> instead.</p></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> original</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> copy</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> readonly</span><span style="color:#E1E4E8;">(original)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">watchEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">  // works for reactivity tracking</span></span>\n<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(copy.count)</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// mutating original will trigger watchers relying on the copy</span></span>\n<span class="line"><span style="color:#E1E4E8;">original.count</span><span style="color:#F97583;">++</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// mutating the copy will fail and result in a warning</span></span>\n<span class="line"><span style="color:#E1E4E8;">copy.count</span><span style="color:#F97583;">++</span><span style="color:#6A737D;"> // warning!</span></span></code></pre></div></li></ul><h2 id="watcheffect" tabindex="-1">watchEffect() <a class="header-anchor" href="#watcheffect" aria-label="Permalink to &quot;watchEffect() {#watcheffect}&quot;">​</a></h2><p>Runs a function immediately while reactively tracking its dependencies and re-runs it whenever the dependencies are changed.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> watchEffect</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#B392F0;">  effect</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">onCleanup</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> OnCleanup</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  options</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> WatchEffectOptions</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> StopHandle</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> OnCleanup</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">cleanupFn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> WatchEffectOptions</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">  flush</span><span style="color:#F97583;">?:</span><span style="color:#9ECBFF;"> &#39;pre&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;post&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;sync&#39;</span><span style="color:#6A737D;"> // default: &#39;pre&#39;</span></span>\n<span class="line"><span style="color:#B392F0;">  onTrack</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> DebuggerEvent</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"><span style="color:#B392F0;">  onTrigger</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> DebuggerEvent</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> StopHandle</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>The first argument is the effect function to be run. The effect function receives a function that can be used to register a cleanup callback. The cleanup callback will be called right before the next time the effect is re-run, and can be used to clean up invalidated side effects, e.g. a pending async request (see example below).</p><p>The second argument is an optional options object that can be used to adjust the effect&#39;s flush timing or to debug the effect&#39;s dependencies.</p><p>By default, watchers will run just prior to component rendering. Setting <code>flush: &#39;post&#39;</code> will defer the watcher until after component rendering. See <a href="/guide/essentials/watchers.html#callback-flush-timing">Callback Flush Timing</a> for more information. In rare cases, it might be necessary to trigger a watcher immediately when a reactive dependency changes, e.g. to invalidate a cache. This can be achieved using <code>flush: &#39;sync&#39;</code>. However, this setting should be used with caution, as it can lead to problems with performance and data consistency if multiple properties are being updated at the same time.</p><p>The return value is a handle function that can be called to stop the effect from running again.</p></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">watchEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count.value))</span></span>\n<span class="line"><span style="color:#6A737D;">// -&gt; logs 0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">count.value</span><span style="color:#F97583;">++</span></span>\n<span class="line"><span style="color:#6A737D;">// -&gt; logs 1</span></span></code></pre></div><p>Side effect cleanup:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">watchEffect</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">onCleanup</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">response</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">cancel</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> doAsyncWork</span><span style="color:#E1E4E8;">(id.value)</span></span>\n<span class="line"><span style="color:#6A737D;">  // `cancel` will be called if `id` changes</span></span>\n<span class="line"><span style="color:#6A737D;">  // so that previous pending request will be cancelled</span></span>\n<span class="line"><span style="color:#6A737D;">  // if not yet completed</span></span>\n<span class="line"><span style="color:#B392F0;">  onCleanup</span><span style="color:#E1E4E8;">(cancel)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  data.value </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> response</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>Stopping the watcher:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> stop</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> watchEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// when the watcher is no longer needed:</span></span>\n<span class="line"><span style="color:#B392F0;">stop</span><span style="color:#E1E4E8;">()</span></span></code></pre></div><p>Options:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">watchEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  flush: </span><span style="color:#9ECBFF;">&#39;post&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#B392F0;">  onTrack</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">    debugger</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#B392F0;">  onTrigger</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">    debugger</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/essentials/watchers.html#watcheffect">Guide - Watchers</a></li><li><a href="/guide/extras/reactivity-in-depth.html#watcher-debugging">Guide - Watcher Debugging</a></li></ul></li></ul><h2 id="watchposteffect" tabindex="-1">watchPostEffect() <a class="header-anchor" href="#watchposteffect" aria-label="Permalink to &quot;watchPostEffect() {#watchposteffect}&quot;">​</a></h2><p>Alias of <a href="#watcheffect"><code>watchEffect()</code></a> with <code>flush: &#39;post&#39;</code> option.</p><h2 id="watchsynceffect" tabindex="-1">watchSyncEffect() <a class="header-anchor" href="#watchsynceffect" aria-label="Permalink to &quot;watchSyncEffect() {#watchsynceffect}&quot;">​</a></h2><p>Alias of <a href="#watcheffect"><code>watchEffect()</code></a> with <code>flush: &#39;sync&#39;</code> option.</p><h2 id="watch" tabindex="-1">watch() <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;watch() {#watch}&quot;">​</a></h2><p>Watches one or more reactive data sources and invokes a callback function when the sources change.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// watching single source</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> watch</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span></span>\n<span class="line"><span style="color:#FFAB70;">  source</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> WatchSource</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;,</span></span>\n<span class="line"><span style="color:#FFAB70;">  callback</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> WatchCallback</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;,</span></span>\n<span class="line"><span style="color:#FFAB70;">  options</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> WatchOptions</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> StopHandle</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// watching multiple sources</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> watch</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span></span>\n<span class="line"><span style="color:#FFAB70;">  sources</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> WatchSource</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;[],</span></span>\n<span class="line"><span style="color:#FFAB70;">  callback</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> WatchCallback</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">[]&gt;,</span></span>\n<span class="line"><span style="color:#FFAB70;">  options</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> WatchOptions</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> StopHandle</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> WatchCallback</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#FFAB70;">  value</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  oldValue</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#B392F0;">  onCleanup</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">cleanupFn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> WatchSource</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span></span>\n<span class="line"><span style="color:#F97583;">  |</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// ref</span></span>\n<span class="line"><span style="color:#F97583;">  |</span><span style="color:#E1E4E8;"> (() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// getter</span></span>\n<span class="line"><span style="color:#F97583;">  |</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> extends</span><span style="color:#79B8FF;"> object</span></span>\n<span class="line"><span style="color:#F97583;">  ?</span><span style="color:#B392F0;"> T</span></span>\n<span class="line"><span style="color:#F97583;">  :</span><span style="color:#79B8FF;"> never</span><span style="color:#6A737D;"> // reactive object</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> WatchOptions</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> WatchEffectOptions</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">  immediate</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span><span style="color:#6A737D;"> // default: false</span></span>\n<span class="line"><span style="color:#FFAB70;">  deep</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span><span style="color:#6A737D;"> // default: false</span></span>\n<span class="line"><span style="color:#FFAB70;">  flush</span><span style="color:#F97583;">?:</span><span style="color:#9ECBFF;"> &#39;pre&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;post&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;sync&#39;</span><span style="color:#6A737D;"> // default: &#39;pre&#39;</span></span>\n<span class="line"><span style="color:#B392F0;">  onTrack</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> DebuggerEvent</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"><span style="color:#B392F0;">  onTrigger</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> DebuggerEvent</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"><span style="color:#FFAB70;">  once</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span><span style="color:#6A737D;"> // default: false (3.4+)</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>Types are simplified for readability.</p></blockquote></li><li><p><strong>Details</strong></p><p><code>watch()</code> is lazy by default - i.e. the callback is only called when the watched source has changed.</p><p>The first argument is the watcher&#39;s <strong>source</strong>. The source can be one of the following:</p><ul><li>A getter function that returns a value</li><li>A ref</li><li>A reactive object</li><li>...or an array of the above.</li></ul><p>The second argument is the callback that will be called when the source changes. The callback receives three arguments: the new value, the old value, and a function for registering a side effect cleanup callback. The cleanup callback will be called right before the next time the effect is re-run, and can be used to clean up invalidated side effects, e.g. a pending async request.</p><p>When watching multiple sources, the callback receives two arrays containing new / old values corresponding to the source array.</p><p>The third optional argument is an options object that supports the following options:</p><ul><li><strong><code>immediate</code></strong>: trigger the callback immediately on watcher creation. Old value will be <code>undefined</code> on the first call.</li><li><strong><code>deep</code></strong>: force deep traversal of the source if it is an object, so that the callback fires on deep mutations. See <a href="/guide/essentials/watchers.html#deep-watchers">Deep Watchers</a>.</li><li><strong><code>flush</code></strong>: adjust the callback&#39;s flush timing. See <a href="/guide/essentials/watchers.html#callback-flush-timing">Callback Flush Timing</a> and <a href="/api/reactivity-core.html#watcheffect"><code>watchEffect()</code></a>.</li><li><strong><code>onTrack / onTrigger</code></strong>: debug the watcher&#39;s dependencies. See <a href="/guide/extras/reactivity-in-depth.html#watcher-debugging">Watcher Debugging</a>.</li><li><strong><code>once</code></strong>: run the callback only once. The watcher is automatically stopped after the first callback run. <sup class="vt-badge" data-text="3.4+"></sup></li></ul><p>Compared to <a href="#watcheffect"><code>watchEffect()</code></a>, <code>watch()</code> allows us to:</p><ul><li>Perform the side effect lazily;</li><li>Be more specific about what state should trigger the watcher to re-run;</li><li>Access both the previous and current value of the watched state.</li></ul></li><li><p><strong>Example</strong></p><p>Watching a getter:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> state</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">  () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> state.count,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">count</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">prevCount</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">    /* ... */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>Watching a ref:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(count, (</span><span style="color:#FFAB70;">count</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">prevCount</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">  /* ... */</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>When watching multiple sources, the callback receives arrays containing new / old values corresponding to the source array:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">([fooRef, barRef], ([</span><span style="color:#FFAB70;">foo</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">bar</span><span style="color:#E1E4E8;">], [</span><span style="color:#FFAB70;">prevFoo</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">prevBar</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">  /* ... */</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>When using a getter source, the watcher only fires if the getter&#39;s return value has changed. If you want the callback to fire even on deep mutations, you need to explicitly force the watcher into deep mode with <code>{ deep: true }</code>. Note in deep mode, the new value and the old will be the same object if the callback was triggered by a deep mutation:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> state</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">  () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> state,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">newValue</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldValue</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">    // newValue === oldValue</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  { deep: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>When directly watching a reactive object, the watcher is automatically in deep mode:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> state</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(state, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">  /* triggers on deep mutation to state */</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p><code>watch()</code> shares the same flush timing and debugging options with <a href="#watcheffect"><code>watchEffect()</code></a>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(source, callback, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  flush: </span><span style="color:#9ECBFF;">&#39;post&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#B392F0;">  onTrack</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">    debugger</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#B392F0;">  onTrigger</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">    debugger</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>Stopping the watcher:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> stop</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> watch</span><span style="color:#E1E4E8;">(source, callback)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// when the watcher is no longer needed:</span></span>\n<span class="line"><span style="color:#B392F0;">stop</span><span style="color:#E1E4E8;">()</span></span></code></pre></div><p>Side effect cleanup:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(id, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">newId</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldId</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">onCleanup</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">response</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">cancel</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> doAsyncWork</span><span style="color:#E1E4E8;">(newId)</span></span>\n<span class="line"><span style="color:#6A737D;">  // `cancel` will be called if `id` changes, cancelling</span></span>\n<span class="line"><span style="color:#6A737D;">  // the previous request if it hasn&#39;t completed yet</span></span>\n<span class="line"><span style="color:#B392F0;">  onCleanup</span><span style="color:#E1E4E8;">(cancel)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  data.value </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> response</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/essentials/watchers.html">Guide - Watchers</a></li><li><a href="/guide/extras/reactivity-in-depth.html#watcher-debugging">Guide - Watcher Debugging</a></li></ul></li></ul>',24)];const t=s(p,[["render",function(s,l,e,p,t,c){return n(),a("div",null,o)}]]);export{e as __pageData,t as default};
