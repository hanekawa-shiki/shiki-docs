import{_ as s,c as a,o as l,b as n}from"./chunks/framework.B9NywAPp.js";const e=JSON.parse('{"title":"SFC CSS Features","description":"","frontmatter":{},"headers":[{"level":2,"title":"Scoped CSS","slug":"scoped-css","link":"#scoped-css","children":[{"level":3,"title":"Child Component Root Elements","slug":"child-component-root-elements","link":"#child-component-root-elements","children":[]},{"level":3,"title":"Deep Selectors","slug":"deep-selectors","link":"#deep-selectors","children":[]},{"level":3,"title":"Slotted Selectors","slug":"slotted-selectors","link":"#slotted-selectors","children":[]},{"level":3,"title":"Global Selectors","slug":"global-selectors","link":"#global-selectors","children":[]},{"level":3,"title":"Mixing Local and Global Styles","slug":"mixing-local-and-global-styles","link":"#mixing-local-and-global-styles","children":[]},{"level":3,"title":"Scoped Style Tips","slug":"scoped-style-tips","link":"#scoped-style-tips","children":[]}]},{"level":2,"title":"CSS Modules","slug":"css-modules","link":"#css-modules","children":[{"level":3,"title":"Custom Inject Name","slug":"custom-inject-name","link":"#custom-inject-name","children":[]},{"level":3,"title":"Usage with Composition API","slug":"usage-with-composition-api","link":"#usage-with-composition-api","children":[]}]},{"level":2,"title":"v-bind() in CSS","slug":"v-bind-in-css","link":"#v-bind-in-css","children":[]}],"relativePath":"api/sfc-css-features.md","filePath":"api/sfc-css-features.md"}'),o={name:"api/sfc-css-features.md"},p=[n('<h1 id="sfc-css-features" tabindex="-1">SFC CSS Features <a class="header-anchor" href="#sfc-css-features" aria-label="Permalink to &quot;SFC CSS Features {#sfc-css-features}&quot;">​</a></h1><h2 id="scoped-css" tabindex="-1">Scoped CSS <a class="header-anchor" href="#scoped-css" aria-label="Permalink to &quot;Scoped CSS {#scoped-css}&quot;">​</a></h2><p>When a <code>&lt;style&gt;</code> tag has the <code>scoped</code> attribute, its CSS will apply to elements of the current component only. This is similar to the style encapsulation found in Shadow DOM. It comes with some caveats, but doesn&#39;t require any polyfills. It is achieved by using PostCSS to transform the following:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#B392F0;"> scoped</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">.example</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#79B8FF;">  color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;example&quot;</span><span style="color:#E1E4E8;">&gt;hi&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Into the following:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">.example</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">data-v-f3f3eg9</span><span style="color:#E1E4E8;">] {</span></span>\n<span class="line"><span style="color:#79B8FF;">  color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;example&quot;</span><span style="color:#B392F0;"> data-v-f3f3eg9</span><span style="color:#E1E4E8;">&gt;hi&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="child-component-root-elements" tabindex="-1">Child Component Root Elements <a class="header-anchor" href="#child-component-root-elements" aria-label="Permalink to &quot;Child Component Root Elements {#child-component-root-elements}&quot;">​</a></h3><p>With <code>scoped</code>, the parent component&#39;s styles will not leak into child components. However, a child component&#39;s root node will be affected by both the parent&#39;s scoped CSS and the child&#39;s scoped CSS. This is by design so that the parent can style the child root element for layout purposes.</p><h3 id="deep-selectors" tabindex="-1">Deep Selectors <a class="header-anchor" href="#deep-selectors" aria-label="Permalink to &quot;Deep Selectors {#deep-selectors}&quot;">​</a></h3><p>If you want a selector in <code>scoped</code> styles to be &quot;deep&quot;, i.e. affecting child components, you can use the <code>:deep()</code> pseudo-class:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#B392F0;"> scoped</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">.a</span><span style="color:#E1E4E8;"> :deep(</span><span style="color:#B392F0;">.b</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">  /* ... */</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>The above will be compiled into:</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">.a</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">data-v-f3f3eg9</span><span style="color:#E1E4E8;">] </span><span style="color:#B392F0;">.b</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">  /* ... */</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>DOM content created with <code>v-html</code> are not affected by scoped styles, but you can still style them using deep selectors.</p></div><h3 id="slotted-selectors" tabindex="-1">Slotted Selectors <a class="header-anchor" href="#slotted-selectors" aria-label="Permalink to &quot;Slotted Selectors {#slotted-selectors}&quot;">​</a></h3><p>By default, scoped styles do not affect contents rendered by <code>&lt;slot/&gt;</code>, as they are considered to be owned by the parent component passing them in. To explicitly target slot content, use the <code>:slotted</code> pseudo-class:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#B392F0;"> scoped</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">:slotted(</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#79B8FF;">  color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="global-selectors" tabindex="-1">Global Selectors <a class="header-anchor" href="#global-selectors" aria-label="Permalink to &quot;Global Selectors {#global-selectors}&quot;">​</a></h3><p>If you want just one rule to apply globally, you can use the <code>:global</code> pseudo-class rather than creating another <code>&lt;style&gt;</code> (see below):</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#B392F0;"> scoped</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">:global(</span><span style="color:#B392F0;">.red</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#79B8FF;">  color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="mixing-local-and-global-styles" tabindex="-1">Mixing Local and Global Styles <a class="header-anchor" href="#mixing-local-and-global-styles" aria-label="Permalink to &quot;Mixing Local and Global Styles {#mixing-local-and-global-styles}&quot;">​</a></h3><p>You can also include both scoped and non-scoped styles in the same component:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">/* global styles */</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#B392F0;"> scoped</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">/* local styles */</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="scoped-style-tips" tabindex="-1">Scoped Style Tips <a class="header-anchor" href="#scoped-style-tips" aria-label="Permalink to &quot;Scoped Style Tips {#scoped-style-tips}&quot;">​</a></h3><ul><li><p><strong>Scoped styles do not eliminate the need for classes</strong>. Due to the way browsers render various CSS selectors, <code>p { color: red }</code> will be many times slower when scoped (i.e. when combined with an attribute selector). If you use classes or ids instead, such as in <code>.example { color: red }</code>, then you virtually eliminate that performance hit.</p></li><li><p><strong>Be careful with descendant selectors in recursive components!</strong> For a CSS rule with the selector <code>.a .b</code>, if the element that matches <code>.a</code> contains a recursive child component, then all <code>.b</code> in that child component will be matched by the rule.</p></li></ul><h2 id="css-modules" tabindex="-1">CSS Modules <a class="header-anchor" href="#css-modules" aria-label="Permalink to &quot;CSS Modules {#css-modules}&quot;">​</a></h2><p>A <code>&lt;style module&gt;</code> tag is compiled as <a href="https://github.com/css-modules/css-modules" target="_blank" rel="noreferrer">CSS Modules</a> and exposes the resulting CSS classes to the component as an object under the key of <code>$style</code>:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$style.red</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;This should be red&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#B392F0;"> module</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">.red</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#79B8FF;">  color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>The resulting classes are hashed to avoid collision, achieving the same effect of scoping the CSS to the current component only.</p><p>Refer to the <a href="https://github.com/css-modules/css-modules" target="_blank" rel="noreferrer">CSS Modules spec</a> for more details such as <a href="https://github.com/css-modules/css-modules/blob/master/docs/composition.md#exceptions" target="_blank" rel="noreferrer">global exceptions</a> and <a href="https://github.com/css-modules/css-modules/blob/master/docs/composition.md#composition" target="_blank" rel="noreferrer">composition</a>.</p><h3 id="custom-inject-name" tabindex="-1">Custom Inject Name <a class="header-anchor" href="#custom-inject-name" aria-label="Permalink to &quot;Custom Inject Name {#custom-inject-name}&quot;">​</a></h3><p>You can customize the property key of the injected classes object by giving the <code>module</code> attribute a value:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">classes.red</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;red&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#B392F0;"> module</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;classes&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">.red</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#79B8FF;">  color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="usage-with-composition-api" tabindex="-1">Usage with Composition API <a class="header-anchor" href="#usage-with-composition-api" aria-label="Permalink to &quot;Usage with Composition API {#usage-with-composition-api}&quot;">​</a></h3><p>The injected classes can be accessed in <code>setup()</code> and <code>&lt;script setup&gt;</code> via the <code>useCssModule</code> API. For <code>&lt;style module&gt;</code> blocks with custom injection names, <code>useCssModule</code> accepts the matching <code>module</code> attribute value as the first argument:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useCssModule } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// inside setup() scope...</span></span>\n<span class="line"><span style="color:#6A737D;">// default, returns classes for &lt;style module&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">useCssModule</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// named, returns classes for &lt;style module=&quot;classes&quot;&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">useCssModule</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;classes&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><h2 id="v-bind-in-css" tabindex="-1"><code>v-bind()</code> in CSS <a class="header-anchor" href="#v-bind-in-css" aria-label="Permalink to &quot;`v-bind()` in CSS {#v-bind-in-css}&quot;">​</a></h2><p>SFC <code>&lt;style&gt;</code> tags support linking CSS values to dynamic component state using the <code>v-bind</code> CSS function:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;">&gt;hello&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      color: </span><span style="color:#9ECBFF;">&#39;red&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">.text</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#79B8FF;">  color</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">v-bind</span><span style="color:#E1E4E8;">(color);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>The syntax works with <a href="./sfc-script-setup.html"><code>&lt;script setup&gt;</code></a>, and supports JavaScript expressions (must be wrapped in quotes):</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> theme</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    color: </span><span style="color:#9ECBFF;">&#39;red&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;hello&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#B392F0;"> scoped</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#79B8FF;">  color</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">v-bind</span><span style="color:#E1E4E8;">(&#39;theme.color&#39;);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>The actual value will be compiled into a hashed CSS custom property, so the CSS is still static. The custom property will be applied to the component&#39;s root element via inline styles and reactively updated if the source value changes.</p>',42)];const t=s(o,[["render",function(s,n,e,o,t,c){return l(),a("div",null,p)}]]);export{e as __pageData,t as default};
