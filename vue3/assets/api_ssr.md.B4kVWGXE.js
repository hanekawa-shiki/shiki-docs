import{_ as s,c as n,o as a,b as e}from"./chunks/framework.B9NywAPp.js";const l=JSON.parse('{"title":"Server-Side Rendering API","description":"","frontmatter":{},"headers":[{"level":2,"title":"renderToString()","slug":"rendertostring","link":"#rendertostring","children":[]},{"level":2,"title":"renderToNodeStream()","slug":"rendertonodestream","link":"#rendertonodestream","children":[]},{"level":2,"title":"pipeToNodeWritable()","slug":"pipetonodewritable","link":"#pipetonodewritable","children":[]},{"level":2,"title":"renderToWebStream()","slug":"rendertowebstream","link":"#rendertowebstream","children":[]},{"level":2,"title":"pipeToWebWritable()","slug":"pipetowebwritable","link":"#pipetowebwritable","children":[]},{"level":2,"title":"renderToSimpleStream()","slug":"rendertosimplestream","link":"#rendertosimplestream","children":[]},{"level":2,"title":"useSSRContext()","slug":"usessrcontext","link":"#usessrcontext","children":[]}],"relativePath":"api/ssr.md","filePath":"api/ssr.md"}'),p={name:"api/ssr.md"},o=[e('<h1 id="server-side-rendering-api" tabindex="-1">Server-Side Rendering API <a class="header-anchor" href="#server-side-rendering-api" aria-label="Permalink to &quot;Server-Side Rendering API {#server-side-rendering-api}&quot;">​</a></h1><h2 id="rendertostring" tabindex="-1">renderToString() <a class="header-anchor" href="#rendertostring" aria-label="Permalink to &quot;renderToString() {#rendertostring}&quot;">​</a></h2><ul><li><p><strong>Exported from <code>vue/server-renderer</code></strong></p></li><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> renderToString</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#FFAB70;">  input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  context</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> SSRContext</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createSSRApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { renderToString } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue/server-renderer&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createSSRApp</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({ msg: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;"> }),</span></span>\n<span class="line"><span style="color:#E1E4E8;">  template: </span><span style="color:#9ECBFF;">`&lt;div&gt;{{ msg }}&lt;/div&gt;`</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">;(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> html</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> renderToString</span><span style="color:#E1E4E8;">(app)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(html)</span></span>\n<span class="line"><span style="color:#E1E4E8;">})()</span></span></code></pre></div><h3 id="ssr-context" tabindex="-1">SSR Context <a class="header-anchor" href="#ssr-context" aria-label="Permalink to &quot;SSR Context {#ssr-context}&quot;">​</a></h3><p>You can pass an optional context object, which can be used to record additional data during the render, for example <a href="/guide/scaling-up/ssr.html#teleports">accessing content of Teleports</a>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> ctx</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {}</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> html</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> renderToString</span><span style="color:#E1E4E8;">(app, ctx)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(ctx.teleports) </span><span style="color:#6A737D;">// { &#39;#teleported&#39;: &#39;teleported content&#39; }</span></span></code></pre></div><p>Most other SSR APIs on this page also optionally accept a context object. The context object can be accessed in component code via the <a href="#usessrcontext">useSSRContext</a> helper.</p></li><li><p><strong>See also</strong> <a href="/guide/scaling-up/ssr.html">Guide - Server-Side Rendering</a></p></li></ul><h2 id="rendertonodestream" tabindex="-1">renderToNodeStream() <a class="header-anchor" href="#rendertonodestream" aria-label="Permalink to &quot;renderToNodeStream() {#rendertonodestream}&quot;">​</a></h2><p>Renders input as a <a href="https://nodejs.org/api/stream.html#stream_class_stream_readable" target="_blank" rel="noreferrer">Node.js Readable stream</a>.</p><ul><li><p><strong>Exported from <code>vue/server-renderer</code></strong></p></li><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> renderToNodeStream</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#FFAB70;">  input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  context</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> SSRContext</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Readable</span></span></code></pre></div></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// inside a Node.js http handler</span></span>\n<span class="line"><span style="color:#B392F0;">renderToNodeStream</span><span style="color:#E1E4E8;">(app).</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(res)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>This method is not supported in the ESM build of <code>vue/server-renderer</code>, which is decoupled from Node.js environments. Use <a href="#pipetonodewritable"><code>pipeToNodeWritable</code></a> instead.</p></div></li></ul><h2 id="pipetonodewritable" tabindex="-1">pipeToNodeWritable() <a class="header-anchor" href="#pipetonodewritable" aria-label="Permalink to &quot;pipeToNodeWritable() {#pipetonodewritable}&quot;">​</a></h2><p>Render and pipe to an existing <a href="https://nodejs.org/api/stream.html#stream_writable_streams" target="_blank" rel="noreferrer">Node.js Writable stream</a> instance.</p><ul><li><p><strong>Exported from <code>vue/server-renderer</code></strong></p></li><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> pipeToNodeWritable</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#FFAB70;">  input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  context</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> SSRContext</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {},</span></span>\n<span class="line"><span style="color:#FFAB70;">  writable</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Writable</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// inside a Node.js http handler</span></span>\n<span class="line"><span style="color:#B392F0;">pipeToNodeWritable</span><span style="color:#E1E4E8;">(app, {}, res)</span></span></code></pre></div></li></ul><h2 id="rendertowebstream" tabindex="-1">renderToWebStream() <a class="header-anchor" href="#rendertowebstream" aria-label="Permalink to &quot;renderToWebStream() {#rendertowebstream}&quot;">​</a></h2><p>Renders input as a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API" target="_blank" rel="noreferrer">Web ReadableStream</a>.</p><ul><li><p><strong>Exported from <code>vue/server-renderer</code></strong></p></li><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> renderToWebStream</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#FFAB70;">  input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  context</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> SSRContext</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ReadableStream</span></span></code></pre></div></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// inside an environment with ReadableStream support</span></span>\n<span class="line"><span style="color:#F97583;">return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Response</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">renderToWebStream</span><span style="color:#E1E4E8;">(app))</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>In environments that do not expose <code>ReadableStream</code> constructor in the global scope, <a href="#pipetowebwritable"><code>pipeToWebWritable()</code></a> should be used instead.</p></div></li></ul><h2 id="pipetowebwritable" tabindex="-1">pipeToWebWritable() <a class="header-anchor" href="#pipetowebwritable" aria-label="Permalink to &quot;pipeToWebWritable() {#pipetowebwritable}&quot;">​</a></h2><p>Render and pipe to an existing <a href="https://developer.mozilla.org/en-US/docs/Web/API/WritableStream" target="_blank" rel="noreferrer">Web WritableStream</a> instance.</p><ul><li><p><strong>Exported from <code>vue/server-renderer</code></strong></p></li><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> pipeToWebWritable</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#FFAB70;">  input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  context</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> SSRContext</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {},</span></span>\n<span class="line"><span style="color:#FFAB70;">  writable</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> WritableStream</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>Example</strong></p><p>This is typically used in combination with <a href="https://developer.mozilla.org/en-US/docs/Web/API/TransformStream" target="_blank" rel="noreferrer"><code>TransformStream</code></a>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// TransformStream is available in environments such as CloudFlare workers.</span></span>\n<span class="line"><span style="color:#6A737D;">// in Node.js, TransformStream needs to be explicitly imported from &#39;stream/web&#39;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">readable</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">writable</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> TransformStream</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#B392F0;">pipeToWebWritable</span><span style="color:#E1E4E8;">(app, {}, writable)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Response</span><span style="color:#E1E4E8;">(readable)</span></span></code></pre></div></li></ul><h2 id="rendertosimplestream" tabindex="-1">renderToSimpleStream() <a class="header-anchor" href="#rendertosimplestream" aria-label="Permalink to &quot;renderToSimpleStream() {#rendertosimplestream}&quot;">​</a></h2><p>Renders input in streaming mode using a simple readable interface.</p><ul><li><p><strong>Exported from <code>vue/server-renderer</code></strong></p></li><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> renderToSimpleStream</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#FFAB70;">  input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  context</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> SSRContext</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  options</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> SimpleReadable</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> SimpleReadable</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> SimpleReadable</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  push</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">content</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"><span style="color:#B392F0;">  destroy</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">renderToSimpleStream</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">  app,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  {},</span></span>\n<span class="line"><span style="color:#E1E4E8;">  {</span></span>\n<span class="line"><span style="color:#B392F0;">    push</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (chunk </span><span style="color:#F97583;">===</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">        // done</span></span>\n<span class="line"><span style="color:#B392F0;">        console</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`render complete: ${</span><span style="color:#E1E4E8;">res</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        res </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#B392F0;">    destroy</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">      // error encountered</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre></div></li></ul><h2 id="usessrcontext" tabindex="-1">useSSRContext() <a class="header-anchor" href="#usessrcontext" aria-label="Permalink to &quot;useSSRContext() {#usessrcontext}&quot;">​</a></h2><p>A runtime API used to retrieve the context object passed to <code>renderToString()</code> or other server render APIs.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useSSRContext</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;&gt;()</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span></span></code></pre></div></li><li><p><strong>Example</strong></p><p>The retrieved context can be used to attach information that is needed for rendering the final HTML (e.g. head metadata).</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useSSRContext } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// make sure to only call it during SSR</span></span>\n<span class="line"><span style="color:#6A737D;">// https://vitejs.dev/guide/ssr.html#conditional-logic</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.env.</span><span style="color:#79B8FF;">SSR</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> ctx</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useSSRContext</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#6A737D;">  // ...attach properties to the context</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul>',21)];const t=s(p,[["render",function(s,e,l,p,t,r){return a(),n("div",null,o)}]]);export{l as __pageData,t as default};
