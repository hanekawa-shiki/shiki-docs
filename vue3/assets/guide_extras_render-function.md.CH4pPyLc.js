import{_ as s,c as n,o as a,b as l}from"./chunks/framework.B9NywAPp.js";const p=JSON.parse('{"title":"Render Functions & JSX","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"Basic Usage","slug":"basic-usage","link":"#basic-usage","children":[{"level":3,"title":"Creating Vnodes","slug":"creating-vnodes","link":"#creating-vnodes","children":[]},{"level":3,"title":"Declaring Render Functions","slug":"declaring-render-functions","link":"#declaring-render-functions","children":[]},{"level":3,"title":"Vnodes Must Be Unique","slug":"vnodes-must-be-unique","link":"#vnodes-must-be-unique","children":[]}]},{"level":2,"title":"JSX / TSX","slug":"jsx-tsx","link":"#jsx-tsx","children":[{"level":3,"title":"JSX Type Inference","slug":"jsx-type-inference","link":"#jsx-type-inference","children":[]}]},{"level":2,"title":"Render Function Recipes","slug":"render-function-recipes","link":"#render-function-recipes","children":[{"level":3,"title":"v-if","slug":"v-if","link":"#v-if","children":[]},{"level":3,"title":"v-for","slug":"v-for","link":"#v-for","children":[]},{"level":3,"title":"v-on","slug":"v-on","link":"#v-on","children":[]},{"level":3,"title":"Components","slug":"components","link":"#components","children":[]},{"level":3,"title":"Rendering Slots","slug":"rendering-slots","link":"#rendering-slots","children":[]},{"level":3,"title":"Passing Slots","slug":"passing-slots","link":"#passing-slots","children":[]},{"level":3,"title":"Scoped Slots","slug":"scoped-slots","link":"#scoped-slots","children":[]},{"level":3,"title":"Built-in Components","slug":"built-in-components","link":"#built-in-components","children":[]},{"level":3,"title":"v-model","slug":"v-model","link":"#v-model","children":[]},{"level":3,"title":"Custom Directives","slug":"custom-directives","link":"#custom-directives","children":[]},{"level":3,"title":"Template Refs","slug":"template-refs","link":"#template-refs","children":[]}]},{"level":2,"title":"Functional Components","slug":"functional-components","link":"#functional-components","children":[{"level":3,"title":"Typing Functional Components","slug":"typing-functional-components","link":"#typing-functional-components","children":[]}]}],"relativePath":"guide/extras/render-function.md","filePath":"guide/extras/render-function.md"}'),o={name:"guide/extras/render-function.md"},e=[l('<h1 id="render-functions-jsx" tabindex="-1">Render Functions &amp; JSX <a class="header-anchor" href="#render-functions-jsx" aria-label="Permalink to &quot;Render Functions &amp; JSX {#render-functions-jsx}&quot;">​</a></h1><p>Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That&#39;s where we can use the <strong>render function</strong>.</p><blockquote><p>If you are new to the concept of virtual DOM and render functions, make sure to read the <a href="/guide/extras/rendering-mechanism.html">Rendering Mechanism</a> chapter first.</p></blockquote><h2 id="basic-usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage" aria-label="Permalink to &quot;Basic Usage {#basic-usage}&quot;">​</a></h2><h3 id="creating-vnodes" tabindex="-1">Creating Vnodes <a class="header-anchor" href="#creating-vnodes" aria-label="Permalink to &quot;Creating Vnodes {#creating-vnodes}&quot;">​</a></h3><p>Vue provides an <code>h()</code> function for creating vnodes:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> vnode</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">  &#39;div&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// type</span></span>\n<span class="line"><span style="color:#E1E4E8;">  { id: </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">, class: </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#6A737D;">// props</span></span>\n<span class="line"><span style="color:#E1E4E8;">  [</span></span>\n<span class="line"><span style="color:#6A737D;">    /* children */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ]</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre></div><p><code>h()</code> is short for <strong>hyperscript</strong> - which means &quot;JavaScript that produces HTML (hypertext markup language)&quot;. This name is inherited from conventions shared by many virtual DOM implementations. A more descriptive name could be <code>createVnode()</code>, but a shorter name helps when you have to call this function many times in a render function.</p><p>The <code>h()</code> function is designed to be very flexible:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// all arguments except the type are optional</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { id: </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// both attributes and properties can be used in props</span></span>\n<span class="line"><span style="color:#6A737D;">// Vue automatically picks the right way to assign it</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { class: </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">, innerHTML: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// props modifiers such as `.prop` and `.attr` can be added</span></span>\n<span class="line"><span style="color:#6A737D;">// with `.` and `^` prefixes respectively</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { </span><span style="color:#9ECBFF;">&#39;.name&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;some-name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;^width&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;100&#39;</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// class and style have the same object / array</span></span>\n<span class="line"><span style="color:#6A737D;">// value support that they have in templates</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { class: [foo, { bar }], style: { color: </span><span style="color:#9ECBFF;">&#39;red&#39;</span><span style="color:#E1E4E8;"> } })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// event listeners should be passed as onXxx</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { </span><span style="color:#B392F0;">onClick</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {} })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// children can be a string</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { id: </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// props can be omitted when there are no props</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, [</span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">)])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// children array can contain mixed vnodes and strings</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, [</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">)])</span></span></code></pre></div><p>The resulting vnode has the following shape:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> vnode</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { id: </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;"> }, [])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">vnode.type </span><span style="color:#6A737D;">// &#39;div&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">vnode.props </span><span style="color:#6A737D;">// { id: &#39;foo&#39; }</span></span>\n<span class="line"><span style="color:#E1E4E8;">vnode.children </span><span style="color:#6A737D;">// []</span></span>\n<span class="line"><span style="color:#E1E4E8;">vnode.key </span><span style="color:#6A737D;">// null</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Note</p><p>The full <code>VNode</code> interface contains many other internal properties, but it is strongly recommended to avoid relying on any properties other than the ones listed here. This avoids unintended breakage in case the internal properties are changed.</p></div><h3 id="declaring-render-functions" tabindex="-1">Declaring Render Functions <a class="header-anchor" href="#declaring-render-functions" aria-label="Permalink to &quot;Declaring Render Functions {#declaring-render-functions}&quot;">​</a></h3><div class="composition-api"><p>When using templates with Composition API, the return value of the <code>setup()</code> hook is used to expose data to the template. When using render functions, however, we can directly return the render function instead:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, h } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>\n<span class="line"><span style="color:#6A737D;">    /* ... */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // return the render function</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, props.msg </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> count.value)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>The render function is declared inside <code>setup()</code> so it naturally has access to the props and any reactive state declared in the same scope.</p><p>In addition to returning a single vnode, you can also return strings or arrays:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#9ECBFF;"> &#39;hello world!&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">    // use an array to return multiple root nodes</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span></span>\n<span class="line"><span style="color:#B392F0;">      h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#B392F0;">      h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#B392F0;">      h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Make sure to return a function instead of directly returning values! The <code>setup()</code> function is called only once per component, while the returned render function will be called multiple times.</p></div></div><div class="options-api"><p>We can declare render functions using the <code>render</code> option:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      msg: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#B392F0;">  render</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.msg)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>The <code>render()</code> function has access to the component instance via <code>this</code>.</p><p>In addition to returning a single vnode, you can also return strings or arrays:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  render</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#9ECBFF;"> &#39;hello world!&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  render</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">    // use an array to return multiple root nodes</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> [</span></span>\n<span class="line"><span style="color:#B392F0;">      h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#B392F0;">      h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#B392F0;">      h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><p>If a render function component doesn&#39;t need any instance state, they can also be declared directly as a function for brevity:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> Hello</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#9ECBFF;"> &#39;hello world!&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>That&#39;s right, this is a valid Vue component! See <a href="#functional-components">Functional Components</a> for more details on this syntax.</p><h3 id="vnodes-must-be-unique" tabindex="-1">Vnodes Must Be Unique <a class="header-anchor" href="#vnodes-must-be-unique" aria-label="Permalink to &quot;Vnodes Must Be Unique {#vnodes-must-be-unique}&quot;">​</a></h3><p>All vnodes in the component tree must be unique. That means the following render function is invalid:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> render</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> p</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;p&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hi&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, [</span></span>\n<span class="line"><span style="color:#6A737D;">    // Yikes - duplicate vnodes!</span></span>\n<span class="line"><span style="color:#E1E4E8;">    p,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    p</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ])</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>If you really want to duplicate the same element/component many times, you can do so with a factory function. For example, the following render function is a perfectly valid way of rendering 20 identical paragraphs:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> render</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">    &#39;div&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">({ length: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">      return</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;p&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hi&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    })</span></span>\n<span class="line"><span style="color:#E1E4E8;">  )</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="jsx-tsx" tabindex="-1">JSX / TSX <a class="header-anchor" href="#jsx-tsx" aria-label="Permalink to &quot;JSX / TSX {#jsx-tsx}&quot;">​</a></h2><p><a href="https://facebook.github.io/jsx/" target="_blank" rel="noreferrer">JSX</a> is an XML-like extension to JavaScript that allows us to write code like this:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> vnode</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;hello&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Inside JSX expressions, use curly braces to embed dynamic values:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> vnode</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{dynamicId}&gt;hello, {userName}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>create-vue</code> and Vue CLI both have options for scaffolding projects with pre-configured JSX support. If you are configuring JSX manually, please refer to the documentation of <a href="https://github.com/vuejs/jsx-next" target="_blank" rel="noreferrer"><code>@vue/babel-plugin-jsx</code></a> for details.</p><p>Although first introduced by React, JSX actually has no defined runtime semantics and can be compiled into various different outputs. If you have worked with JSX before, do note that <strong>Vue JSX transform is different from React&#39;s JSX transform</strong>, so you can&#39;t use React&#39;s JSX transform in Vue applications. Some notable differences from React JSX include:</p><ul><li>You can use HTML attributes such as <code>class</code> and <code>for</code> as props - no need to use <code>className</code> or <code>htmlFor</code>.</li><li>Passing children to components (i.e. slots) <a href="#passing-slots">works differently</a>.</li></ul><p>Vue&#39;s type definition also provides type inference for TSX usage. When using TSX, make sure to specify <code>&quot;jsx&quot;: &quot;preserve&quot;</code> in <code>tsconfig.json</code> so that TypeScript leaves the JSX syntax intact for Vue JSX transform to process.</p><h3 id="jsx-type-inference" tabindex="-1">JSX Type Inference <a class="header-anchor" href="#jsx-type-inference" aria-label="Permalink to &quot;JSX Type Inference {#jsx-type-inference}&quot;">​</a></h3><p>Similar to the transform, Vue&#39;s JSX also needs different type definitions.</p><p>Starting in Vue 3.4, Vue no longer implicitly registers the global <code>JSX</code> namespace. To instruct TypeScript to use Vue&#39;s JSX type definitions, make sure to include the following in your <code>tsconfig.json</code>:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#79B8FF;">    &quot;jsx&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;preserve&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#79B8FF;">    &quot;jsxImportSource&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;vue&quot;</span></span>\n<span class="line"><span style="color:#6A737D;">    // ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>You can also opt-in per file by adding a <code>/* @jsxImportSource vue */</code> comment at the top of the file.</p><p>If there is code that depends on the presence of the global <code>JSX</code> namespace, you can retain the exact pre-3.4 global behavior by explicitly importing or referencing <code>vue/jsx</code> in your project, which registers the global <code>JSX</code> namespace.</p><h2 id="render-function-recipes" tabindex="-1">Render Function Recipes <a class="header-anchor" href="#render-function-recipes" aria-label="Permalink to &quot;Render Function Recipes {#render-function-recipes}&quot;">​</a></h2><p>Below we will provide some common recipes for implementing template features as their equivalent render functions / JSX.</p><h3 id="v-if" tabindex="-1"><code>v-if</code> <a class="header-anchor" href="#v-if" aria-label="Permalink to &quot;`v-if` {#v-if}&quot;">​</a></h3><p>Template:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">ok</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;yes&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">span</span><span style="color:#B392F0;"> v-else</span><span style="color:#E1E4E8;">&gt;no&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Equivalent render function / JSX:</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, [ok.value </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;yes&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;no&#39;</span><span style="color:#E1E4E8;">)])</span></span></code></pre></div><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;{ok.value </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;yes&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;no&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ok </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;yes&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;no&#39;</span><span style="color:#E1E4E8;">)])</span></span></code></pre></div><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ok </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;yes&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;no&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><h3 id="v-for" tabindex="-1"><code>v-for</code> <a class="header-anchor" href="#v-for" aria-label="Permalink to &quot;`v-for` {#v-for}&quot;">​</a></h3><p>Template:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">li</span><span style="color:#B392F0;"> v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">{ id, text } </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> items</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    {{ text }}</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Equivalent render function / JSX:</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">  &#39;ul&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#6A737D;">  // assuming `items` is a ref with array value</span></span>\n<span class="line"><span style="color:#E1E4E8;">  items.value.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(({ </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;li&#39;</span><span style="color:#E1E4E8;">, { key: id }, text)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  })</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre></div><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  {items.value.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(({ </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">li</span><span style="color:#B392F0;"> key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{id}&gt;{text}&lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  })}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">  &#39;ul&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#79B8FF;">  this</span><span style="color:#E1E4E8;">.items.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(({ </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;li&#39;</span><span style="color:#E1E4E8;">, { key: id }, text)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  })</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre></div><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  {</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.items.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(({ </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">li</span><span style="color:#B392F0;"> key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{id}&gt;{text}&lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  })}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><h3 id="v-on" tabindex="-1"><code>v-on</code> <a class="header-anchor" href="#v-on" aria-label="Permalink to &quot;`v-on` {#v-on}&quot;">​</a></h3><p>Props with names that start with <code>on</code> followed by an uppercase letter are treated as event listeners. For example, <code>onClick</code> is the equivalent of <code>@click</code> in templates.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">  &#39;button&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  {</span></span>\n<span class="line"><span style="color:#B392F0;">    onClick</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">      /* ... */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#9ECBFF;">  &#39;Click Me&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre></div><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span></span>\n<span class="line"><span style="color:#B392F0;">  onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">    /* ... */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  Click Me</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="event-modifiers" tabindex="-1">Event Modifiers <a class="header-anchor" href="#event-modifiers" aria-label="Permalink to &quot;Event Modifiers {#event-modifiers}&quot;">​</a></h4><p>For the <code>.passive</code>, <code>.capture</code>, and <code>.once</code> event modifiers, they can be concatenated after the event name using camelCase.</p><p>For example:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;input&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#B392F0;">  onClickCapture</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">    /* listener in capture mode */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#B392F0;">  onKeyupOnce</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">    /* triggers only once */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#B392F0;">  onMouseoverOnceCapture</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">    /* once + capture */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">input</span></span>\n<span class="line"><span style="color:#B392F0;">  onClickCapture</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}}</span></span>\n<span class="line"><span style="color:#B392F0;">  onKeyupOnce</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}}</span></span>\n<span class="line"><span style="color:#B392F0;">  onMouseoverOnceCapture</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}}</span></span>\n<span class="line"><span style="color:#E1E4E8;">/&gt;</span></span></code></pre></div><p>For other event and key modifiers, the <a href="/api/render-function.html#withmodifiers"><code>withModifiers</code></a> helper can be used:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { withModifiers } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  onClick: </span><span style="color:#B392F0;">withModifiers</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}, [</span><span style="color:#9ECBFF;">&#39;self&#39;</span><span style="color:#E1E4E8;">])</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">withModifiers</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}, [</span><span style="color:#9ECBFF;">&#39;self&#39;</span><span style="color:#E1E4E8;">])} /&gt;</span></span></code></pre></div><h3 id="components" tabindex="-1">Components <a class="header-anchor" href="#components" aria-label="Permalink to &quot;Components {#components}&quot;">​</a></h3><p>To create a vnode for a component, the first argument passed to <code>h()</code> should be the component definition. This means when using render functions, it is unnecessary to register components - you can just use the imported components directly:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Foo </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./Foo.vue&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Bar </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./Bar.jsx&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> render</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, [</span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(Foo), </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(Bar)])</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> render</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">Foo</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">Bar</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  )</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>As we can see, <code>h</code> can work with components imported from any file format as long as it&#39;s a valid Vue component.</p><p>Dynamic components are straightforward with render functions:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Foo </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./Foo.vue&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Bar </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./Bar.jsx&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> render</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> ok.value </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(Foo) </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(Bar)</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> render</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> ok.value </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">Foo</span><span style="color:#E1E4E8;"> /&gt; </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">Bar</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>If a component is registered by name and cannot be imported directly (for example, globally registered by a library), it can be programmatically resolved by using the <a href="/api/render-function.html#resolvecomponent"><code>resolveComponent()</code></a> helper.</p><h3 id="rendering-slots" tabindex="-1">Rendering Slots <a class="header-anchor" href="#rendering-slots" aria-label="Permalink to &quot;Rendering Slots {#rendering-slots}&quot;">​</a></h3><div class="composition-api"><p>In render functions, slots can be accessed from the <code>setup()</code> context. Each slot on the <code>slots</code> object is a <strong>function that returns an array of vnodes</strong>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: [</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">, { </span><span style="color:#FFAB70;">slots</span><span style="color:#E1E4E8;"> }) {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span></span>\n<span class="line"><span style="color:#6A737D;">      // default slot:</span></span>\n<span class="line"><span style="color:#6A737D;">      // &lt;div&gt;&lt;slot /&gt;&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">      h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, slots.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">()),</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">      // named slot:</span></span>\n<span class="line"><span style="color:#6A737D;">      // &lt;div&gt;&lt;slot name=&quot;footer&quot; :text=&quot;message&quot; /&gt;&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">      h</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">        &#39;div&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        slots.</span><span style="color:#B392F0;">footer</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">          text: props.message</span></span>\n<span class="line"><span style="color:#E1E4E8;">        })</span></span>\n<span class="line"><span style="color:#E1E4E8;">      )</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>JSX equivalent:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// default</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;{slots.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">()}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// named</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;{slots.</span><span style="color:#B392F0;">footer</span><span style="color:#E1E4E8;">({ text: props.message })}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><div class="options-api"><p>In render functions, slots can be accessed from <a href="/api/component-instance.html#slots"><code>this.$slots</code></a>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: [</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#B392F0;">  render</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> [</span></span>\n<span class="line"><span style="color:#6A737D;">      // &lt;div&gt;&lt;slot /&gt;&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">      h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$slots.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">()),</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">      // &lt;div&gt;&lt;slot name=&quot;footer&quot; :text=&quot;message&quot; /&gt;&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">      h</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">        &#39;div&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.$slots.</span><span style="color:#B392F0;">footer</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">          text: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.message</span></span>\n<span class="line"><span style="color:#E1E4E8;">        })</span></span>\n<span class="line"><span style="color:#E1E4E8;">      )</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>JSX equivalent:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// &lt;div&gt;&lt;slot /&gt;&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$slots.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">()}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// &lt;div&gt;&lt;slot name=&quot;footer&quot; :text=&quot;message&quot; /&gt;&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$slots.</span><span style="color:#B392F0;">footer</span><span style="color:#E1E4E8;">({ text: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.message })}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><h3 id="passing-slots" tabindex="-1">Passing Slots <a class="header-anchor" href="#passing-slots" aria-label="Permalink to &quot;Passing Slots {#passing-slots}&quot;">​</a></h3><p>Passing children to components works a bit differently from passing children to elements. Instead of an array, we need to pass either a slot function, or an object of slot functions. Slot functions can return anything a normal render function can return - which will always be normalized to arrays of vnodes when accessed in the child component.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// single default slot</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(MyComponent, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#9ECBFF;"> &#39;hello&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// named slots</span></span>\n<span class="line"><span style="color:#6A737D;">// notice the `null` is required to avoid</span></span>\n<span class="line"><span style="color:#6A737D;">// the slots object being treated as props</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(MyComponent, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#B392F0;">  default</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#9ECBFF;"> &#39;default slot&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#B392F0;">  foo</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#B392F0;">  bar</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;one&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;two&#39;</span><span style="color:#E1E4E8;">)]</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>JSX equivalent:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// default</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#E1E4E8;">&gt;{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#9ECBFF;"> &#39;hello&#39;</span><span style="color:#E1E4E8;">}&lt;/</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// named</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#E1E4E8;">&gt;{{</span></span>\n<span class="line"><span style="color:#B392F0;">  default</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#9ECBFF;"> &#39;default slot&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#B392F0;">  foo</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;foo&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;,</span></span>\n<span class="line"><span style="color:#B392F0;">  bar</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [&lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;one&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;, &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;two&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;]</span></span>\n<span class="line"><span style="color:#E1E4E8;">}}&lt;/</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Passing slots as functions allows them to be invoked lazily by the child component. This leads to the slot&#39;s dependencies being tracked by the child instead of the parent, which results in more accurate and efficient updates.</p><h3 id="scoped-slots" tabindex="-1">Scoped Slots <a class="header-anchor" href="#scoped-slots" aria-label="Permalink to &quot;Scoped Slots {#scoped-slots}&quot;">​</a></h3><p>To render a scoped slot in the parent component, a slot is passed to the child. Notice how the slot now has a parameter <code>text</code>. The slot will be called in the child component and the data from the child component will be passed up to the parent component.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// parent component</span></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(MyComp, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#B392F0;">      default</span><span style="color:#E1E4E8;">: ({ </span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;p&#39;</span><span style="color:#E1E4E8;">, text)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    })</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>Remember to pass <code>null</code> so the slots will not be treated as props.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// child component</span></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">, { </span><span style="color:#FFAB70;">slots</span><span style="color:#E1E4E8;"> }) {</span></span>\n<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> text</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hi&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, slots.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">({ text: text.value }))</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>JSX equivalent:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#E1E4E8;">&gt;{{</span></span>\n<span class="line"><span style="color:#B392F0;">  default</span><span style="color:#E1E4E8;">: ({ </span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;{ text }&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;  </span></span>\n<span class="line"><span style="color:#E1E4E8;">}}&lt;/</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="built-in-components" tabindex="-1">Built-in Components <a class="header-anchor" href="#built-in-components" aria-label="Permalink to &quot;Built-in Components {#built-in-components}&quot;">​</a></h3><p><a href="/api/built-in-components.html">Built-in components</a> such as <code>&lt;KeepAlive&gt;</code>, <code>&lt;Transition&gt;</code>, <code>&lt;TransitionGroup&gt;</code>, <code>&lt;Teleport&gt;</code> and <code>&lt;Suspense&gt;</code> must be imported for use in render functions:</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h, KeepAlive, Teleport, Transition, TransitionGroup } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(Transition, { mode: </span><span style="color:#9ECBFF;">&#39;out-in&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h, KeepAlive, Teleport, Transition, TransitionGroup } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  render</span><span style="color:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(Transition, { mode: </span><span style="color:#9ECBFF;">&#39;out-in&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><h3 id="v-model" tabindex="-1"><code>v-model</code> <a class="header-anchor" href="#v-model" aria-label="Permalink to &quot;`v-model` {#v-model}&quot;">​</a></h3><p>The <code>v-model</code> directive is expanded to <code>modelValue</code> and <code>onUpdate:modelValue</code> props during template compilation—we will have to provide these props ourselves:</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: [</span><span style="color:#9ECBFF;">&#39;modelValue&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">  emits: [</span><span style="color:#9ECBFF;">&#39;update:modelValue&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">, { </span><span style="color:#FFAB70;">emit</span><span style="color:#E1E4E8;"> }) {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">      h</span><span style="color:#E1E4E8;">(SomeComponent, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        modelValue: props.modelValue,</span></span>\n<span class="line"><span style="color:#9ECBFF;">        &#39;onUpdate:modelValue&#39;</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;update:modelValue&#39;</span><span style="color:#E1E4E8;">, value)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      })</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: [</span><span style="color:#9ECBFF;">&#39;modelValue&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">  emits: [</span><span style="color:#9ECBFF;">&#39;update:modelValue&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#B392F0;">  render</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(SomeComponent, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      modelValue: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.modelValue,</span></span>\n<span class="line"><span style="color:#9ECBFF;">      &#39;onUpdate:modelValue&#39;</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;update:modelValue&#39;</span><span style="color:#E1E4E8;">, value)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    })</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><h3 id="custom-directives" tabindex="-1">Custom Directives <a class="header-anchor" href="#custom-directives" aria-label="Permalink to &quot;Custom Directives {#custom-directives}&quot;">​</a></h3><p>Custom directives can be applied to a vnode using <a href="/api/render-function.html#withdirectives"><code>withDirectives</code></a>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h, withDirectives } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// a custom directive</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pin</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  mounted</span><span style="color:#E1E4E8;">() { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> },</span></span>\n<span class="line"><span style="color:#B392F0;">  updated</span><span style="color:#E1E4E8;">() { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// &lt;div v-pin:top.animate=&quot;200&quot;&gt;&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> vnode</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> withDirectives</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">), [</span></span>\n<span class="line"><span style="color:#E1E4E8;">  [pin, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;top&#39;</span><span style="color:#E1E4E8;">, { animate: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }]</span></span>\n<span class="line"><span style="color:#E1E4E8;">])</span></span></code></pre></div><p>If the directive is registered by name and cannot be imported directly, it can be resolved using the <a href="/api/render-function.html#resolvedirective"><code>resolveDirective</code></a> helper.</p><h3 id="template-refs" tabindex="-1">Template Refs <a class="header-anchor" href="#template-refs" aria-label="Permalink to &quot;Template Refs {#template-refs}&quot;">​</a></h3><div class="composition-api"><p>With the Composition API, template refs are created by passing the <code>ref()</code> itself as a prop to the vnode:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h, ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> divEl</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // &lt;div ref=&quot;divEl&quot;&gt;</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { ref: divEl })</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="options-api"><p>With the Options API, template refs are created by passing the ref name as a string in the vnode props:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  render</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">    // &lt;div ref=&quot;divEl&quot;&gt;</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { ref: </span><span style="color:#9ECBFF;">&#39;divEl&#39;</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><h2 id="functional-components" tabindex="-1">Functional Components <a class="header-anchor" href="#functional-components" aria-label="Permalink to &quot;Functional Components {#functional-components}&quot;">​</a></h2><p>Functional components are an alternative form of component that don&#39;t have any state of their own. They act like pure functions: props in, vnodes out. They are rendered without creating a component instance (i.e. no <code>this</code>), and without the usual component lifecycle hooks.</p><p>To create a functional component we use a plain function, rather than an options object. The function is effectively the <code>render</code> function for the component.</p><div class="composition-api"><p>The signature of a functional component is the same as the <code>setup()</code> hook:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> MyComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">, { </span><span style="color:#FFAB70;">slots</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">emit</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">attrs</span><span style="color:#E1E4E8;"> }) {</span></span>\n<span class="line"><span style="color:#6A737D;">  // ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="options-api"><p>As there is no <code>this</code> reference for a functional component, Vue will pass in the <code>props</code> as the first argument:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> MyComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">  // ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>The second argument, <code>context</code>, contains three properties: <code>attrs</code>, <code>emit</code>, and <code>slots</code>. These are equivalent to the instance properties <a href="/api/component-instance.html#attrs"><code>$attrs</code></a>, <a href="/api/component-instance.html#emit"><code>$emit</code></a>, and <a href="/api/component-instance.html#slots"><code>$slots</code></a> respectively.</p></div><p>Most of the usual configuration options for components are not available for functional components. However, it is possible to define <a href="/api/options-state.html#props"><code>props</code></a> and <a href="/api/options-state.html#emits"><code>emits</code></a> by adding them as properties:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">MyComponent.props </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;value&#39;</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#E1E4E8;">MyComponent.emits </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">]</span></span></code></pre></div><p>If the <code>props</code> option is not specified, then the <code>props</code> object passed to the function will contain all attributes, the same as <code>attrs</code>. The prop names will not be normalized to camelCase unless the <code>props</code> option is specified.</p><p>For functional components with explicit <code>props</code>, <a href="/guide/components/attrs.html">attribute fallthrough</a> works much the same as with normal components. However, for functional components that don&#39;t explicitly specify their <code>props</code>, only the <code>class</code>, <code>style</code>, and <code>onXxx</code> event listeners will be inherited from the <code>attrs</code> by default. In either case, <code>inheritAttrs</code> can be set to <code>false</code> to disable attribute inheritance:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">MyComponent.inheritAttrs </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> false</span></span></code></pre></div><p>Functional components can be registered and consumed just like normal components. If you pass a function as the first argument to <code>h()</code>, it will be treated as a functional component.</p><h3 id="typing-functional-components" tabindex="-1">Typing Functional Components<sup class="vt-badge ts"></sup> <a class="header-anchor" href="#typing-functional-components" aria-label="Permalink to &quot;Typing Functional Components&lt;sup class=&quot;vt-badge ts&quot; /&gt; {#typing-functional-components}&quot;">​</a></h3><p>Functional Components can be typed based on whether they are named or anonymous. <a href="https://github.com/vuejs/language-tools" target="_blank" rel="noreferrer">Vue - Official extension</a> also supports type checking properly typed functional components when consuming them in SFC templates.</p><p><strong>Named Functional Component</strong></p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { SetupContext } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> FComponentProps</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">  message</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Events</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  sendMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">message</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> FComponent</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#FFAB70;">  props</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> FComponentProps</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  context</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> SetupContext</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Events</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;sendMessage&#39;</span><span style="color:#E1E4E8;">, props.message)}&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        {props.message} {</span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  )</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">FComponent.props </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  message: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    type: String,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    required: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">FComponent.emits </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  sendMessage</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#F97583;"> typeof</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;string&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p><strong>Anonymous Functional Component</strong></p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { FunctionalComponent } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> FComponentProps</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">  message</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Events</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  sendMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">message</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> FComponent</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> FunctionalComponent</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">FComponentProps</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Events</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#FFAB70;">  props</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  context</span></span>\n<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;sendMessage&#39;</span><span style="color:#E1E4E8;">, props.message)}&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        {props.message} {</span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  )</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">FComponent.props </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  message: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    type: String,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    required: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">FComponent.emits </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  sendMessage</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#F97583;"> typeof</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;string&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div>',122)];const t=s(o,[["render",function(s,l,p,o,t,c){return a(),n("div",null,e)}]]);export{p as __pageData,t as default};
