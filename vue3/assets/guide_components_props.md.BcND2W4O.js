import{_ as s,c as a,a as n,x as l,s as p,b as e,I as o,o as t}from"./chunks/framework.B9NywAPp.js";const c=JSON.parse('{"title":"Props","description":"","frontmatter":{},"headers":[{"level":2,"title":"Props Declaration","slug":"props-declaration","link":"#props-declaration","children":[]},{"level":2,"title":"Prop Passing Details","slug":"prop-passing-details","link":"#prop-passing-details","children":[{"level":3,"title":"Prop Name Casing","slug":"prop-name-casing","link":"#prop-name-casing","children":[]},{"level":3,"title":"Static vs. Dynamic Props","slug":"static-vs-dynamic-props","link":"#static-vs-dynamic-props","children":[]},{"level":3,"title":"Passing Different Value Types","slug":"passing-different-value-types","link":"#passing-different-value-types","children":[]},{"level":3,"title":"Binding Multiple Properties Using an Object","slug":"binding-multiple-properties-using-an-object","link":"#binding-multiple-properties-using-an-object","children":[]}]},{"level":2,"title":"One-Way Data Flow","slug":"one-way-data-flow","link":"#one-way-data-flow","children":[{"level":3,"title":"Mutating Object / Array Props","slug":"mutating-object-array-props","link":"#mutating-object-array-props","children":[]}]},{"level":2,"title":"Prop Validation","slug":"prop-validation","link":"#prop-validation","children":[{"level":3,"title":"Runtime Type Checks","slug":"runtime-type-checks","link":"#runtime-type-checks","children":[]},{"level":3,"title":"Nullable Type","slug":"nullable-type","link":"#nullable-type","children":[]}]},{"level":2,"title":"Boolean Casting","slug":"boolean-casting","link":"#boolean-casting","children":[]}],"relativePath":"guide/components/props.md","filePath":"guide/components/props.md"}'),i={name:"guide/components/props.md"},r=n("h1",{id:"props",tabindex:"-1"},[p("Props "),n("a",{class:"header-anchor",href:"#props","aria-label":'Permalink to "Props {#props}"'},"​")],-1),E=n("blockquote",null,[n("p",null,[p("This page assumes you've already read the "),n("a",{href:"/guide/essentials/component-basics.html"},"Components Basics"),p(". Read that first if you are new to components.")])],-1),d={class:"options-api"},y=e('<h2 id="props-declaration" tabindex="-1">Props Declaration <a class="header-anchor" href="#props-declaration" aria-label="Permalink to &quot;Props Declaration {#props-declaration}&quot;">​</a></h2><p>Vue components require explicit props declaration so that Vue knows what external props passed to the component should be treated as fallthrough attributes (which will be discussed in <a href="/guide/components/attrs.html">its dedicated section</a>).</p><div class="composition-api"><p>In SFCs using <code>&lt;script setup&gt;</code>, props can be declared using the <code>defineProps()</code> macro:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(props.foo)</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>In non-<code>&lt;script setup&gt;</code> components, props are declared using the <a href="/api/options-state.html#props"><code>props</code></a> option:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: [</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">    // setup() receives props as the first argument.</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(props.foo)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>Notice the argument passed to <code>defineProps()</code> is the same as the value provided to the <code>props</code> options: the same props options API is shared between the two declaration styles.</p></div><div class="options-api"><p>Props are declared using the <a href="/api/options-state.html#props"><code>props</code></a> option:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: [</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#B392F0;">  created</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">    // props are exposed on `this`</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.foo)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><p>In addition to declaring props using an array of strings, we can also use the object syntax:</p><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    title: String,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    likes: Number</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// in &lt;script setup&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  title: String,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  likes: Number</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// in non-&lt;script setup&gt;</span></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    title: String,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    likes: Number</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><p>For each property in the object declaration syntax, the key is the name of the prop, while the value should be the constructor function of the expected type.</p><p>This not only documents your component, but will also warn other developers using your component in the browser console if they pass the wrong type. We will discuss more details about <a href="#prop-validation">prop validation</a> further down this page.</p><div class="options-api"><p>See also: <a href="/guide/typescript/options-api.html#typing-component-props">Typing Component Props</a> <sup class="vt-badge ts"></sup></p></div><div class="composition-api"><p>If you are using TypeScript with <code>&lt;script setup&gt;</code>, it&#39;s also possible to declare props using pure type annotations:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">&lt;{</span></span>\n<span class="line"><span style="color:#FFAB70;">  title</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#FFAB70;">  likes</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> number</span></span>\n<span class="line"><span style="color:#E1E4E8;">}&gt;()</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>More details: <a href="/guide/typescript/composition-api.html#typing-component-props">Typing Component Props</a> <sup class="vt-badge ts"></sup></p></div><h2 id="prop-passing-details" tabindex="-1">Prop Passing Details <a class="header-anchor" href="#prop-passing-details" aria-label="Permalink to &quot;Prop Passing Details {#prop-passing-details}&quot;">​</a></h2><h3 id="prop-name-casing" tabindex="-1">Prop Name Casing <a class="header-anchor" href="#prop-name-casing" aria-label="Permalink to &quot;Prop Name Casing {#prop-name-casing}&quot;">​</a></h3><p>We declare long prop names using camelCase because this avoids having to use quotes when using them as property keys, and allows us to reference them directly in template expressions because they are valid JavaScript identifiers:</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  greetingMessage: String</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    greetingMessage: String</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;{{ greetingMessage }}&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Technically, you can also use camelCase when passing props to a child component (except in <a href="/guide/essentials/component-basics.html#in-dom-template-parsing-caveats">in-DOM templates</a>). However, the convention is using kebab-case in all cases to align with HTML attributes:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#B392F0;"> greeting-message</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>We use <a href="/guide/components/registration.html#component-name-casing">PascalCase for component tags</a> when possible because it improves template readability by differentiating Vue components from native elements. However, there isn&#39;t as much practical benefit in using camelCase when passing props, so we choose to follow each language&#39;s conventions.</p><h3 id="static-vs-dynamic-props" tabindex="-1">Static vs. Dynamic Props <a class="header-anchor" href="#static-vs-dynamic-props" aria-label="Permalink to &quot;Static vs. Dynamic Props {#static-vs-dynamic-props}&quot;">​</a></h3><p>So far, you&#39;ve seen props passed as static values, like in:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BlogPost</span><span style="color:#B392F0;"> title</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;My journey with Vue&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>You&#39;ve also seen props assigned dynamically with <code>v-bind</code> or its <code>:</code> shortcut, such as in:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Dynamically assign the value of a variable --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BlogPost</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">post.title</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- Dynamically assign the value of a complex expression --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BlogPost</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">post.title </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &#39; by &#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> post.author.name</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><h3 id="passing-different-value-types" tabindex="-1">Passing Different Value Types <a class="header-anchor" href="#passing-different-value-types" aria-label="Permalink to &quot;Passing Different Value Types {#passing-different-value-types}&quot;">​</a></h3><p>In the two examples above, we happen to pass string values, but <em>any</em> type of value can be passed to a prop.</p><h4 id="number" tabindex="-1">Number <a class="header-anchor" href="#number" aria-label="Permalink to &quot;Number {#number}&quot;">​</a></h4><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Even though `42` is static, we need v-bind to tell Vue that --&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- this is a JavaScript expression rather than a string.       --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BlogPost</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">likes</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">42</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- Dynamically assign to the value of a variable. --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BlogPost</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">likes</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">post.likes</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><h4 id="boolean" tabindex="-1">Boolean <a class="header-anchor" href="#boolean" aria-label="Permalink to &quot;Boolean {#boolean}&quot;">​</a></h4><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Including the prop with no value will imply `true`. --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BlogPost</span><span style="color:#B392F0;"> is-published</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- Even though `false` is static, we need v-bind to tell Vue that --&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- this is a JavaScript expression rather than a string.          --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BlogPost</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is-published</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">false</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- Dynamically assign to the value of a variable. --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BlogPost</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is-published</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">post.isPublished</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><h4 id="array" tabindex="-1">Array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;Array {#array}&quot;">​</a></h4><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Even though the array is static, we need v-bind to tell Vue that --&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- this is a JavaScript expression rather than a string.            --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BlogPost</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">comment-ids</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">234</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">266</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">273</span><span style="color:#E1E4E8;">]</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- Dynamically assign to the value of a variable. --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BlogPost</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">comment-ids</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">post.commentIds</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><h4 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object {#object}&quot;">​</a></h4><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Even though the object is static, we need v-bind to tell Vue that --&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- this is a JavaScript expression rather than a string.             --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BlogPost</span></span>\n<span class="line"><span style="color:#E1E4E8;">  :</span><span style="color:#B392F0;">author</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;Veronica&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    company: </span><span style="color:#9ECBFF;">&#39;Veridian Dynamics&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span><span style="color:#9ECBFF;">&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- Dynamically assign to the value of a variable. --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BlogPost</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">author</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">post.author</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><h3 id="binding-multiple-properties-using-an-object" tabindex="-1">Binding Multiple Properties Using an Object <a class="header-anchor" href="#binding-multiple-properties-using-an-object" aria-label="Permalink to &quot;Binding Multiple Properties Using an Object {#binding-multiple-properties-using-an-object}&quot;">​</a></h3><p>If you want to pass all the properties of an object as props, you can use <a href="/guide/essentials/template-syntax.html#dynamically-binding-multiple-attributes"><code>v-bind</code> without an argument</a> (<code>v-bind</code> instead of <code>:prop-name</code>). For example, given a <code>post</code> object:</p><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      post: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        id: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;My Journey with Vue&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> post</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  id: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  title: </span><span style="color:#9ECBFF;">&#39;My Journey with Vue&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><p>The following template:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BlogPost</span><span style="color:#B392F0;"> v-bind</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">post</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>Will be equivalent to:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BlogPost</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">post.id</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">post.title</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><h2 id="one-way-data-flow" tabindex="-1">One-Way Data Flow <a class="header-anchor" href="#one-way-data-flow" aria-label="Permalink to &quot;One-Way Data Flow {#one-way-data-flow}&quot;">​</a></h2><p>All props form a <strong>one-way-down binding</strong> between the child property and the parent one: when the parent property updates, it will flow down to the child, but not the other way around. This prevents child components from accidentally mutating the parent&#39;s state, which can make your app&#39;s data flow harder to understand.</p><p>In addition, every time the parent component is updated, all props in the child component will be refreshed with the latest value. This means you should <strong>not</strong> attempt to mutate a prop inside a child component. If you do, Vue will warn you in the console:</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// ❌ warning, props are readonly!</span></span>\n<span class="line"><span style="color:#E1E4E8;">props.foo </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;bar&#39;</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: [</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#B392F0;">  created</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">    // ❌ warning, props are readonly!</span></span>\n<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.foo </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;bar&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><p>There are usually two cases where it&#39;s tempting to mutate a prop:</p><ol><li><p><strong>The prop is used to pass in an initial value; the child component wants to use it as a local data property afterwards.</strong> In this case, it&#39;s best to define a local data property that uses the prop as its initial value:</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;initialCounter&#39;</span><span style="color:#E1E4E8;">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// counter only uses props.initialCounter as the initial value;</span></span>\n<span class="line"><span style="color:#6A737D;">// it is disconnected from future prop updates.</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> counter</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(props.initialCounter)</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: [</span><span style="color:#9ECBFF;">&#39;initialCounter&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">      // counter only uses this.initialCounter as the initial value;</span></span>\n<span class="line"><span style="color:#6A737D;">      // it is disconnected from future prop updates.</span></span>\n<span class="line"><span style="color:#E1E4E8;">      counter: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.initialCounter</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div></li><li><p><strong>The prop is passed in as a raw value that needs to be transformed.</strong> In this case, it&#39;s best to define a computed property using the prop&#39;s value:</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;size&#39;</span><span style="color:#E1E4E8;">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// computed property that auto-updates when the prop changes</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> normalizedSize</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> computed</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> props.size.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">())</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: [</span><span style="color:#9ECBFF;">&#39;size&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">  computed: {</span></span>\n<span class="line"><span style="color:#6A737D;">    // computed property that auto-updates when the prop changes</span></span>\n<span class="line"><span style="color:#B392F0;">    normalizedSize</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">      return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.size.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div></li></ol><h3 id="mutating-object-array-props" tabindex="-1">Mutating Object / Array Props <a class="header-anchor" href="#mutating-object-array-props" aria-label="Permalink to &quot;Mutating Object / Array Props {#mutating-object-array-props}&quot;">​</a></h3><p>When objects and arrays are passed as props, while the child component cannot mutate the prop binding, it <strong>will</strong> be able to mutate the object or array&#39;s nested properties. This is because in JavaScript objects and arrays are passed by reference, and it is unreasonably expensive for Vue to prevent such mutations.</p><p>The main drawback of such mutations is that it allows the child component to affect parent state in a way that isn&#39;t obvious to the parent component, potentially making it more difficult to reason about the data flow in the future. As a best practice, you should avoid such mutations unless the parent and child are tightly coupled by design. In most cases, the child should <a href="/guide/components/events.html">emit an event</a> to let the parent perform the mutation.</p><h2 id="prop-validation" tabindex="-1">Prop Validation <a class="header-anchor" href="#prop-validation" aria-label="Permalink to &quot;Prop Validation {#prop-validation}&quot;">​</a></h2><p>Components can specify requirements for their props, such as the types you&#39;ve already seen. If a requirement is not met, Vue will warn you in the browser&#39;s JavaScript console. This is especially useful when developing a component that is intended to be used by others.</p><p>To specify prop validations, you can provide an object with validation requirements to the <span class="composition-api"><code>defineProps()</code> macro</span><span class="options-api"><code>props</code> option</span>, instead of an array of strings. For example:</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#6A737D;">  // Basic type check</span></span>\n<span class="line"><span style="color:#6A737D;">  //  (`null` and `undefined` values will allow any type)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  propA: Number,</span></span>\n<span class="line"><span style="color:#6A737D;">  // Multiple possible types</span></span>\n<span class="line"><span style="color:#E1E4E8;">  propB: [String, Number],</span></span>\n<span class="line"><span style="color:#6A737D;">  // Required string</span></span>\n<span class="line"><span style="color:#E1E4E8;">  propC: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    type: String,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    required: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#6A737D;">  // Required but nullable string</span></span>\n<span class="line"><span style="color:#E1E4E8;">  propD: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    type: [String, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">    required: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#6A737D;">  // Number with a default value</span></span>\n<span class="line"><span style="color:#E1E4E8;">  propE: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    type: Number,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    default: </span><span style="color:#79B8FF;">100</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#6A737D;">  // Object with a default value</span></span>\n<span class="line"><span style="color:#E1E4E8;">  propF: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    type: Object,</span></span>\n<span class="line"><span style="color:#6A737D;">    // Object or array defaults must be returned from</span></span>\n<span class="line"><span style="color:#6A737D;">    // a factory function. The function receives the raw</span></span>\n<span class="line"><span style="color:#6A737D;">    // props received by the component as the argument.</span></span>\n<span class="line"><span style="color:#B392F0;">    default</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">rawProps</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">      return</span><span style="color:#E1E4E8;"> { message: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;"> }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#6A737D;">  // Custom validator function</span></span>\n<span class="line"><span style="color:#6A737D;">  // full props passed as 2nd argument in 3.4+</span></span>\n<span class="line"><span style="color:#E1E4E8;">  propG: {</span></span>\n<span class="line"><span style="color:#B392F0;">    validator</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">      // The value must match one of these strings</span></span>\n<span class="line"><span style="color:#F97583;">      return</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;success&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;warning&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;danger&#39;</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(value)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#6A737D;">  // Function with a default value</span></span>\n<span class="line"><span style="color:#E1E4E8;">  propH: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    type: Function,</span></span>\n<span class="line"><span style="color:#6A737D;">    // Unlike object or array default, this is not a factory</span></span>\n<span class="line"><span style="color:#6A737D;">    // function - this is a function to serve as a default value</span></span>\n<span class="line"><span style="color:#B392F0;">    default</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">      return</span><span style="color:#9ECBFF;"> &#39;Default function&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Code inside the <code>defineProps()</code> argument <strong>cannot access other variables declared in <code>&lt;script setup&gt;</code></strong>, because the entire expression is moved to an outer function scope when compiled.</p></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>\n<span class="line"><span style="color:#6A737D;">    // Basic type check</span></span>\n<span class="line"><span style="color:#6A737D;">    //  (`null` and `undefined` values will allow any type)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    propA: Number,</span></span>\n<span class="line"><span style="color:#6A737D;">    // Multiple possible types</span></span>\n<span class="line"><span style="color:#E1E4E8;">    propB: [String, Number],</span></span>\n<span class="line"><span style="color:#6A737D;">    // Required string</span></span>\n<span class="line"><span style="color:#E1E4E8;">    propC: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      type: String,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      required: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#6A737D;">    // Required but nullable string</span></span>\n<span class="line"><span style="color:#E1E4E8;">    propD: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      type: [String, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">      required: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#6A737D;">    // Number with a default value</span></span>\n<span class="line"><span style="color:#E1E4E8;">    propE: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      type: Number,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      default: </span><span style="color:#79B8FF;">100</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#6A737D;">    // Object with a default value</span></span>\n<span class="line"><span style="color:#E1E4E8;">    propF: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      type: Object,</span></span>\n<span class="line"><span style="color:#6A737D;">      // Object or array defaults must be returned from</span></span>\n<span class="line"><span style="color:#6A737D;">      // a factory function. The function receives the raw</span></span>\n<span class="line"><span style="color:#6A737D;">      // props received by the component as the argument.</span></span>\n<span class="line"><span style="color:#B392F0;">      default</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">rawProps</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> { message: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;"> }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#6A737D;">    // Custom validator function</span></span>\n<span class="line"><span style="color:#6A737D;">    // full props passed as 2nd argument in 3.4+</span></span>\n<span class="line"><span style="color:#E1E4E8;">    propG: {</span></span>\n<span class="line"><span style="color:#B392F0;">      validator</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">        // The value must match one of these strings</span></span>\n<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;success&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;warning&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;danger&#39;</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(value)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#6A737D;">    // Function with a default value</span></span>\n<span class="line"><span style="color:#E1E4E8;">    propH: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      type: Function,</span></span>\n<span class="line"><span style="color:#6A737D;">      // Unlike object or array default, this is not a factory</span></span>\n<span class="line"><span style="color:#6A737D;">      // function - this is a function to serve as a default value</span></span>\n<span class="line"><span style="color:#B392F0;">      default</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &#39;Default function&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><p>Additional details:</p><ul><li><p>All props are optional by default, unless <code>required: true</code> is specified.</p></li><li><p>An absent optional prop other than <code>Boolean</code> will have <code>undefined</code> value.</p></li><li><p>The <code>Boolean</code> absent props will be cast to <code>false</code>. You can change this by setting a <code>default</code> for it — i.e.: <code>default: undefined</code> to behave as a non-Boolean prop.</p></li><li><p>If a <code>default</code> value is specified, it will be used if the resolved prop value is <code>undefined</code> - this includes both when the prop is absent, or an explicit <code>undefined</code> value is passed.</p></li></ul><p>When prop validation fails, Vue will produce a console warning (if using the development build).</p><div class="composition-api"><p>If using <a href="/api/sfc-script-setup.html#type-only-props-emit-declarations">Type-based props declarations</a> <sup class="vt-badge ts"></sup>, Vue will try its best to compile the type annotations into equivalent runtime prop declarations. For example, <code>defineProps&lt;{ msg: string }&gt;</code> will be compiled into <code>{ msg: { type: String, required: true }}</code>.</p></div><div class="options-api"><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Note that props are validated <strong>before</strong> a component instance is created, so instance properties (e.g. <code>data</code>, <code>computed</code>, etc.) will not be available inside <code>default</code> or <code>validator</code> functions.</p></div></div><h3 id="runtime-type-checks" tabindex="-1">Runtime Type Checks <a class="header-anchor" href="#runtime-type-checks" aria-label="Permalink to &quot;Runtime Type Checks {#runtime-type-checks}&quot;">​</a></h3><p>The <code>type</code> can be one of the following native constructors:</p><ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Array</code></li><li><code>Object</code></li><li><code>Date</code></li><li><code>Function</code></li><li><code>Symbol</code></li><li><code>Error</code></li></ul><p>In addition, <code>type</code> can also be a custom class or constructor function and the assertion will be made with an <code>instanceof</code> check. For example, given the following class:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> Person</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">  constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">firstName</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">lastName</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.firstName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> firstName</span></span>\n<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.lastName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lastName</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>You could use it as a prop&#39;s type:</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  author: Person</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    author: Person</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><p>Vue will use <code>instanceof Person</code> to validate whether the value of the <code>author</code> prop is indeed an instance of the <code>Person</code> class.</p><h3 id="nullable-type" tabindex="-1">Nullable Type <a class="header-anchor" href="#nullable-type" aria-label="Permalink to &quot;Nullable Type {#nullable-type}&quot;">​</a></h3><p>If the type is required but nullable, you can use the array syntax that includes <code>null</code>:</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  id: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    type: [String, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">    required: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    id: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      type: [String, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">      required: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><p>Note that if <code>type</code> is just <code>null</code> without using the array syntax, it will allow any type.</p><h2 id="boolean-casting" tabindex="-1">Boolean Casting <a class="header-anchor" href="#boolean-casting" aria-label="Permalink to &quot;Boolean Casting {#boolean-casting}&quot;">​</a></h2><p>Props with <code>Boolean</code> type have special casting rules to mimic the behavior of native boolean attributes. Given a <code>&lt;MyComponent&gt;</code> with the following declaration:</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  disabled: Boolean</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    disabled: Boolean</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><p>The component can be used like this:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- equivalent of passing :disabled=&quot;true&quot; --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#B392F0;"> disabled</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- equivalent of passing :disabled=&quot;false&quot; --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>When a prop is declared to allow multiple types, the casting rules for <code>Boolean</code> will also be applied. However, there is an edge when both <code>String</code> and <code>Boolean</code> are allowed - the Boolean casting rule only applies if Boolean appears before String:</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// disabled will be casted to true</span></span>\n<span class="line"><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  disabled: [Boolean, Number]</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// disabled will be casted to true</span></span>\n<span class="line"><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  disabled: [Boolean, String]</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// disabled will be casted to true</span></span>\n<span class="line"><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  disabled: [Number, Boolean]</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// disabled will be parsed as an empty string (disabled=&quot;&quot;)</span></span>\n<span class="line"><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  disabled: [String, Boolean]</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// disabled will be casted to true</span></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    disabled: [Boolean, Number]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// disabled will be casted to true</span></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    disabled: [Boolean, String]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// disabled will be casted to true</span></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    disabled: [Number, Boolean]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// disabled will be parsed as an empty string (disabled=&quot;&quot;)</span></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    disabled: [String, Boolean]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div>',86);const u=s(i,[["render",function(s,p,e,c,i,u){const h=o("VueSchoolLink");return t(),a("div",null,[r,E,n("div",d,[l(h,{href:"https://vueschool.io/lessons/vue-3-reusable-components-with-props",title:"Free Vue.js Props Lesson"})]),y])}]]);export{c as __pageData,u as default};
