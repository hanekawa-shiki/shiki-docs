import{_ as n,c as a,o as s,b as e}from"./chunks/framework.B9NywAPp.js";const o=JSON.parse('{"title":"Creating a Vue Application","description":"","frontmatter":{},"headers":[{"level":2,"title":"The application instance","slug":"the-application-instance","link":"#the-application-instance","children":[]},{"level":2,"title":"The Root Component","slug":"the-root-component","link":"#the-root-component","children":[]},{"level":2,"title":"Mounting the App","slug":"mounting-the-app","link":"#mounting-the-app","children":[{"level":3,"title":"In-DOM Root Component Template","slug":"in-dom-root-component-template","link":"#in-dom-root-component-template","children":[]}]},{"level":2,"title":"App Configurations","slug":"app-configurations","link":"#app-configurations","children":[]},{"level":2,"title":"Multiple application instances","slug":"multiple-application-instances","link":"#multiple-application-instances","children":[]}],"relativePath":"guide/essentials/application.md","filePath":"guide/essentials/application.md"}'),p={name:"guide/essentials/application.md"},t=[e('<h1 id="creating-a-vue-application" tabindex="-1">Creating a Vue Application <a class="header-anchor" href="#creating-a-vue-application" aria-label="Permalink to &quot;Creating a Vue Application {#creating-a-vue-application}&quot;">​</a></h1><h2 id="the-application-instance" tabindex="-1">The application instance <a class="header-anchor" href="#the-application-instance" aria-label="Permalink to &quot;The application instance {#the-application-instance}&quot;">​</a></h2><p>Every Vue application starts by creating a new <strong>application instance</strong> with the <a href="/api/application.html#createapp"><code>createApp</code></a> function:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#6A737D;">  /* root component options */</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h2 id="the-root-component" tabindex="-1">The Root Component <a class="header-anchor" href="#the-root-component" aria-label="Permalink to &quot;The Root Component {#the-root-component}&quot;">​</a></h2><p>The object we are passing into <code>createApp</code> is in fact a component. Every app requires a &quot;root component&quot; that can contain other components as its children.</p><p>If you are using Single-File Components, we typically import the root component from another file:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"><span style="color:#6A737D;">// import the root component App from a single-file component.</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> App </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./App.vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">(App)</span></span></code></pre></div><p>While many examples in this guide only need a single component, most real applications are organized into a tree of nested, reusable components. For example, a Todo application&#39;s component tree might look like this:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>App (root component)</span></span>\n<span class="line"><span>├─ TodoList</span></span>\n<span class="line"><span>│  └─ TodoItem</span></span>\n<span class="line"><span>│     ├─ TodoDeleteButton</span></span>\n<span class="line"><span>│     └─ TodoEditButton</span></span>\n<span class="line"><span>└─ TodoFooter</span></span>\n<span class="line"><span>   ├─ TodoClearButton</span></span>\n<span class="line"><span>   └─ TodoStatistics</span></span></code></pre></div><p>In later sections of the guide, we will discuss how to define and compose multiple components together. Before that, we will focus on what happens inside a single component.</p><h2 id="mounting-the-app" tabindex="-1">Mounting the App <a class="header-anchor" href="#mounting-the-app" aria-label="Permalink to &quot;Mounting the App {#mounting-the-app}&quot;">​</a></h2><p>An application instance won&#39;t render anything until its <code>.mount()</code> method is called. It expects a &quot;container&quot; argument, which can either be an actual DOM element or a selector string:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#app&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>The content of the app&#39;s root component will be rendered inside the container element. The container element itself is not considered part of the app.</p><p>The <code>.mount()</code> method should always be called after all app configurations and asset registrations are done. Also note that its return value, unlike the asset registration methods, is the root component instance instead of the application instance.</p><h3 id="in-dom-root-component-template" tabindex="-1">In-DOM Root Component Template <a class="header-anchor" href="#in-dom-root-component-template" aria-label="Permalink to &quot;In-DOM Root Component Template {#in-dom-root-component-template}&quot;">​</a></h3><p>The template for the root component is usually part of the component itself, but it is also possible to provide the template separately by writing it directly inside the mount container:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> @click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;count++&quot;</span><span style="color:#E1E4E8;">&gt;{{ count }}&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      count: </span><span style="color:#79B8FF;">0</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#app&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>Vue will automatically use the container&#39;s <code>innerHTML</code> as the template if the root component does not already have a <code>template</code> option.</p><p>In-DOM templates are often used in applications that are <a href="/guide/quick-start.html#using-vue-from-cdn">using Vue without a build step</a>. They can also be used in conjunction with server-side frameworks, where the root template might be generated dynamically by the server.</p><h2 id="app-configurations" tabindex="-1">App Configurations <a class="header-anchor" href="#app-configurations" aria-label="Permalink to &quot;App Configurations {#app-configurations}&quot;">​</a></h2><p>The application instance exposes a <code>.config</code> object that allows us to configure a few app-level options, for example, defining an app-level error handler that captures errors from all descendant components:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">app.config.</span><span style="color:#B392F0;">errorHandler</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">  /* handle error */</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>The application instance also provides a few methods for registering app-scoped assets. For example, registering a component:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;TodoDeleteButton&#39;</span><span style="color:#E1E4E8;">, TodoDeleteButton)</span></span></code></pre></div><p>This makes the <code>TodoDeleteButton</code> available for use anywhere in our app. We will discuss registration for components and other types of assets in later sections of the guide. You can also browse the full list of application instance APIs in its <a href="/api/application.html">API reference</a>.</p><p>Make sure to apply all app configurations before mounting the app!</p><h2 id="multiple-application-instances" tabindex="-1">Multiple application instances <a class="header-anchor" href="#multiple-application-instances" aria-label="Permalink to &quot;Multiple application instances {#multiple-application-instances}&quot;">​</a></h2><p>You are not limited to a single application instance on the same page. The <code>createApp</code> API allows multiple Vue applications to co-exist on the same page, each with its own scope for configuration and global assets:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app1</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#6A737D;">  /* ... */</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"><span style="color:#E1E4E8;">app1.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#container-1&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app2</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#6A737D;">  /* ... */</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"><span style="color:#E1E4E8;">app2.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#container-2&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>If you are using Vue to enhance server-rendered HTML and only need Vue to control specific parts of a large page, avoid mounting a single Vue application instance on the entire page. Instead, create multiple small application instances and mount them on the elements they are responsible for.</p>',34)];const l=n(p,[["render",function(n,e,o,p,l,i){return s(),a("div",null,t)}]]);export{o as __pageData,l as default};
