import{_ as s,c as a,o as n,b as l}from"./chunks/framework.B9NywAPp.js";const e=JSON.parse('{"title":"Reactivity API: Utilities","description":"","frontmatter":{},"headers":[{"level":2,"title":"isRef()","slug":"isref","link":"#isref","children":[]},{"level":2,"title":"unref()","slug":"unref","link":"#unref","children":[]},{"level":2,"title":"toRef()","slug":"toref","link":"#toref","children":[]},{"level":2,"title":"toValue()","slug":"tovalue","link":"#tovalue","children":[]},{"level":2,"title":"toRefs()","slug":"torefs","link":"#torefs","children":[]},{"level":2,"title":"isProxy()","slug":"isproxy","link":"#isproxy","children":[]},{"level":2,"title":"isReactive()","slug":"isreactive","link":"#isreactive","children":[]},{"level":2,"title":"isReadonly()","slug":"isreadonly","link":"#isreadonly","children":[]}],"relativePath":"api/reactivity-utilities.md","filePath":"api/reactivity-utilities.md"}'),o={name:"api/reactivity-utilities.md"},p=[l('<h1 id="reactivity-api-utilities" tabindex="-1">Reactivity API: Utilities <a class="header-anchor" href="#reactivity-api-utilities" aria-label="Permalink to &quot;Reactivity API: Utilities {#reactivity-api-utilities}&quot;">​</a></h1><h2 id="isref" tabindex="-1">isRef() <a class="header-anchor" href="#isref" aria-label="Permalink to &quot;isRef() {#isref}&quot;">​</a></h2><p>Checks if a value is a ref object.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> isRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">r</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#FFAB70;"> r</span><span style="color:#F97583;"> is</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Note the return type is a <a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates" target="_blank" rel="noreferrer">type predicate</a>, which means <code>isRef</code> can be used as a type guard:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> foo</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isRef</span><span style="color:#E1E4E8;">(foo)) {</span></span>\n<span class="line"><span style="color:#6A737D;">  // foo&#39;s type is narrowed to Ref&lt;unknown&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  foo.value</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="unref" tabindex="-1">unref() <a class="header-anchor" href="#unref" aria-label="Permalink to &quot;unref() {#unref}&quot;">​</a></h2><p>Returns the inner value if the argument is a ref, otherwise return the argument itself. This is a sugar function for <code>val = isRef(val) ? val.value : val</code>.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> unref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">ref</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span></span></code></pre></div></li><li><p><strong>Example</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useFoo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;) {</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> unwrapped</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> unref</span><span style="color:#E1E4E8;">(x)</span></span>\n<span class="line"><span style="color:#6A737D;">  // unwrapped is guaranteed to be number now</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="toref" tabindex="-1">toRef() <a class="header-anchor" href="#toref" aria-label="Permalink to &quot;toRef() {#toref}&quot;">​</a></h2><p>Can be used to normalize values / refs / getters into refs (3.3+).</p><p>Can also be used to create a ref for a property on a source reactive object. The created ref is synced with its source property: mutating the source property will update the ref, and vice-versa.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// normalization signature (3.3+)</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> toRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span></span>\n<span class="line"><span style="color:#FFAB70;">  value</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> extends</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#F97583;"> infer</span><span style="color:#B392F0;"> R</span></span>\n<span class="line"><span style="color:#F97583;">  ?</span><span style="color:#B392F0;"> Readonly</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">R</span><span style="color:#E1E4E8;">&gt;&gt;</span></span>\n<span class="line"><span style="color:#F97583;">  :</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> Ref</span></span>\n<span class="line"><span style="color:#F97583;">  ?</span><span style="color:#B392F0;"> T</span></span>\n<span class="line"><span style="color:#F97583;">  :</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">UnwrapRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// object property signature</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> toRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> extends</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">K</span><span style="color:#F97583;"> extends</span><span style="color:#F97583;"> keyof</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">&gt;(</span></span>\n<span class="line"><span style="color:#FFAB70;">  object</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  key</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> K</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  defaultValue</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">K</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ToRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">K</span><span style="color:#E1E4E8;">]&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> ToRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> Ref</span><span style="color:#F97583;"> ?</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> :</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>Example</strong></p><p>Normalization signature (3.3+):</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// returns existing refs as-is</span></span>\n<span class="line"><span style="color:#B392F0;">toRef</span><span style="color:#E1E4E8;">(existingRef)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// creates a readonly ref that calls the getter on .value access</span></span>\n<span class="line"><span style="color:#B392F0;">toRef</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> props.foo)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// creates normal refs from non-function values</span></span>\n<span class="line"><span style="color:#6A737D;">// equivalent to ref(1)</span></span>\n<span class="line"><span style="color:#B392F0;">toRef</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>Object property signature:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> state</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  foo: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  bar: </span><span style="color:#79B8FF;">2</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// a two-way ref that syncs with the original property</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> fooRef</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> toRef</span><span style="color:#E1E4E8;">(state, </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// mutating the ref updates the original</span></span>\n<span class="line"><span style="color:#E1E4E8;">fooRef.value</span><span style="color:#F97583;">++</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(state.foo) </span><span style="color:#6A737D;">// 2</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// mutating the original also updates the ref</span></span>\n<span class="line"><span style="color:#E1E4E8;">state.foo</span><span style="color:#F97583;">++</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(fooRef.value) </span><span style="color:#6A737D;">// 3</span></span></code></pre></div><p>Note this is different from:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> fooRef</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(state.foo)</span></span></code></pre></div><p>The above ref is <strong>not</strong> synced with <code>state.foo</code>, because the <code>ref()</code> receives a plain number value.</p><p><code>toRef()</code> is useful when you want to pass the ref of a prop to a composable function:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { toRef } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// convert `props.foo` into a ref, then pass into</span></span>\n<span class="line"><span style="color:#6A737D;">// a composable</span></span>\n<span class="line"><span style="color:#B392F0;">useSomeFeature</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">toRef</span><span style="color:#E1E4E8;">(props, </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// getter syntax - recommended in 3.3+</span></span>\n<span class="line"><span style="color:#B392F0;">useSomeFeature</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">toRef</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> props.foo))</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>When <code>toRef</code> is used with component props, the usual restrictions around mutating the props still apply. Attempting to assign a new value to the ref is equivalent to trying to modify the prop directly and is not allowed. In that scenario you may want to consider using <a href="./reactivity-core.html#computed"><code>computed</code></a> with <code>get</code> and <code>set</code> instead. See the guide to <a href="/guide/components/v-model.html">using <code>v-model</code> with components</a> for more information.</p><p>When using the object property signature, <code>toRef()</code> will return a usable ref even if the source property doesn&#39;t currently exist. This makes it possible to work with optional properties, which wouldn&#39;t be picked up by <a href="#torefs"><code>toRefs</code></a>.</p></li></ul><h2 id="tovalue" tabindex="-1">toValue() <sup class="vt-badge" data-text="3.3+"></sup> <a class="header-anchor" href="#tovalue" aria-label="Permalink to &quot;toValue() &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.3+&quot; /&gt; {#tovalue}&quot;">​</a></h2><p>Normalizes values / refs / getters to values. This is similar to <a href="#unref">unref()</a>, except that it also normalizes getters. If the argument is a getter, it will be invoked and its return value will be returned.</p><p>This can be used in <a href="/guide/reusability/composables.html">Composables</a> to normalize an argument that can be either a value, a ref, or a getter.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> toValue</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">source</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">))</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span></span></code></pre></div></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">toValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//       --&gt; 1</span></span>\n<span class="line"><span style="color:#B392F0;">toValue</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">//  --&gt; 1</span></span>\n<span class="line"><span style="color:#B392F0;">toValue</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// --&gt; 1</span></span></code></pre></div><p>Normalizing arguments in composables:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { MaybeRefOrGetter } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useFeature</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> MaybeRefOrGetter</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;) {</span></span>\n<span class="line"><span style="color:#B392F0;">  watch</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> toValue</span><span style="color:#E1E4E8;">(id), </span><span style="color:#FFAB70;">id</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">    // react to id changes</span></span>\n<span class="line"><span style="color:#E1E4E8;">  })</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// this composable supports any of the following:</span></span>\n<span class="line"><span style="color:#B392F0;">useFeature</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#B392F0;">useFeature</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))</span></span>\n<span class="line"><span style="color:#B392F0;">useFeature</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">)</span></span></code></pre></div></li></ul><h2 id="torefs" tabindex="-1">toRefs() <a class="header-anchor" href="#torefs" aria-label="Permalink to &quot;toRefs() {#torefs}&quot;">​</a></h2><p>Converts a reactive object to a plain object where each property of the resulting object is a ref pointing to the corresponding property of the original object. Each individual ref is created using <a href="#toref"><code>toRef()</code></a>.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> toRefs</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> extends</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">&gt;(</span></span>\n<span class="line"><span style="color:#FFAB70;">  object</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#B392F0;">K</span><span style="color:#F97583;"> in</span><span style="color:#F97583;"> keyof</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ToRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">K</span><span style="color:#E1E4E8;">]&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> ToRef</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> Ref</span><span style="color:#F97583;"> ?</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> :</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> state</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  foo: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  bar: </span><span style="color:#79B8FF;">2</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> stateAsRefs</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> toRefs</span><span style="color:#E1E4E8;">(state)</span></span>\n<span class="line"><span style="color:#6A737D;">/*</span></span>\n<span class="line"><span style="color:#6A737D;">Type of stateAsRefs: {</span></span>\n<span class="line"><span style="color:#6A737D;">  foo: Ref&lt;number&gt;,</span></span>\n<span class="line"><span style="color:#6A737D;">  bar: Ref&lt;number&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">}</span></span>\n<span class="line"><span style="color:#6A737D;">*/</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// The ref and the original property is &quot;linked&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">state.foo</span><span style="color:#F97583;">++</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(stateAsRefs.foo.value) </span><span style="color:#6A737D;">// 2</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">stateAsRefs.foo.value</span><span style="color:#F97583;">++</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(state.foo) </span><span style="color:#6A737D;">// 3</span></span></code></pre></div><p><code>toRefs</code> is useful when returning a reactive object from a composable function so that the consuming component can destructure/spread the returned object without losing reactivity:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useFeatureX</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> state</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    foo: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    bar: </span><span style="color:#79B8FF;">2</span></span>\n<span class="line"><span style="color:#E1E4E8;">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // ...logic operating on state</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // convert to refs when returning</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> toRefs</span><span style="color:#E1E4E8;">(state)</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// can destructure without losing reactivity</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">bar</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> useFeatureX</span><span style="color:#E1E4E8;">()</span></span></code></pre></div><p><code>toRefs</code> will only generate refs for properties that are enumerable on the source object at call time. To create a ref for a property that may not exist yet, use <a href="#toref"><code>toRef</code></a> instead.</p></li></ul><h2 id="isproxy" tabindex="-1">isProxy() <a class="header-anchor" href="#isproxy" aria-label="Permalink to &quot;isProxy() {#isproxy}&quot;">​</a></h2><p>Checks if an object is a proxy created by <a href="./reactivity-core.html#reactive"><code>reactive()</code></a>, <a href="./reactivity-core.html#readonly"><code>readonly()</code></a>, <a href="./reactivity-advanced.html#shallowreactive"><code>shallowReactive()</code></a> or <a href="./reactivity-advanced.html#shallowreadonly"><code>shallowReadonly()</code></a>.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> isProxy</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> boolean</span></span></code></pre></div></li></ul><h2 id="isreactive" tabindex="-1">isReactive() <a class="header-anchor" href="#isreactive" aria-label="Permalink to &quot;isReactive() {#isreactive}&quot;">​</a></h2><p>Checks if an object is a proxy created by <a href="./reactivity-core.html#reactive"><code>reactive()</code></a> or <a href="./reactivity-advanced.html#shallowreactive"><code>shallowReactive()</code></a>.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> isReactive</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> boolean</span></span></code></pre></div></li></ul><h2 id="isreadonly" tabindex="-1">isReadonly() <a class="header-anchor" href="#isreadonly" aria-label="Permalink to &quot;isReadonly() {#isreadonly}&quot;">​</a></h2><p>Checks whether the passed value is a readonly object. The properties of a readonly object can change, but they can&#39;t be assigned directly via the passed object.</p><p>The proxies created by <a href="./reactivity-core.html#readonly"><code>readonly()</code></a> and <a href="./reactivity-advanced.html#shallowreadonly"><code>shallowReadonly()</code></a> are both considered readonly, as is a <a href="./reactivity-core.html#computed"><code>computed()</code></a> ref without a <code>set</code> function.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> isReadonly</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> boolean</span></span></code></pre></div></li></ul>',28)];const t=s(o,[["render",function(s,l,e,o,t,c){return n(),a("div",null,p)}]]);export{e as __pageData,t as default};
