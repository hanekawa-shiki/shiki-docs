import{_ as s,c as n,o as a,b as e}from"./chunks/framework.B9NywAPp.js";const o=JSON.parse('{"title":"Async Components","description":"","frontmatter":{},"headers":[{"level":2,"title":"Basic Usage","slug":"basic-usage","link":"#basic-usage","children":[]},{"level":2,"title":"Loading and Error States","slug":"loading-and-error-states","link":"#loading-and-error-states","children":[]},{"level":2,"title":"Using with Suspense","slug":"using-with-suspense","link":"#using-with-suspense","children":[]}],"relativePath":"guide/components/async.md","filePath":"guide/components/async.md"}'),l={name:"guide/components/async.md"},p=[e('<h1 id="async-components" tabindex="-1">Async Components <a class="header-anchor" href="#async-components" aria-label="Permalink to &quot;Async Components {#async-components}&quot;">​</a></h1><h2 id="basic-usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage" aria-label="Permalink to &quot;Basic Usage {#basic-usage}&quot;">​</a></h2><p>In large applications, we may need to divide the app into smaller chunks and only load a component from the server when it&#39;s needed. To make that possible, Vue has a <a href="/api/general.html#defineasynccomponent"><code>defineAsyncComponent</code></a> function:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineAsyncComponent } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> AsyncComp</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineAsyncComponent</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">  return</span><span style="color:#F97583;"> new</span><span style="color:#79B8FF;"> Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reject</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">    // ...load component from server</span></span>\n<span class="line"><span style="color:#B392F0;">    resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* loaded component */</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  })</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"><span style="color:#6A737D;">// ... use `AsyncComp` like a normal component</span></span></code></pre></div><p>As you can see, <code>defineAsyncComponent</code> accepts a loader function that returns a Promise. The Promise&#39;s <code>resolve</code> callback should be called when you have retrieved your component definition from the server. You can also call <code>reject(reason)</code> to indicate the load has failed.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import" target="_blank" rel="noreferrer">ES module dynamic import</a> also returns a Promise, so most of the time we will use it in combination with <code>defineAsyncComponent</code>. Bundlers like Vite and webpack also support the syntax (and will use it as bundle split points), so we can use it to import Vue SFCs:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineAsyncComponent } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> AsyncComp</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineAsyncComponent</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span></span>\n<span class="line"><span style="color:#F97583;">  import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./components/MyComponent.vue&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>The resulting <code>AsyncComp</code> is a wrapper component that only calls the loader function when it is actually rendered on the page. In addition, it will pass along any props and slots to the inner component, so you can use the async wrapper to seamlessly replace the original component while achieving lazy loading.</p><p>As with normal components, async components can be <a href="/guide/components/registration.html#global-registration">registered globally</a> using <code>app.component()</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;MyComponent&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">defineAsyncComponent</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span></span>\n<span class="line"><span style="color:#F97583;">  import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./components/MyComponent.vue&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">))</span></span></code></pre></div><div class="options-api"><p>You can also use <code>defineAsyncComponent</code> when <a href="/guide/components/registration.html#local-registration">registering a component locally</a>:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineAsyncComponent } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  components: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    AdminPage: </span><span style="color:#B392F0;">defineAsyncComponent</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span></span>\n<span class="line"><span style="color:#F97583;">      import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./components/AdminPageComponent.vue&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    )</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">AdminPage</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><div class="composition-api"><p>They can also be defined directly inside their parent component:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineAsyncComponent } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> AdminPage</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineAsyncComponent</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span></span>\n<span class="line"><span style="color:#F97583;">  import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./components/AdminPageComponent.vue&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">AdminPage</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><h2 id="loading-and-error-states" tabindex="-1">Loading and Error States <a class="header-anchor" href="#loading-and-error-states" aria-label="Permalink to &quot;Loading and Error States {#loading-and-error-states}&quot;">​</a></h2><p>Asynchronous operations inevitably involve loading and error states - <code>defineAsyncComponent()</code> supports handling these states via advanced options:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> AsyncComp</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineAsyncComponent</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#6A737D;">  // the loader function</span></span>\n<span class="line"><span style="color:#B392F0;">  loader</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#F97583;"> import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./Foo.vue&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // A component to use while the async component is loading</span></span>\n<span class="line"><span style="color:#E1E4E8;">  loadingComponent: LoadingComponent,</span></span>\n<span class="line"><span style="color:#6A737D;">  // Delay before showing the loading component. Default: 200ms.</span></span>\n<span class="line"><span style="color:#E1E4E8;">  delay: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // A component to use if the load fails</span></span>\n<span class="line"><span style="color:#E1E4E8;">  errorComponent: ErrorComponent,</span></span>\n<span class="line"><span style="color:#6A737D;">  // The error component will be displayed if a timeout is</span></span>\n<span class="line"><span style="color:#6A737D;">  // provided and exceeded. Default: Infinity.</span></span>\n<span class="line"><span style="color:#E1E4E8;">  timeout: </span><span style="color:#79B8FF;">3000</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>If a loading component is provided, it will be displayed first while the inner component is being loaded. There is a default 200ms delay before the loading component is shown - this is because on fast networks, an instant loading state may get replaced too fast and end up looking like a flicker.</p><p>If an error component is provided, it will be displayed when the Promise returned by the loader function is rejected. You can also specify a timeout to show the error component when the request is taking too long.</p><h2 id="using-with-suspense" tabindex="-1">Using with Suspense <a class="header-anchor" href="#using-with-suspense" aria-label="Permalink to &quot;Using with Suspense {#using-with-suspense}&quot;">​</a></h2><p>Async components can be used with the <code>&lt;Suspense&gt;</code> built-in component. The interaction between <code>&lt;Suspense&gt;</code> and async components is documented in the <a href="/guide/built-ins/suspense.html">dedicated chapter for <code>&lt;Suspense&gt;</code></a>.</p>',19)];const t=s(l,[["render",function(s,e,o,l,t,c){return a(),n("div",null,p)}]]);export{o as __pageData,t as default};
