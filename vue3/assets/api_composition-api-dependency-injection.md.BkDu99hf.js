import{_ as s,c as n,o as a,b as e}from"./chunks/framework.B9NywAPp.js";const o=JSON.parse('{"title":"Composition API: Dependency Injection","description":"","frontmatter":{},"headers":[{"level":2,"title":"provide()","slug":"provide","link":"#provide","children":[]},{"level":2,"title":"inject()","slug":"inject","link":"#inject","children":[]},{"level":2,"title":"hasInjectionContext()","slug":"has-injection-context","link":"#has-injection-context","children":[]}],"relativePath":"api/composition-api-dependency-injection.md","filePath":"api/composition-api-dependency-injection.md"}'),l={name:"api/composition-api-dependency-injection.md"},p=[e('<h1 id="composition-api-dependency-injection" tabindex="-1">Composition API: <br>Dependency Injection <a class="header-anchor" href="#composition-api-dependency-injection" aria-label="Permalink to &quot;Composition API: &lt;br&gt;Dependency Injection {#composition-api-dependency-injection}&quot;">​</a></h1><h2 id="provide" tabindex="-1">provide() <a class="header-anchor" href="#provide" aria-label="Permalink to &quot;provide() {#provide}&quot;">​</a></h2><p>Provides a value that can be injected by descendant components.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> provide</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> InjectionKey</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p><code>provide()</code> takes two arguments: the key, which can be a string or a symbol, and the value to be injected.</p><p>When using TypeScript, the key can be a symbol casted as <code>InjectionKey</code> - a Vue provided utility type that extends <code>Symbol</code>, which can be used to sync the value type between <code>provide()</code> and <code>inject()</code>.</p><p>Similar to lifecycle hook registration APIs, <code>provide()</code> must be called synchronously during a component&#39;s <code>setup()</code> phase.</p></li><li><p><strong>Example</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, provide } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { countSymbol } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./injectionSymbols&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// provide static value</span></span>\n<span class="line"><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;/project/&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// provide reactive value</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">, count)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// provide with Symbol keys</span></span>\n<span class="line"><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(countSymbol, count)</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/components/provide-inject.html">Guide - Provide / Inject</a></li><li><a href="/guide/typescript/composition-api.html#typing-provide-inject">Guide - Typing Provide / Inject</a> <sup class="vt-badge ts"></sup></li></ul></li></ul><h2 id="inject" tabindex="-1">inject() <a class="header-anchor" href="#inject" aria-label="Permalink to &quot;inject() {#inject}&quot;">​</a></h2><p>Injects a value provided by an ancestor component or the application (via <code>app.provide()</code>).</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// without default value</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> InjectionKey</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// with default value</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> InjectionKey</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">defaultValue</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// with factory</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span></span>\n<span class="line"><span style="color:#FFAB70;">  key</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> InjectionKey</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#B392F0;">  defaultValue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  treatDefaultAsFactory</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> true</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>The first argument is the injection key. Vue will walk up the parent chain to locate a provided value with a matching key. If multiple components in the parent chain provides the same key, the one closest to the injecting component will &quot;shadow&quot; those higher up the chain. If no value with matching key was found, <code>inject()</code> returns <code>undefined</code> unless a default value is provided.</p><p>The second argument is optional and is the default value to be used when no matching value was found.</p><p>The second argument can also be a factory function that returns values that are expensive to create. In this case, <code>true</code> must be passed as the third argument to indicate that the function should be used as a factory instead of the value itself.</p><p>Similar to lifecycle hook registration APIs, <code>inject()</code> must be called synchronously during a component&#39;s <code>setup()</code> phase.</p><p>When using TypeScript, the key can be of type of <code>InjectionKey</code> - a Vue-provided utility type that extends <code>Symbol</code>, which can be used to sync the value type between <code>provide()</code> and <code>inject()</code>.</p></li><li><p><strong>Example</strong></p><p>Assuming a parent component has provided values as shown in the previous <code>provide()</code> example:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { inject } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { countSymbol } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./injectionSymbols&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// inject static value without default</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> path</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// inject reactive value</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// inject with Symbol keys</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count2</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(countSymbol)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// inject with default value</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> bar</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;/default-path&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// inject with function default value</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> fn</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// inject with default value factory</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> baz</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;factory&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> ExpensiveObject</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/components/provide-inject.html">Guide - Provide / Inject</a></li><li><a href="/guide/typescript/composition-api.html#typing-provide-inject">Guide - Typing Provide / Inject</a> <sup class="vt-badge ts"></sup></li></ul></li></ul><h2 id="has-injection-context" tabindex="-1">hasInjectionContext() <sup class="vt-badge" data-text="3.3+"></sup> <a class="header-anchor" href="#has-injection-context" aria-label="Permalink to &quot;hasInjectionContext() &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.3+&quot; /&gt; {#has-injection-context}&quot;">​</a></h2><p>Returns true if <a href="#inject">inject()</a> can be used without warning about being called in the wrong place (e.g. outside of <code>setup()</code>). This method is designed to be used by libraries that want to use <code>inject()</code> internally without triggering a warning to the end user.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> hasInjectionContext</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> boolean</span></span></code></pre></div></li></ul>',10)];const t=s(l,[["render",function(s,e,o,l,t,c){return a(),n("div",null,p)}]]);export{o as __pageData,t as default};
