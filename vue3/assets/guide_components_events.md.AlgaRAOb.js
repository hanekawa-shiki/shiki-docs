import{H as s,c as n,a,x as e,s as l,b as o,I as p,o as t}from"./chunks/framework.B9NywAPp.js";const c=a("h1",{id:"component-events",tabindex:"-1"},[l("Component Events "),a("a",{class:"header-anchor",href:"#component-events","aria-label":'Permalink to "Component Events {#component-events}"'},"​")],-1),i=a("blockquote",null,[a("p",null,[l("This page assumes you've already read the "),a("a",{href:"/guide/essentials/component-basics.html"},"Components Basics"),l(". Read that first if you are new to components.")])],-1),r={class:"options-api"},E=o('<h2 id="emitting-and-listening-to-events" tabindex="-1">Emitting and Listening to Events <a class="header-anchor" href="#emitting-and-listening-to-events" aria-label="Permalink to &quot;Emitting and Listening to Events {#emitting-and-listening-to-events}&quot;">​</a></h2><p>A component can emit custom events directly in template expressions (e.g. in a <code>v-on</code> handler) using the built-in <code>$emit</code> method:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- MyComponent --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">$emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;someEvent&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;Click Me&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="options-api"><p>The <code>$emit()</code> method is also available on the component instance as <code>this.$emit()</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  methods: {</span></span>\n<span class="line"><span style="color:#B392F0;">    submit</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;someEvent&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><p>The parent can then listen to it using <code>v-on</code>:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">some-event</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">callback</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>The <code>.once</code> modifier is also supported on component event listeners:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">some-event</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">once</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">callback</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>Like components and props, event names provide an automatic case transformation. Notice we emitted a camelCase event, but can listen for it using a kebab-cased listener in the parent. As with <a href="/guide/components/props.html#prop-name-casing">props casing</a>, we recommend using kebab-cased event listeners in templates.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Unlike native DOM events, component emitted events do <strong>not</strong> bubble. You can only listen to the events emitted by a direct child component. If there is a need to communicate between sibling or deeply nested components, use an external event bus or a <a href="/guide/scaling-up/state-management.html">global state management solution</a>.</p></div><h2 id="event-arguments" tabindex="-1">Event Arguments <a class="header-anchor" href="#event-arguments" aria-label="Permalink to &quot;Event Arguments {#event-arguments}&quot;">​</a></h2><p>It&#39;s sometimes useful to emit a specific value with an event. For example, we may want the <code>&lt;BlogPost&gt;</code> component to be in charge of how much to enlarge the text by. In those cases, we can pass extra arguments to <code>$emit</code> to provide this value:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">$emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;increaseBy&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  Increase by 1</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Then, when we listen to the event in the parent, we can use an inline arrow function as the listener, which allows us to access the event argument:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyButton</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">increase-by</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>Or, if the event handler is a method:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyButton</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">increase-by</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">increaseCount</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>Then the value will be passed as the first parameter of that method:</p><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">methods</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#B392F0;">  increaseCount</span><span style="color:#E1E4E8;">(n) {</span></span>\n<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.count </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> n</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> increaseCount</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  count.value </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> n</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>All extra arguments passed to <code>$emit()</code> after the event name will be forwarded to the listener. For example, with <code>$emit(&#39;foo&#39;, 1, 2, 3)</code> the listener function will receive three arguments.</p></div><h2 id="declaring-emitted-events" tabindex="-1">Declaring Emitted Events <a class="header-anchor" href="#declaring-emitted-events" aria-label="Permalink to &quot;Declaring Emitted Events {#declaring-emitted-events}&quot;">​</a></h2><p>A component can explicitly declare the events it will emit using the <span class="composition-api"><a href="/api/sfc-script-setup.html#defineprops-defineemits"><code>defineEmits()</code></a> macro</span><span class="options-api"><a href="/api/options-state.html#emits"><code>emits</code></a> option</span>:</p><div class="composition-api"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">defineEmits</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;inFocus&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;submit&#39;</span><span style="color:#E1E4E8;">])</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>The <code>$emit</code> method that we used in the <code>&lt;template&gt;</code> isn&#39;t accessible within the <code>&lt;script setup&gt;</code> section of a component, but <code>defineEmits()</code> returns an equivalent function that we can use instead:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> emit</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineEmits</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;inFocus&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;submit&#39;</span><span style="color:#E1E4E8;">])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> buttonClick</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#B392F0;">  emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;submit&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>The <code>defineEmits()</code> macro <strong>cannot</strong> be used inside a function, it must be placed directly within <code>&lt;script setup&gt;</code>, as in the example above.</p><p>If you&#39;re using an explicit <code>setup</code> function instead of <code>&lt;script setup&gt;</code>, events should be declared using the <a href="/api/options-state.html#emits"><code>emits</code></a> option, and the <code>emit</code> function is exposed on the <code>setup()</code> context:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  emits: [</span><span style="color:#9ECBFF;">&#39;inFocus&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;submit&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ctx.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;submit&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>As with other properties of the <code>setup()</code> context, <code>emit</code> can safely be destructured:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  emits: [</span><span style="color:#9ECBFF;">&#39;inFocus&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;submit&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">, { </span><span style="color:#FFAB70;">emit</span><span style="color:#E1E4E8;"> }) {</span></span>\n<span class="line"><span style="color:#B392F0;">    emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;submit&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  emits: [</span><span style="color:#9ECBFF;">&#39;inFocus&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;submit&#39;</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><p>The <code>emits</code> option and <code>defineEmits()</code> macro also support an object syntax. If using TypeScript you can type arguments, which allows us to perform runtime validation of the payload of the emitted events:</p><div class="composition-api"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> emit</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineEmits</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#B392F0;">  submit</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">payload</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">email</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">password</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;"> }) {</span></span>\n<span class="line"><span style="color:#6A737D;">    // return `true` or `false` to indicate</span></span>\n<span class="line"><span style="color:#6A737D;">    // validation pass / fail</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>If you are using TypeScript with <code>&lt;script setup&gt;</code>, it&#39;s also possible to declare emitted events using pure type annotations:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> emit</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineEmits</span><span style="color:#E1E4E8;">&lt;{</span></span>\n<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">e</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> &#39;change&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">e</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> &#39;update&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"><span style="color:#E1E4E8;">}&gt;()</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>More details: <a href="/guide/typescript/composition-api.html#typing-component-emits">Typing Component Emits</a> <sup class="vt-badge ts"></sup></p></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  emits: {</span></span>\n<span class="line"><span style="color:#B392F0;">    submit</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">payload</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">email</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">password</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;"> }) {</span></span>\n<span class="line"><span style="color:#6A737D;">      // return `true` or `false` to indicate</span></span>\n<span class="line"><span style="color:#6A737D;">      // validation pass / fail</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>See also: <a href="/guide/typescript/options-api.html#typing-component-emits">Typing Component Emits</a> <sup class="vt-badge ts"></sup></p></div><p>Although optional, it is recommended to define all emitted events in order to better document how a component should work. It also allows Vue to exclude known listeners from <a href="/guide/components/attrs.html#v-on-listener-inheritance">fallthrough attributes</a>, avoiding edge cases caused by DOM events manually dispatched by 3rd party code.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If a native event (e.g., <code>click</code>) is defined in the <code>emits</code> option, the listener will now only listen to component-emitted <code>click</code> events and no longer respond to native <code>click</code> events.</p></div><h2 id="events-validation" tabindex="-1">Events Validation <a class="header-anchor" href="#events-validation" aria-label="Permalink to &quot;Events Validation {#events-validation}&quot;">​</a></h2><p>Similar to prop type validation, an emitted event can be validated if it is defined with the object syntax instead of the array syntax.</p><p>To add validation, the event is assigned a function that receives the arguments passed to the <span class="options-api"><code>this.$emit</code></span><span class="composition-api"><code>emit</code></span> call and returns a boolean to indicate whether the event is valid or not.</p><div class="composition-api"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> emit</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineEmits</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#6A737D;">  // No validation</span></span>\n<span class="line"><span style="color:#E1E4E8;">  click: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // Validate submit event</span></span>\n<span class="line"><span style="color:#B392F0;">  submit</span><span style="color:#E1E4E8;">: ({ </span><span style="color:#FFAB70;">email</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">password</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (email </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> password) {</span></span>\n<span class="line"><span style="color:#F97583;">      return</span><span style="color:#79B8FF;"> true</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Invalid submit event payload!&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#F97583;">      return</span><span style="color:#79B8FF;"> false</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> submitForm</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">email</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">password</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#B392F0;">  emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;submit&#39;</span><span style="color:#E1E4E8;">, { email, password })</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  emits: {</span></span>\n<span class="line"><span style="color:#6A737D;">    // No validation</span></span>\n<span class="line"><span style="color:#E1E4E8;">    click: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // Validate submit event</span></span>\n<span class="line"><span style="color:#B392F0;">    submit</span><span style="color:#E1E4E8;">: ({ </span><span style="color:#FFAB70;">email</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">password</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (email </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> password) {</span></span>\n<span class="line"><span style="color:#F97583;">        return</span><span style="color:#79B8FF;"> true</span></span>\n<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Invalid submit event payload!&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#F97583;">        return</span><span style="color:#79B8FF;"> false</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  methods: {</span></span>\n<span class="line"><span style="color:#B392F0;">    submitForm</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">email</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">password</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;submit&#39;</span><span style="color:#E1E4E8;">, { email, password })</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div>',35),y=JSON.parse('{"title":"Component Events","description":"","frontmatter":{},"headers":[{"level":2,"title":"Emitting and Listening to Events","slug":"emitting-and-listening-to-events","link":"#emitting-and-listening-to-events","children":[]},{"level":2,"title":"Event Arguments","slug":"event-arguments","link":"#event-arguments","children":[]},{"level":2,"title":"Declaring Emitted Events","slug":"declaring-emitted-events","link":"#declaring-emitted-events","children":[]},{"level":2,"title":"Events Validation","slug":"events-validation","link":"#events-validation","children":[]}],"relativePath":"guide/components/events.md","filePath":"guide/components/events.md"}'),d={name:"guide/components/events.md"},u=Object.assign(d,{setup(l){if("undefined"!=typeof window){const n=window.location.hash;["#usage-with-v-model","#v-model-arguments","#multiple-v-model-bindings","#handling-v-model-modifiers"].includes(n)&&s((()=>{window.location="./v-model.html"+n}))}return(s,l)=>{const o=p("VueSchoolLink");return t(),n("div",null,[c,i,a("div",r,[e(o,{href:"https://vueschool.io/lessons/defining-custom-events-emits",title:"Free Vue.js Lesson on Defining Custom Events"})]),E])}}});export{y as __pageData,u as default};
