import{_ as s,c as n,o as a,b as l}from"./chunks/framework.B9NywAPp.js";const o=JSON.parse('{"title":"Render Function APIs","description":"","frontmatter":{},"headers":[{"level":2,"title":"h()","slug":"h","link":"#h","children":[]},{"level":2,"title":"mergeProps()","slug":"mergeprops","link":"#mergeprops","children":[]},{"level":2,"title":"cloneVNode()","slug":"clonevnode","link":"#clonevnode","children":[]},{"level":2,"title":"isVNode()","slug":"isvnode","link":"#isvnode","children":[]},{"level":2,"title":"resolveComponent()","slug":"resolvecomponent","link":"#resolvecomponent","children":[]},{"level":2,"title":"resolveDirective()","slug":"resolvedirective","link":"#resolvedirective","children":[]},{"level":2,"title":"withDirectives()","slug":"withdirectives","link":"#withdirectives","children":[]},{"level":2,"title":"withModifiers()","slug":"withmodifiers","link":"#withmodifiers","children":[]}],"relativePath":"api/render-function.md","filePath":"api/render-function.md"}'),p={name:"api/render-function.md"},e=[l('<h1 id="render-function-apis" tabindex="-1">Render Function APIs <a class="header-anchor" href="#render-function-apis" aria-label="Permalink to &quot;Render Function APIs {#render-function-apis}&quot;">​</a></h1><h2 id="h" tabindex="-1">h() <a class="header-anchor" href="#h" aria-label="Permalink to &quot;h() {#h}&quot;">​</a></h2><p>Creates virtual DOM nodes (vnodes).</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// full signature</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#FFAB70;">  type</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> Component</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  props</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> object</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  children</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Children</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> Slot</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> Slots</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> VNode</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// omitting props</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">type</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> Component</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">children</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Children</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> Slot</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> VNode</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Children</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> number</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> boolean</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> VNode</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> Children</span><span style="color:#E1E4E8;">[]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Slot</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> Children</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Slots</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> { [</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Slot</span><span style="color:#E1E4E8;"> }</span></span></code></pre></div><blockquote><p>Types are simplified for readability.</p></blockquote></li><li><p><strong>Details</strong></p><p>The first argument can either be a string (for native elements) or a Vue component definition. The second argument is the props to be passed, and the third argument is the children.</p><p>When creating a component vnode, the children must be passed as slot functions. A single slot function can be passed if the component expects only the default slot. Otherwise, the slots must be passed as an object of slot functions.</p><p>For convenience, the props argument can be omitted when the children is not a slots object.</p></li><li><p><strong>Example</strong></p><p>Creating native elements:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// all arguments except the type are optional</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { id: </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// both attributes and properties can be used in props</span></span>\n<span class="line"><span style="color:#6A737D;">// Vue automatically picks the right way to assign it</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { class: </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">, innerHTML: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// class and style have the same object / array</span></span>\n<span class="line"><span style="color:#6A737D;">// value support like in templates</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { class: [foo, { bar }], style: { color: </span><span style="color:#9ECBFF;">&#39;red&#39;</span><span style="color:#E1E4E8;"> } })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// event listeners should be passed as onXxx</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { </span><span style="color:#B392F0;">onClick</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {} })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// children can be a string</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { id: </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// props can be omitted when there are no props</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, [</span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">)])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// children array can contain mixed vnodes and strings</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, [</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">)])</span></span></code></pre></div><p>Creating components:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Foo </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./Foo.vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// passing props</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(Foo, {</span></span>\n<span class="line"><span style="color:#6A737D;">  // equivalent of some-prop=&quot;hello&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  someProp: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#6A737D;">  // equivalent of @update=&quot;() =&gt; {}&quot;</span></span>\n<span class="line"><span style="color:#B392F0;">  onUpdate</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// passing single default slot</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(Foo, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#9ECBFF;"> &#39;default slot&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// passing named slots</span></span>\n<span class="line"><span style="color:#6A737D;">// notice the `null` is required to avoid</span></span>\n<span class="line"><span style="color:#6A737D;">// slots object being treated as props</span></span>\n<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(MyComponent, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#B392F0;">  default</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#9ECBFF;"> &#39;default slot&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#B392F0;">  foo</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#B392F0;">  bar</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;one&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;two&#39;</span><span style="color:#E1E4E8;">)]</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div></li><li><p><strong>See also</strong> <a href="/guide/extras/render-function.html#creating-vnodes">Guide - Render Functions - Creating VNodes</a></p></li></ul><h2 id="mergeprops" tabindex="-1">mergeProps() <a class="header-anchor" href="#mergeprops" aria-label="Permalink to &quot;mergeProps() {#mergeprops}&quot;">​</a></h2><p>Merge multiple props objects with special handling for certain props.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> mergeProps</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">[])</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p><code>mergeProps()</code> supports merging multiple props objects with special handling for the following props:</p><ul><li><code>class</code></li><li><code>style</code></li><li><code>onXxx</code> event listeners - multiple listeners with the same name will be merged into an array.</li></ul><p>If you do not need the merge behavior and want simple overwrites, native object spread can be used instead.</p></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { mergeProps } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> one</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  class: </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  onClick: handlerA</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> two</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  class: { bar: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  onClick: handlerB</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> merged</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> mergeProps</span><span style="color:#E1E4E8;">(one, two)</span></span>\n<span class="line"><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">   class: &#39;foo bar&#39;,</span></span>\n<span class="line"><span style="color:#6A737D;">   onClick: [handlerA, handlerB]</span></span>\n<span class="line"><span style="color:#6A737D;"> }</span></span>\n<span class="line"><span style="color:#6A737D;"> */</span></span></code></pre></div></li></ul><h2 id="clonevnode" tabindex="-1">cloneVNode() <a class="header-anchor" href="#clonevnode" aria-label="Permalink to &quot;cloneVNode() {#clonevnode}&quot;">​</a></h2><p>Clones a vnode.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> cloneVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">vnode</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">extraProps</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> VNode</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>Returns a cloned vnode, optionally with extra props to merge with the original.</p><p>Vnodes should be considered immutable once created, and you should not mutate the props of an existing vnode. Instead, clone it with different / extra props.</p><p>Vnodes have special internal properties, so cloning them is not as simple as an object spread. <code>cloneVNode()</code> handles most of the internal logic.</p></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h, cloneVNode } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> original</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> cloned</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> cloneVNode</span><span style="color:#E1E4E8;">(original, { id: </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;"> })</span></span></code></pre></div></li></ul><h2 id="isvnode" tabindex="-1">isVNode() <a class="header-anchor" href="#isvnode" aria-label="Permalink to &quot;isVNode() {#isvnode}&quot;">​</a></h2><p>Checks if a value is a vnode.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> isVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> boolean</span></span></code></pre></div></li></ul><h2 id="resolvecomponent" tabindex="-1">resolveComponent() <a class="header-anchor" href="#resolvecomponent" aria-label="Permalink to &quot;resolveComponent() {#resolvecomponent}&quot;">​</a></h2><p>For manually resolving a registered component by name.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> resolveComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Component</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> string</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p><strong>Note: you do not need this if you can import the component directly.</strong></p><p><code>resolveComponent()</code> must be called inside<span class="composition-api"> either <code>setup()</code> or</span> the render function in order to resolve from the correct component context.</p><p>If the component is not found, a runtime warning will be emitted, and the name string is returned.</p></li><li><p><strong>Example</strong></p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h, resolveComponent } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> ButtonCounter</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> resolveComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ButtonCounter&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">      return</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(ButtonCounter)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h, resolveComponent } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  render</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> ButtonCounter</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> resolveComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ButtonCounter&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(ButtonCounter)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div></li><li><p><strong>See also</strong> <a href="/guide/extras/render-function.html#components">Guide - Render Functions - Components</a></p></li></ul><h2 id="resolvedirective" tabindex="-1">resolveDirective() <a class="header-anchor" href="#resolvedirective" aria-label="Permalink to &quot;resolveDirective() {#resolvedirective}&quot;">​</a></h2><p>For manually resolving a registered directive by name.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> resolveDirective</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Directive</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p><strong>Note: you do not need this if you can import the directive directly.</strong></p><p><code>resolveDirective()</code> must be called inside<span class="composition-api"> either <code>setup()</code> or</span> the render function in order to resolve from the correct component context.</p><p>If the directive is not found, a runtime warning will be emitted, and the function returns <code>undefined</code>.</p></li><li><p><strong>See also</strong> <a href="/guide/extras/render-function.html#custom-directives">Guide - Render Functions - Custom Directives</a></p></li></ul><h2 id="withdirectives" tabindex="-1">withDirectives() <a class="header-anchor" href="#withdirectives" aria-label="Permalink to &quot;withDirectives() {#withdirectives}&quot;">​</a></h2><p>For adding custom directives to vnodes.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> withDirectives</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#FFAB70;">  vnode</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  directives</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> DirectiveArguments</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> VNode</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// [Directive, value, argument, modifiers]</span></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> DirectiveArguments</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> Array</span><span style="color:#E1E4E8;">&lt;</span></span>\n<span class="line"><span style="color:#F97583;">  |</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">Directive</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#F97583;">  |</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">Directive</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#F97583;">  |</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">Directive</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#F97583;">  |</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">Directive</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">DirectiveModifiers</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>Wraps an existing vnode with custom directives. The second argument is an array of custom directives. Each custom directive is also represented as an array in the form of <code>[Directive, value, argument, modifiers]</code>. Tailing elements of the array can be omitted if not needed.</p></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h, withDirectives } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// a custom directive</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pin</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  mounted</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">    /* ... */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#B392F0;">  updated</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">    /* ... */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// &lt;div v-pin:top.animate=&quot;200&quot;&gt;&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> vnode</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> withDirectives</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">), [</span></span>\n<span class="line"><span style="color:#E1E4E8;">  [pin, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;top&#39;</span><span style="color:#E1E4E8;">, { animate: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }]</span></span>\n<span class="line"><span style="color:#E1E4E8;">])</span></span></code></pre></div></li><li><p><strong>See also</strong> <a href="/guide/extras/render-function.html#custom-directives">Guide - Render Functions - Custom Directives</a></p></li></ul><h2 id="withmodifiers" tabindex="-1">withModifiers() <a class="header-anchor" href="#withmodifiers" aria-label="Permalink to &quot;withModifiers() {#withmodifiers}&quot;">​</a></h2><p>For adding built-in <a href="/guide/essentials/event-handling.html#event-modifiers"><code>v-on</code> modifiers</a> to an event handler function.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> withModifiers</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fn</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Function</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">modifiers</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">[])</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Function</span></span></code></pre></div></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h, withModifiers } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> vnode</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;button&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#6A737D;">  // equivalent of v-on:click.stop.prevent</span></span>\n<span class="line"><span style="color:#E1E4E8;">  onClick: </span><span style="color:#B392F0;">withModifiers</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">    // ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }, [</span><span style="color:#9ECBFF;">&#39;stop&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;prevent&#39;</span><span style="color:#E1E4E8;">])</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div></li><li><p><strong>See also</strong> <a href="/guide/extras/render-function.html#event-modifiers">Guide - Render Functions - Event Modifiers</a></p></li></ul>',25)];const t=s(p,[["render",function(s,l,o,p,t,r){return a(),n("div",null,e)}]]);export{o as __pageData,t as default};
