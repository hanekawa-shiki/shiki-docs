import{_ as s,c as n,o as a,b as l}from"./chunks/framework.B9NywAPp.js";const p=JSON.parse('{"title":"Options: State","description":"","frontmatter":{},"headers":[{"level":2,"title":"data","slug":"data","link":"#data","children":[]},{"level":2,"title":"props","slug":"props","link":"#props","children":[]},{"level":2,"title":"computed","slug":"computed","link":"#computed","children":[]},{"level":2,"title":"methods","slug":"methods","link":"#methods","children":[]},{"level":2,"title":"watch","slug":"watch","link":"#watch","children":[]},{"level":2,"title":"emits","slug":"emits","link":"#emits","children":[]},{"level":2,"title":"expose","slug":"expose","link":"#expose","children":[]}],"relativePath":"api/options-state.md","filePath":"api/options-state.md"}'),o={name:"api/options-state.md"},e=[l('<h1 id="options-state" tabindex="-1">Options: State <a class="header-anchor" href="#options-state" aria-label="Permalink to &quot;Options: State {#options-state}&quot;">​</a></h1><h2 id="data" tabindex="-1">data <a class="header-anchor" href="#data" aria-label="Permalink to &quot;data {#data}&quot;">​</a></h2><p>A function that returns the initial reactive state for the component instance.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> ComponentOptions</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComponentPublicInstance</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">    vm</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComponentPublicInstance</span></span>\n<span class="line"><span style="color:#E1E4E8;">  )</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>The function is expected to return a plain JavaScript object, which will be made reactive by Vue. After the instance is created, the reactive data object can be accessed as <code>this.$data</code>. The component instance also proxies all the properties found on the data object, so <code>this.a</code> will be equivalent to <code>this.$data.a</code>.</p><p>All top-level data properties must be included in the returned data object. Adding new properties to <code>this.$data</code> is possible, but it is <strong>not</strong> recommended. If the desired value of a property is not yet available then an empty value such as <code>undefined</code> or <code>null</code> should be included as a placeholder to ensure that Vue knows that the property exists.</p><p>Properties that start with <code>_</code> or <code>$</code> will <strong>not</strong> be proxied on the component instance because they may conflict with Vue&#39;s internal properties and API methods. You will have to access them as <code>this.$data._property</code>.</p><p>It is <strong>not</strong> recommended to return objects with their own stateful behavior like browser API objects and prototype properties. The returned object should ideally be a plain object that only represents the state of the component.</p></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#B392F0;">  created</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.a) </span><span style="color:#6A737D;">// 1</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$data) </span><span style="color:#6A737D;">// { a: 1 }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>Note that if you use an arrow function with the <code>data</code> property, <code>this</code> won&#39;t be the component&#39;s instance, but you can still access the instance as the function&#39;s first argument:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">vm</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({ a: vm.myProp })</span></span></code></pre></div></li><li><p><strong>See also</strong> <a href="/guide/extras/reactivity-in-depth.html">Reactivity in Depth</a></p></li></ul><h2 id="props" tabindex="-1">props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;props {#props}&quot;">​</a></h2><p>Declare the props of a component.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> ComponentOptions</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">  props</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> ArrayPropsOptions</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> ObjectPropsOptions</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> ArrayPropsOptions</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">[]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> ObjectPropsOptions</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> { [</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Prop</span><span style="color:#E1E4E8;"> }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Prop</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> PropOptions</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#B392F0;"> PropType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#79B8FF;"> null</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> PropOptions</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>\n<span class="line"><span style="color:#FFAB70;">  type</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> PropType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#FFAB70;">  required</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span></span>\n<span class="line"><span style="color:#FFAB70;">  default</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> |</span><span style="color:#E1E4E8;"> ((</span><span style="color:#FFAB70;">rawProps</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#B392F0;">  validator</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">rawProps</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> boolean</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> PropType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ()</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ()</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;"> }[]</span></span></code></pre></div><blockquote><p>Types are simplified for readability.</p></blockquote></li><li><p><strong>Details</strong></p><p>In Vue, all component props need to be explicitly declared. Component props can be declared in two forms:</p><ul><li>Simple form using an array of strings</li><li>Full form using an object where each property key is the name of the prop, and the value is the prop&#39;s type (a constructor function) or advanced options.</li></ul><p>With object-based syntax, each prop can further define the following options:</p><ul><li><p><strong><code>type</code></strong>: Can be one of the following native constructors: <code>String</code>, <code>Number</code>, <code>Boolean</code>, <code>Array</code>, <code>Object</code>, <code>Date</code>, <code>Function</code>, <code>Symbol</code>, any custom constructor function or an array of those. In development mode, Vue will check if a prop&#39;s value matches the declared type, and will throw a warning if it doesn&#39;t. See <a href="/guide/components/props.html#prop-validation">Prop Validation</a> for more details.</p><p>Also note that a prop with <code>Boolean</code> type affects its value casting behavior in both development and production. See <a href="/guide/components/props.html#boolean-casting">Boolean Casting</a> for more details.</p></li><li><p><strong><code>default</code></strong>: Specifies a default value for the prop when it is not passed by the parent or has <code>undefined</code> value. Object or array defaults must be returned using a factory function. The factory function also receives the raw props object as the argument.</p></li><li><p><strong><code>required</code></strong>: Defines if the prop is required. In a non-production environment, a console warning will be thrown if this value is truthy and the prop is not passed.</p></li><li><p><strong><code>validator</code></strong>: Custom validator function that takes the prop value as the sole argument. In development mode, a console warning will be thrown if this function returns a falsy value (i.e. the validation fails).</p></li></ul></li><li><p><strong>Example</strong></p><p>Simple declaration:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: [</span><span style="color:#9ECBFF;">&#39;size&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;myMessage&#39;</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>Object declaration with validations:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>\n<span class="line"><span style="color:#6A737D;">    // type check</span></span>\n<span class="line"><span style="color:#E1E4E8;">    height: Number,</span></span>\n<span class="line"><span style="color:#6A737D;">    // type check plus other validations</span></span>\n<span class="line"><span style="color:#E1E4E8;">    age: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      type: Number,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      default: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      required: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#B392F0;">      validator</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">&gt;=</span><span style="color:#79B8FF;"> 0</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/components/props.html">Guide - Props</a></li><li><a href="/guide/typescript/options-api.html#typing-component-props">Guide - Typing Component Props</a> <sup class="vt-badge ts"></sup></li></ul></li></ul><h2 id="computed" tabindex="-1">computed <a class="header-anchor" href="#computed" aria-label="Permalink to &quot;computed {#computed}&quot;">​</a></h2><p>Declare computed properties to be exposed on the component instance.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> ComponentOptions</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">  computed</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComputedGetter</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#B392F0;"> WritableComputedOptions</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> ComputedGetter</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#79B8FF;">  this</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComponentPublicInstance</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  vm</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComponentPublicInstance</span></span>\n<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> T</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> ComputedSetter</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#79B8FF;">  this</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComponentPublicInstance</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  value</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span></span>\n<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> WritableComputedOptions</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">  get</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComputedGetter</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#FFAB70;">  set</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComputedSetter</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>The option accepts an object where the key is the name of the computed property, and the value is either a computed getter, or an object with <code>get</code> and <code>set</code> methods (for writable computed properties).</p><p>All getters and setters have their <code>this</code> context automatically bound to the component instance.</p><p>Note that if you use an arrow function with a computed property, <code>this</code> won&#39;t point to the component&#39;s instance, but you can still access the instance as the function&#39;s first argument:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  computed: {</span></span>\n<span class="line"><span style="color:#B392F0;">    aDouble</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">vm</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> vm.a </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;"> 2</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  computed: {</span></span>\n<span class="line"><span style="color:#6A737D;">    // readonly</span></span>\n<span class="line"><span style="color:#B392F0;">    aDouble</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">      return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.a </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;"> 2</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#6A737D;">    // writable</span></span>\n<span class="line"><span style="color:#E1E4E8;">    aPlus: {</span></span>\n<span class="line"><span style="color:#B392F0;">      get</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">        return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.a </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span></span>\n<span class="line"><span style="color:#E1E4E8;">      },</span></span>\n<span class="line"><span style="color:#B392F0;">      set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;"> 1</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#B392F0;">  created</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.aDouble) </span><span style="color:#6A737D;">// =&gt; 2</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.aPlus) </span><span style="color:#6A737D;">// =&gt; 2</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.aPlus </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 3</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.a) </span><span style="color:#6A737D;">// =&gt; 2</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.aDouble) </span><span style="color:#6A737D;">// =&gt; 4</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/essentials/computed.html">Guide - Computed Properties</a></li><li><a href="/guide/typescript/options-api.html#typing-computed-properties">Guide - Typing Computed Properties</a> <sup class="vt-badge ts"></sup></li></ul></li></ul><h2 id="methods" tabindex="-1">methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;methods {#methods}&quot;">​</a></h2><p>Declare methods to be mixed into the component instance.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> ComponentOptions</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">  methods</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComponentPublicInstance</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">[]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> any</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>Declared methods can be directly accessed on the component instance, or used in template expressions. All methods have their <code>this</code> context automatically bound to the component instance, even when passed around.</p><p>Avoid using arrow functions when declaring methods, as they will not have access to the component instance via <code>this</code>.</p></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  methods: {</span></span>\n<span class="line"><span style="color:#B392F0;">    plus</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">.a</span><span style="color:#F97583;">++</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#B392F0;">  created</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">plus</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.a) </span><span style="color:#6A737D;">// =&gt; 2</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>See also</strong> <a href="/guide/essentials/event-handling.html">Event Handling</a></p></li></ul><h2 id="watch" tabindex="-1">watch <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;watch {#watch}&quot;">​</a></h2><p>Declare watch callbacks to be invoked on data change.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> ComponentOptions</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">  watch</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> WatchOptionItem</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> WatchOptionItem</span><span style="color:#E1E4E8;">[]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> WatchOptionItem</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> WatchCallback</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> ObjectWatchOptionItem</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> WatchCallback</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#FFAB70;">  value</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">  oldValue</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#B392F0;">  onCleanup</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">cleanupFn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> ObjectWatchOptionItem</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">  handler</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> WatchCallback</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#FFAB70;">  immediate</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span><span style="color:#6A737D;"> // default: false</span></span>\n<span class="line"><span style="color:#FFAB70;">  deep</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span><span style="color:#6A737D;"> // default: false</span></span>\n<span class="line"><span style="color:#FFAB70;">  flush</span><span style="color:#F97583;">?:</span><span style="color:#9ECBFF;"> &#39;pre&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;post&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;sync&#39;</span><span style="color:#6A737D;"> // default: &#39;pre&#39;</span></span>\n<span class="line"><span style="color:#B392F0;">  onTrack</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> DebuggerEvent</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"><span style="color:#B392F0;">  onTrigger</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> DebuggerEvent</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>Types are simplified for readability.</p></blockquote></li><li><p><strong>Details</strong></p><p>The <code>watch</code> option expects an object where keys are the reactive component instance properties to watch (e.g. properties declared via <code>data</code> or <code>computed</code>) — and values are the corresponding callbacks. The callback receives the new value and the old value of the watched source.</p><p>In addition to a root-level property, the key can also be a simple dot-delimited path, e.g. <code>a.b.c</code>. Note that this usage does <strong>not</strong> support complex expressions - only dot-delimited paths are supported. If you need to watch complex data sources, use the imperative <a href="/api/component-instance.html#watch"><code>$watch()</code></a> API instead.</p><p>The value can also be a string of a method name (declared via <code>methods</code>), or an object that contains additional options. When using the object syntax, the callback should be declared under the <code>handler</code> field. Additional options include:</p><ul><li><strong><code>immediate</code></strong>: trigger the callback immediately on watcher creation. Old value will be <code>undefined</code> on the first call.</li><li><strong><code>deep</code></strong>: force deep traversal of the source if it is an object or an array, so that the callback fires on deep mutations. See <a href="/guide/essentials/watchers.html#deep-watchers">Deep Watchers</a>.</li><li><strong><code>flush</code></strong>: adjust the callback&#39;s flush timing. See <a href="/guide/essentials/watchers.html#callback-flush-timing">Callback Flush Timing</a> and <a href="/api/reactivity-core.html#watcheffect"><code>watchEffect()</code></a>.</li><li><strong><code>onTrack / onTrigger</code></strong>: debug the watcher&#39;s dependencies. See <a href="/guide/extras/reactivity-in-depth.html#watcher-debugging">Watcher Debugging</a>.</li></ul><p>Avoid using arrow functions when declaring watch callbacks as they will not have access to the component instance via <code>this</code>.</p></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      c: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        d: </span><span style="color:#79B8FF;">4</span></span>\n<span class="line"><span style="color:#E1E4E8;">      },</span></span>\n<span class="line"><span style="color:#E1E4E8;">      e: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      f: </span><span style="color:#79B8FF;">6</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  watch: {</span></span>\n<span class="line"><span style="color:#6A737D;">    // watching top-level property</span></span>\n<span class="line"><span style="color:#B392F0;">    a</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`new: ${</span><span style="color:#E1E4E8;">val</span><span style="color:#9ECBFF;">}, old: ${</span><span style="color:#E1E4E8;">oldVal</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#6A737D;">    // string method name</span></span>\n<span class="line"><span style="color:#E1E4E8;">    b: </span><span style="color:#9ECBFF;">&#39;someMethod&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#6A737D;">    // the callback will be called whenever any of the watched object properties change regardless of their nested depth</span></span>\n<span class="line"><span style="color:#E1E4E8;">    c: {</span></span>\n<span class="line"><span style="color:#B392F0;">      handler</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;c changed&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      },</span></span>\n<span class="line"><span style="color:#E1E4E8;">      deep: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#6A737D;">    // watching a single nested property:</span></span>\n<span class="line"><span style="color:#9ECBFF;">    &#39;c.d&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">      // do something</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#6A737D;">    // the callback will be called immediately after the start of the observation</span></span>\n<span class="line"><span style="color:#E1E4E8;">    e: {</span></span>\n<span class="line"><span style="color:#B392F0;">      handler</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;e changed&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      },</span></span>\n<span class="line"><span style="color:#E1E4E8;">      immediate: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#6A737D;">    // you can pass array of callbacks, they will be called one-by-one</span></span>\n<span class="line"><span style="color:#E1E4E8;">    f: [</span></span>\n<span class="line"><span style="color:#9ECBFF;">      &#39;handle1&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#F97583;">      function</span><span style="color:#B392F0;"> handle2</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;handle2 triggered&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      },</span></span>\n<span class="line"><span style="color:#E1E4E8;">      {</span></span>\n<span class="line"><span style="color:#B392F0;">        handler</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> handle3</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;handle3 triggered&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#6A737D;">        /* ... */</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  methods: {</span></span>\n<span class="line"><span style="color:#B392F0;">    someMethod</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b changed&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#B392F0;">    handle1</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;handle 1 triggered&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#B392F0;">  created</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.a </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 3</span><span style="color:#6A737D;"> // =&gt; new: 3, old: 1</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>See also</strong> <a href="/guide/essentials/watchers.html">Watchers</a></p></li></ul><h2 id="emits" tabindex="-1">emits <a class="header-anchor" href="#emits" aria-label="Permalink to &quot;emits {#emits}&quot;">​</a></h2><p>Declare the custom events emitted by the component.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> ComponentOptions</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">  emits</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> ArrayEmitsOptions</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> ObjectEmitsOptions</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> ArrayEmitsOptions</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">[]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> ObjectEmitsOptions</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> { [</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> EmitValidator</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;"> }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> EmitValidator</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">[]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> boolean</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>Emitted events can be declared in two forms:</p><ul><li>Simple form using an array of strings</li><li>Full form using an object where each property key is the name of the event, and the value is either <code>null</code> or a validator function.</li></ul><p>The validation function will receive the additional arguments passed to the component&#39;s <code>$emit</code> call. For example, if <code>this.$emit(&#39;foo&#39;, 1)</code> is called, the corresponding validator for <code>foo</code> will receive the argument <code>1</code>. The validator function should return a boolean to indicate whether the event arguments are valid.</p><p>Note that the <code>emits</code> option affects which event listeners are considered component event listeners, rather than native DOM event listeners. The listeners for declared events will be removed from the component&#39;s <code>$attrs</code> object, so they will not be passed through to the component&#39;s root element. See <a href="/guide/components/attrs.html">Fallthrough Attributes</a> for more details.</p></li><li><p><strong>Example</strong></p><p>Array syntax:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  emits: [</span><span style="color:#9ECBFF;">&#39;check&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#B392F0;">  created</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;check&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>Object syntax:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  emits: {</span></span>\n<span class="line"><span style="color:#6A737D;">    // no validation</span></span>\n<span class="line"><span style="color:#E1E4E8;">    click: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">    // with validation</span></span>\n<span class="line"><span style="color:#B392F0;">    submit</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">payload</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (payload.email </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> payload.password) {</span></span>\n<span class="line"><span style="color:#F97583;">        return</span><span style="color:#79B8FF;"> true</span></span>\n<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`Invalid submit event payload!`</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#F97583;">        return</span><span style="color:#79B8FF;"> false</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/components/attrs.html">Guide - Fallthrough Attributes</a></li><li><a href="/guide/typescript/options-api.html#typing-component-emits">Guide - Typing Component Emits</a> <sup class="vt-badge ts"></sup></li></ul></li></ul><h2 id="expose" tabindex="-1">expose <a class="header-anchor" href="#expose" aria-label="Permalink to &quot;expose {#expose}&quot;">​</a></h2><p>Declare exposed public properties when the component instance is accessed by a parent via template refs.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> ComponentOptions</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">  expose</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">[]</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>By default, a component instance exposes all instance properties to the parent when accessed via <code>$parent</code>, <code>$root</code>, or template refs. This can be undesirable, since a component most likely has internal state or methods that should be kept private to avoid tight coupling.</p><p>The <code>expose</code> option expects a list of property name strings. When <code>expose</code> is used, only the properties explicitly listed will be exposed on the component&#39;s public instance.</p><p><code>expose</code> only affects user-defined properties - it does not filter out built-in component instance properties.</p></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">  // only `publicMethod` will be available on the public instance</span></span>\n<span class="line"><span style="color:#E1E4E8;">  expose: [</span><span style="color:#9ECBFF;">&#39;publicMethod&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">  methods: {</span></span>\n<span class="line"><span style="color:#B392F0;">    publicMethod</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">      // ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#B392F0;">    privateMethod</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">      // ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li></ul>',22)];const t=s(o,[["render",function(s,l,p,o,t,c){return a(),n("div",null,e)}]]);export{p as __pageData,t as default};
