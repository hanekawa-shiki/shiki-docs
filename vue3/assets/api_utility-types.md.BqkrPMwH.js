import{_ as s,c as n,o as a,b as p}from"./chunks/framework.B9NywAPp.js";const e=JSON.parse('{"title":"Utility Types","description":"","frontmatter":{},"headers":[{"level":2,"title":"PropType<T>","slug":"proptype-t","link":"#proptype-t","children":[]},{"level":2,"title":"MaybeRef<T>","slug":"mayberef","link":"#mayberef","children":[]},{"level":2,"title":"MaybeRefOrGetter<T>","slug":"maybereforgetter","link":"#maybereforgetter","children":[]},{"level":2,"title":"ExtractPropTypes<T>","slug":"extractproptypes","link":"#extractproptypes","children":[]},{"level":2,"title":"ExtractPublicPropTypes<T>","slug":"extractpublicproptypes","link":"#extractpublicproptypes","children":[]},{"level":2,"title":"ComponentCustomProperties","slug":"componentcustomproperties","link":"#componentcustomproperties","children":[]},{"level":2,"title":"ComponentCustomOptions","slug":"componentcustomoptions","link":"#componentcustomoptions","children":[]},{"level":2,"title":"ComponentCustomProps","slug":"componentcustomprops","link":"#componentcustomprops","children":[]},{"level":2,"title":"CSSProperties","slug":"cssproperties","link":"#cssproperties","children":[]}],"relativePath":"api/utility-types.md","filePath":"api/utility-types.md"}'),o={name:"api/utility-types.md"},l=[p('<h1 id="utility-types" tabindex="-1">Utility Types <a class="header-anchor" href="#utility-types" aria-label="Permalink to &quot;Utility Types {#utility-types}&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This page only lists a few commonly used utility types that may need explanation for their usage. For a full list of exported types, consult the <a href="https://github.com/vuejs/core/blob/main/packages/runtime-core/src/index.ts#L131" target="_blank" rel="noreferrer">source code</a>.</p></div><h2 id="proptype-t" tabindex="-1">PropType&lt;T&gt; <a class="header-anchor" href="#proptype-t" aria-label="Permalink to &quot;PropType\\&lt;T&gt; {#proptype-t}&quot;">​</a></h2><p>Used to annotate a prop with more advanced types when using runtime props declarations.</p><ul><li><p><strong>Example</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { PropType } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> Book</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">  title</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#FFAB70;">  author</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#FFAB70;">  year</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    book: {</span></span>\n<span class="line"><span style="color:#6A737D;">      // provide more specific type to `Object`</span></span>\n<span class="line"><span style="color:#E1E4E8;">      type: Object </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> PropType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Book</span><span style="color:#E1E4E8;">&gt;,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      required: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>See also</strong> <a href="/guide/typescript/options-api.html#typing-component-props">Guide - Typing Component Props</a></p></li></ul><h2 id="mayberef" tabindex="-1">MaybeRef&lt;T&gt; <a class="header-anchor" href="#mayberef" aria-label="Permalink to &quot;MaybeRef\\&lt;T&gt; {#mayberef}&quot;">​</a></h2><p>Alias for <code>T | Ref&lt;T&gt;</code>. Useful for annotating arguments of <a href="/guide/reusability/composables.html">Composables</a>.</p><ul><li>Only supported in 3.3+.</li></ul><h2 id="maybereforgetter" tabindex="-1">MaybeRefOrGetter&lt;T&gt; <a class="header-anchor" href="#maybereforgetter" aria-label="Permalink to &quot;MaybeRefOrGetter\\&lt;T&gt; {#maybereforgetter}&quot;">​</a></h2><p>Alias for <code>T | Ref&lt;T&gt; | (() =&gt; T)</code>. Useful for annotating arguments of <a href="/guide/reusability/composables.html">Composables</a>.</p><ul><li>Only supported in 3.3+.</li></ul><h2 id="extractproptypes" tabindex="-1">ExtractPropTypes&lt;T&gt; <a class="header-anchor" href="#extractproptypes" aria-label="Permalink to &quot;ExtractPropTypes\\&lt;T&gt; {#extractproptypes}&quot;">​</a></h2><p>Extract prop types from a runtime props options object. The extracted types are internal facing - i.e. the resolved props received by the component. This means boolean props and props with default values are always defined, even if they are not required.</p><p>To extract public facing props, i.e. props that the parent is allowed to pass, use <a href="#extractpublicproptypes"><code>ExtractPublicPropTypes</code></a>.</p><ul><li><p><strong>Example</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> propsOptions</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  foo: String,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  bar: Boolean,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  baz: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    type: Number,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    required: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  qux: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    type: Number,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    default: </span><span style="color:#79B8FF;">1</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">as</span><span style="color:#F97583;"> const</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ExtractPropTypes</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> propsOptions&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">// {</span></span>\n<span class="line"><span style="color:#6A737D;">//   foo?: string,</span></span>\n<span class="line"><span style="color:#6A737D;">//   bar: boolean,</span></span>\n<span class="line"><span style="color:#6A737D;">//   baz: number,</span></span>\n<span class="line"><span style="color:#6A737D;">//   qux: number</span></span>\n<span class="line"><span style="color:#6A737D;">// }</span></span></code></pre></div></li></ul><h2 id="extractpublicproptypes" tabindex="-1">ExtractPublicPropTypes&lt;T&gt; <a class="header-anchor" href="#extractpublicproptypes" aria-label="Permalink to &quot;ExtractPublicPropTypes\\&lt;T&gt; {#extractpublicproptypes}&quot;">​</a></h2><p>Extract prop types from a runtime props options object. The extracted types are public facing - i.e. the props that the parent is allowed to pass.</p><ul><li><p>Only supported in 3.3+.</p></li><li><p><strong>Example</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> propsOptions</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  foo: String,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  bar: Boolean,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  baz: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    type: Number,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    required: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  qux: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    type: Number,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    default: </span><span style="color:#79B8FF;">1</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">as</span><span style="color:#F97583;"> const</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ExtractPublicPropTypes</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> propsOptions&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">// {</span></span>\n<span class="line"><span style="color:#6A737D;">//   foo?: string,</span></span>\n<span class="line"><span style="color:#6A737D;">//   bar?: boolean,</span></span>\n<span class="line"><span style="color:#6A737D;">//   baz: number,</span></span>\n<span class="line"><span style="color:#6A737D;">//   qux?: number</span></span>\n<span class="line"><span style="color:#6A737D;">// }</span></span></code></pre></div></li></ul><h2 id="componentcustomproperties" tabindex="-1">ComponentCustomProperties <a class="header-anchor" href="#componentcustomproperties" aria-label="Permalink to &quot;ComponentCustomProperties {#componentcustomproperties}&quot;">​</a></h2><p>Used to augment the component instance type to support custom global properties.</p><ul><li><p><strong>Example</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> axios </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;axios&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">declare</span><span style="color:#F97583;"> module</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">  interface</span><span style="color:#B392F0;"> ComponentCustomProperties</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">    $http</span><span style="color:#F97583;">:</span><span style="color:#F97583;"> typeof</span><span style="color:#E1E4E8;"> axios</span></span>\n<span class="line"><span style="color:#B392F0;">    $translate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Augmentations must be placed in a module <code>.ts</code> or <code>.d.ts</code> file. See <a href="/guide/typescript/options-api.html#augmenting-global-properties">Type Augmentation Placement</a> for more details.</p></div></li><li><p><strong>See also</strong> <a href="/guide/typescript/options-api.html#augmenting-global-properties">Guide - Augmenting Global Properties</a></p></li></ul><h2 id="componentcustomoptions" tabindex="-1">ComponentCustomOptions <a class="header-anchor" href="#componentcustomoptions" aria-label="Permalink to &quot;ComponentCustomOptions {#componentcustomoptions}&quot;">​</a></h2><p>Used to augment the component options type to support custom options.</p><ul><li><p><strong>Example</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Route } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue-router&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">declare</span><span style="color:#F97583;"> module</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">  interface</span><span style="color:#B392F0;"> ComponentCustomOptions</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">    beforeRouteEnter</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">to</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">from</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">next</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Augmentations must be placed in a module <code>.ts</code> or <code>.d.ts</code> file. See <a href="/guide/typescript/options-api.html#augmenting-global-properties">Type Augmentation Placement</a> for more details.</p></div></li><li><p><strong>See also</strong> <a href="/guide/typescript/options-api.html#augmenting-custom-options">Guide - Augmenting Custom Options</a></p></li></ul><h2 id="componentcustomprops" tabindex="-1">ComponentCustomProps <a class="header-anchor" href="#componentcustomprops" aria-label="Permalink to &quot;ComponentCustomProps {#componentcustomprops}&quot;">​</a></h2><p>Used to augment allowed TSX props in order to use non-declared props on TSX elements.</p><ul><li><p><strong>Example</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#F97583;"> module</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">  interface</span><span style="color:#B392F0;"> ComponentCustomProps</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">    hello</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> {}</span></span></code></pre></div><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// now works even if hello is not a declared prop</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#B392F0;"> hello</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Augmentations must be placed in a module <code>.ts</code> or <code>.d.ts</code> file. See <a href="/guide/typescript/options-api.html#augmenting-global-properties">Type Augmentation Placement</a> for more details.</p></div></li></ul><h2 id="cssproperties" tabindex="-1">CSSProperties <a class="header-anchor" href="#cssproperties" aria-label="Permalink to &quot;CSSProperties {#cssproperties}&quot;">​</a></h2><p>Used to augment allowed values in style property bindings.</p><ul><li><p><strong>Example</strong></p><p>Allow any custom CSS property</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#F97583;"> module</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">  interface</span><span style="color:#B392F0;"> CSSProperties</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> `--${</span><span style="color:#79B8FF;">string</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{ { </span><span style="color:#9ECBFF;">&#39;--bg-color&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;blue&#39;</span><span style="color:#E1E4E8;"> } }&gt;</span></span></code></pre></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> :style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{ &#39;--bg-color&#39;: &#39;blue&#39; }&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Augmentations must be placed in a module <code>.ts</code> or <code>.d.ts</code> file. See <a href="/guide/typescript/options-api.html#augmenting-global-properties">Type Augmentation Placement</a> for more details.</p></div><div class="info custom-block"><p class="custom-block-title">See also</p><p>SFC <code>&lt;style&gt;</code> tags support linking CSS values to dynamic component state using the <code>v-bind</code> CSS function. This allows for custom properties without type augmentation.</p><ul><li><a href="/api/sfc-css-features.html#v-bind-in-css">v-bind() in CSS</a></li></ul></div>',32)];const t=s(o,[["render",function(s,p,e,o,t,r){return a(),n("div",null,l)}]]);export{e as __pageData,t as default};
