import{_ as e,c as o,o as t,b as r}from"./chunks/framework.B9NywAPp.js";const l=JSON.parse('{"title":"Production Deployment","description":"","frontmatter":{},"headers":[{"level":2,"title":"Development vs. Production","slug":"development-vs-production","link":"#development-vs-production","children":[]},{"level":2,"title":"Without Build Tools","slug":"without-build-tools","link":"#without-build-tools","children":[]},{"level":2,"title":"With Build Tools","slug":"with-build-tools","link":"#with-build-tools","children":[]},{"level":2,"title":"Tracking Runtime Errors","slug":"tracking-runtime-errors","link":"#tracking-runtime-errors","children":[]}],"relativePath":"guide/best-practices/production-deployment.md","filePath":"guide/best-practices/production-deployment.md"}'),s={name:"guide/best-practices/production-deployment.md"},a=[r('<h1 id="production-deployment" tabindex="-1">Production Deployment <a class="header-anchor" href="#production-deployment" aria-label="Permalink to &quot;Production Deployment {#production-deployment}&quot;">​</a></h1><h2 id="development-vs-production" tabindex="-1">Development vs. Production <a class="header-anchor" href="#development-vs-production" aria-label="Permalink to &quot;Development vs. Production {#development-vs-production}&quot;">​</a></h2><p>During development, Vue provides a number of features to improve the development experience:</p><ul><li>Warning for common errors and pitfalls</li><li>Props / events validation</li><li><a href="/guide/extras/reactivity-in-depth.html#reactivity-debugging">Reactivity debugging hooks</a></li><li>Devtools integration</li></ul><p>However, these features become useless in production. Some of the warning checks can also incur a small amount of performance overhead. When deploying to production, we should drop all the unused, development-only code branches for smaller payload size and better performance.</p><h2 id="without-build-tools" tabindex="-1">Without Build Tools <a class="header-anchor" href="#without-build-tools" aria-label="Permalink to &quot;Without Build Tools {#without-build-tools}&quot;">​</a></h2><p>If you are using Vue without a build tool by loading it from a CDN or self-hosted script, make sure to use the production build (dist files that end in <code>.prod.js</code>) when deploying to production. Production builds are pre-minified with all development-only code branches removed.</p><ul><li>If using global build (accessing via the <code>Vue</code> global): use <code>vue.global.prod.js</code>.</li><li>If using ESM build (accessing via native ESM imports): use <code>vue.esm-browser.prod.js</code>.</li></ul><p>Consult the <a href="https://github.com/vuejs/core/tree/main/packages/vue#which-dist-file-to-use" target="_blank" rel="noreferrer">dist file guide</a> for more details.</p><h2 id="with-build-tools" tabindex="-1">With Build Tools <a class="header-anchor" href="#with-build-tools" aria-label="Permalink to &quot;With Build Tools {#with-build-tools}&quot;">​</a></h2><p>Projects scaffolded via <code>create-vue</code> (based on Vite) or Vue CLI (based on webpack) are pre-configured for production builds.</p><p>If using a custom setup, make sure that:</p><ol><li><code>vue</code> resolves to <code>vue.runtime.esm-bundler.js</code>.</li><li>The <a href="/api/compile-time-flags.html">compile time feature flags</a> are properly configured.</li><li><code>process.env<wbr>.NODE_ENV</code> is replaced with <code>&quot;production&quot;</code> during build.</li></ol><p>Additional references:</p><ul><li><a href="https://vitejs.dev/guide/build.html" target="_blank" rel="noreferrer">Vite production build guide</a></li><li><a href="https://vitejs.dev/guide/static-deploy.html" target="_blank" rel="noreferrer">Vite deployment guide</a></li><li><a href="https://cli.vuejs.org/guide/deployment.html" target="_blank" rel="noreferrer">Vue CLI deployment guide</a></li></ul><h2 id="tracking-runtime-errors" tabindex="-1">Tracking Runtime Errors <a class="header-anchor" href="#tracking-runtime-errors" aria-label="Permalink to &quot;Tracking Runtime Errors {#tracking-runtime-errors}&quot;">​</a></h2><p>The <a href="/api/application.html#app-config-errorhandler">app-level error handler</a> can be used to report errors to tracking services:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">app.config.</span><span style="color:#B392F0;">errorHandler</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">instance</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">  // report error to tracking services</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>Services such as <a href="https://docs.sentry.io/platforms/javascript/guides/vue/" target="_blank" rel="noreferrer">Sentry</a> and <a href="https://docs.bugsnag.com/platforms/javascript/vue/" target="_blank" rel="noreferrer">Bugsnag</a> also provide official integrations for Vue.</p>',19)];const i=e(s,[["render",function(e,r,l,s,i,n){return t(),o("div",null,a)}]]);export{l as __pageData,i as default};
