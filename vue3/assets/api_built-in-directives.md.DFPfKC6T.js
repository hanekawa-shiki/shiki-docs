import{_ as s,c as n,o as e,b as l}from"./chunks/framework.B9NywAPp.js";const a=JSON.parse('{"title":"Built-in Directives","description":"","frontmatter":{},"headers":[{"level":2,"title":"v-text","slug":"v-text","link":"#v-text","children":[]},{"level":2,"title":"v-html","slug":"v-html","link":"#v-html","children":[]},{"level":2,"title":"v-show","slug":"v-show","link":"#v-show","children":[]},{"level":2,"title":"v-if","slug":"v-if","link":"#v-if","children":[]},{"level":2,"title":"v-else","slug":"v-else","link":"#v-else","children":[]},{"level":2,"title":"v-else-if","slug":"v-else-if","link":"#v-else-if","children":[]},{"level":2,"title":"v-for","slug":"v-for","link":"#v-for","children":[]},{"level":2,"title":"v-on","slug":"v-on","link":"#v-on","children":[]},{"level":2,"title":"v-bind","slug":"v-bind","link":"#v-bind","children":[]},{"level":2,"title":"v-model","slug":"v-model","link":"#v-model","children":[]},{"level":2,"title":"v-slot","slug":"v-slot","link":"#v-slot","children":[]},{"level":2,"title":"v-pre","slug":"v-pre","link":"#v-pre","children":[]},{"level":2,"title":"v-once","slug":"v-once","link":"#v-once","children":[]},{"level":2,"title":"v-memo","slug":"v-memo","link":"#v-memo","children":[]},{"level":2,"title":"v-cloak","slug":"v-cloak","link":"#v-cloak","children":[]}],"relativePath":"api/built-in-directives.md","filePath":"api/built-in-directives.md"}'),o={name:"api/built-in-directives.md"},t=[l('<h1 id="built-in-directives" tabindex="-1">Built-in Directives <a class="header-anchor" href="#built-in-directives" aria-label="Permalink to &quot;Built-in Directives {#built-in-directives}&quot;">​</a></h1><h2 id="v-text" tabindex="-1">v-text <a class="header-anchor" href="#v-text" aria-label="Permalink to &quot;v-text {#v-text}&quot;">​</a></h2><p>Update the element&#39;s text content.</p><ul><li><p><strong>Expects:</strong> <code>string</code></p></li><li><p><strong>Details</strong></p><p><code>v-text</code> works by setting the element&#39;s <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent" target="_blank" rel="noreferrer">textContent</a> property, so it will overwrite any existing content inside the element. If you need to update the part of <code>textContent</code>, you should use <a href="/guide/essentials/template-syntax.html#text-interpolation">mustache interpolations</a> instead.</p></li><li><p><strong>Example</strong></p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">span</span><span style="color:#B392F0;"> v-text</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">msg</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- same as --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;{{msg}}&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>See also</strong> <a href="/guide/essentials/template-syntax.html#text-interpolation">Template Syntax - Text Interpolation</a></p></li></ul><h2 id="v-html" tabindex="-1">v-html <a class="header-anchor" href="#v-html" aria-label="Permalink to &quot;v-html {#v-html}&quot;">​</a></h2><p>Update the element&#39;s <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML" target="_blank" rel="noreferrer">innerHTML</a>.</p><ul><li><p><strong>Expects:</strong> <code>string</code></p></li><li><p><strong>Details</strong></p><p>Contents of <code>v-html</code> are inserted as plain HTML - Vue template syntax will not be processed. If you find yourself trying to compose templates using <code>v-html</code>, try to rethink the solution by using components instead.</p><div class="warning custom-block"><p class="custom-block-title">Security Note</p><p>Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="noreferrer">XSS attacks</a>. Only use <code>v-html</code> on trusted content and <strong>never</strong> on user-provided content.</p></div><p>In <a href="/guide/scaling-up/sfc.html">Single-File Components</a>, <code>scoped</code> styles will not apply to content inside <code>v-html</code>, because that HTML is not processed by Vue&#39;s template compiler. If you want to target <code>v-html</code> content with scoped CSS, you can instead use <a href="./sfc-css-features.html#css-modules">CSS modules</a> or an additional, global <code>&lt;style&gt;</code> element with a manual scoping strategy such as BEM.</p></li><li><p><strong>Example</strong></p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-html</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">html</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>See also</strong> <a href="/guide/essentials/template-syntax.html#raw-html">Template Syntax - Raw HTML</a></p></li></ul><h2 id="v-show" tabindex="-1">v-show <a class="header-anchor" href="#v-show" aria-label="Permalink to &quot;v-show {#v-show}&quot;">​</a></h2><p>Toggle the element&#39;s visibility based on the truthy-ness of the expression value.</p><ul><li><p><strong>Expects:</strong> <code>any</code></p></li><li><p><strong>Details</strong></p><p><code>v-show</code> works by setting the <code>display</code> CSS property via inline styles, and will try to respect the initial <code>display</code> value when the element is visible. It also triggers transitions when its condition changes.</p></li><li><p><strong>See also</strong> <a href="/guide/essentials/conditional.html#v-show">Conditional Rendering - v-show</a></p></li></ul><h2 id="v-if" tabindex="-1">v-if <a class="header-anchor" href="#v-if" aria-label="Permalink to &quot;v-if {#v-if}&quot;">​</a></h2><p>Conditionally render an element or a template fragment based on the truthy-ness of the expression value.</p><ul><li><p><strong>Expects:</strong> <code>any</code></p></li><li><p><strong>Details</strong></p><p>When a <code>v-if</code> element is toggled, the element and its contained directives / components are destroyed and re-constructed. If the initial condition is falsy, then the inner content won&#39;t be rendered at all.</p><p>Can be used on <code>&lt;template&gt;</code> to denote a conditional block containing only text or multiple elements.</p><p>This directive triggers transitions when its condition changes.</p><p>When used together, <code>v-if</code> has a higher priority than <code>v-for</code>. We don&#39;t recommend using these two directives together on one element — see the <a href="/guide/essentials/list.html#v-for-with-v-if">list rendering guide</a> for details.</p></li><li><p><strong>See also</strong> <a href="/guide/essentials/conditional.html#v-if">Conditional Rendering - v-if</a></p></li></ul><h2 id="v-else" tabindex="-1">v-else <a class="header-anchor" href="#v-else" aria-label="Permalink to &quot;v-else {#v-else}&quot;">​</a></h2><p>Denote the &quot;else block&quot; for <code>v-if</code> or a <code>v-if</code> / <code>v-else-if</code> chain.</p><ul><li><p><strong>Does not expect expression</strong></p></li><li><p><strong>Details</strong></p><ul><li><p>Restriction: previous sibling element must have <code>v-if</code> or <code>v-else-if</code>.</p></li><li><p>Can be used on <code>&lt;template&gt;</code> to denote a conditional block containing only text or multiple elements.</p></li></ul></li><li><p><strong>Example</strong></p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;"> 0.5</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  Now you see me</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-else</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  Now you don&#39;t</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>See also</strong> <a href="/guide/essentials/conditional.html#v-else">Conditional Rendering - v-else</a></p></li></ul><h2 id="v-else-if" tabindex="-1">v-else-if <a class="header-anchor" href="#v-else-if" aria-label="Permalink to &quot;v-else-if {#v-else-if}&quot;">​</a></h2><p>Denote the &quot;else if block&quot; for <code>v-if</code>. Can be chained.</p><ul><li><p><strong>Expects:</strong> <code>any</code></p></li><li><p><strong>Details</strong></p><ul><li><p>Restriction: previous sibling element must have <code>v-if</code> or <code>v-else-if</code>.</p></li><li><p>Can be used on <code>&lt;template&gt;</code> to denote a conditional block containing only text or multiple elements.</p></li></ul></li><li><p><strong>Example</strong></p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">type </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;A&#39;&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  A</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-else-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">type </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;B&#39;&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  B</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-else-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">type </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;C&#39;&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  C</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-else</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  Not A/B/C</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>See also</strong> <a href="/guide/essentials/conditional.html#v-else-if">Conditional Rendering - v-else-if</a></p></li></ul><h2 id="v-for" tabindex="-1">v-for <a class="header-anchor" href="#v-for" aria-label="Permalink to &quot;v-for {#v-for}&quot;">​</a></h2><p>Render the element or template block multiple times based on the source data.</p><ul><li><p><strong>Expects:</strong> <code>Array | Object | number | string | Iterable</code></p></li><li><p><strong>Details</strong></p><p>The directive&#39;s value must use the special syntax <code>alias in expression</code> to provide an alias for the current element being iterated on:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">item </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> items</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  {{ item.text }}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Alternatively, you can also specify an alias for the index (or the key if used on an Object):</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">(item, index) </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> items</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">(value, key) </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> object</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">(value, name, index) </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> object</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>The default behavior of <code>v-for</code> will try to patch the elements in-place without moving them. To force it to reorder elements, you should provide an ordering hint with the <code>key</code> special attribute:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">item </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> items</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">item.id</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  {{ item.text }}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>v-for</code> can also work on values that implement the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol" target="_blank" rel="noreferrer">Iterable Protocol</a>, including native <code>Map</code> and <code>Set</code>.</p></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/essentials/list.html">List Rendering</a></li></ul></li></ul><h2 id="v-on" tabindex="-1">v-on <a class="header-anchor" href="#v-on" aria-label="Permalink to &quot;v-on {#v-on}&quot;">​</a></h2><p>Attach an event listener to the element.</p><ul><li><p><strong>Shorthand:</strong> <code>@</code></p></li><li><p><strong>Expects:</strong> <code>Function | Inline Statement | Object (without argument)</code></p></li><li><p><strong>Argument:</strong> <code>event</code> (optional if using Object syntax)</p></li><li><p><strong>Modifiers</strong></p><ul><li><code>.stop</code> - call <code>event.stopPropagation()</code>.</li><li><code>.prevent</code> - call <code>event.preventDefault()</code>.</li><li><code>.capture</code> - add event listener in capture mode.</li><li><code>.self</code> - only trigger handler if event was dispatched from this element.</li><li><code>.{keyAlias}</code> - only trigger handler on certain keys.</li><li><code>.once</code> - trigger handler at most once.</li><li><code>.left</code> - only trigger handler for left button mouse events.</li><li><code>.right</code> - only trigger handler for right button mouse events.</li><li><code>.middle</code> - only trigger handler for middle button mouse events.</li><li><code>.passive</code> - attaches a DOM event with <code>{ passive: true }</code>.</li></ul></li><li><p><strong>Details</strong></p><p>The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present.</p><p>When used on a normal element, it listens to <a href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank" rel="noreferrer"><strong>native DOM events</strong></a> only. When used on a custom element component, it listens to <strong>custom events</strong> emitted on that child component.</p><p>When listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special <code>$event</code> property: <code>v-on:click=&quot;handle(&#39;ok&#39;, $event)&quot;</code>.</p><p><code>v-on</code> also supports binding to an object of event / listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.</p></li><li><p><strong>Example</strong></p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- method handler --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> v-on</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">doThis</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- dynamic event --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> v-on:</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">event</span><span style="color:#E1E4E8;">]=</span><span style="color:#9ECBFF;">&quot;doThis&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- inline statement --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> v-on</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">doThat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">, $event)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- shorthand --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">doThis</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- shorthand dynamic event --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> @[</span><span style="color:#B392F0;">event</span><span style="color:#E1E4E8;">]=</span><span style="color:#9ECBFF;">&quot;doThis&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- stop propagation --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stop</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">doThis</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- prevent default --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">prevent</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">doThis</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- prevent default without expression --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">form</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">prevent</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">form</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- chain modifiers --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">.stop.</span><span style="color:#B392F0;">prevent</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">doThis</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- key modifier using keyAlias --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">keyup</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">enter</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">onEnter</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- the click event will be triggered at most once --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> v-on</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">once</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">doThis</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- object syntax --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> v-on</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">{ mousedown: doThis, mouseup: doThat }</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Listening to custom events on a child component (the handler is called when &quot;my-event&quot; is emitted on the child):</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">my-event</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">handleThis</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- inline statement --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">my-event</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">handleThis</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">, $event)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/essentials/event-handling.html">Event Handling</a></li><li><a href="/guide/essentials/component-basics.html#listening-to-events">Components - Custom Events</a></li></ul></li></ul><h2 id="v-bind" tabindex="-1">v-bind <a class="header-anchor" href="#v-bind" aria-label="Permalink to &quot;v-bind {#v-bind}&quot;">​</a></h2><p>Dynamically bind one or more attributes, or a component prop to an expression.</p><ul><li><p><strong>Shorthand:</strong></p><ul><li><code>:</code> or <code>.</code> (when using <code>.prop</code> modifier)</li><li>Omitting value (when attribute and bound value has the same name) <sup class="vt-badge">3.4+</sup></li></ul></li><li><p><strong>Expects:</strong> <code>any (with argument) | Object (without argument)</code></p></li><li><p><strong>Argument:</strong> <code>attrOrProp (optional)</code></p></li><li><p><strong>Modifiers</strong></p><ul><li><code>.camel</code> - transform the kebab-case attribute name into camelCase.</li><li><code>.prop</code> - force a binding to be set as a DOM property. <sup class="vt-badge">3.2+</sup></li><li><code>.attr</code> - force a binding to be set as a DOM attribute. <sup class="vt-badge">3.2+</sup></li></ul></li><li><p><strong>Usage</strong></p><p>When used to bind the <code>class</code> or <code>style</code> attribute, <code>v-bind</code> supports additional value types such as Array or Objects. See linked guide section below for more details.</p><p>When setting a binding on an element, Vue by default checks whether the element has the key defined as a property using an <code>in</code> operator check. If the property is defined, Vue will set the value as a DOM property instead of an attribute. This should work in most cases, but you can override this behavior by explicitly using <code>.prop</code> or <code>.attr</code> modifiers. This is sometimes necessary, especially when <a href="/guide/extras/web-components.html#passing-dom-properties">working with custom elements</a>.</p><p>When used for component prop binding, the prop must be properly declared in the child component.</p><p>When used without an argument, can be used to bind an object containing attribute name-value pairs.</p></li><li><p><strong>Example</strong></p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- bind an attribute --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">img</span><span style="color:#B392F0;"> v-bind</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">imageSrc</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- dynamic attribute name --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> v-bind:</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">]=</span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- shorthand --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">imageSrc</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- same-name shorthand (3.4+), expands to :src=&quot;src&quot; --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- shorthand dynamic attribute name --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> :[</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">]=</span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- with inline string concatenation --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;&#39;/path/to/images/&#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> fileName</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- class binding --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">{ red: isRed }</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">[classA, classB]</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">[classA, { classB: isB, classC: isC }]</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- style binding --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">{ fontSize: size </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &#39;px&#39;</span><span style="color:#E1E4E8;"> }</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">[styleObjectA, styleObjectB]</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- binding an object of attributes --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-bind</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">{ id: someProp, </span><span style="color:#9ECBFF;">&#39;other-attr&#39;</span><span style="color:#E1E4E8;">: otherProp }</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- prop binding. &quot;prop&quot; must be declared in the child component. --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">prop</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">someThing</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- pass down parent props in common with a child component --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#B392F0;"> v-bind</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$props</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- XLink --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">svg</span><span style="color:#E1E4E8;">&gt;&lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">xlink</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">special</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">foo</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">svg</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>The <code>.prop</code> modifier also has a dedicated shorthand, <code>.</code>:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">someProperty</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">prop</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">someObject</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- equivalent to --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> .</span><span style="color:#B392F0;">someProperty</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;someObject&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>The <code>.camel</code> modifier allows camelizing a <code>v-bind</code> attribute name when using in-DOM templates, e.g. the SVG <code>viewBox</code> attribute:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">svg</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">view-box</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">camel</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">viewBox</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">svg</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>.camel</code> is not needed if you are using string templates, or pre-compiling the template with a build step.</p></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/essentials/class-and-style.html">Class and Style Bindings</a></li><li><a href="/guide/components/props.html#prop-passing-details">Components - Prop Passing Details</a></li></ul></li></ul><h2 id="v-model" tabindex="-1">v-model <a class="header-anchor" href="#v-model" aria-label="Permalink to &quot;v-model {#v-model}&quot;">​</a></h2><p>Create a two-way binding on a form input element or a component.</p><ul><li><p><strong>Expects:</strong> varies based on value of form inputs element or output of components</p></li><li><p><strong>Limited to:</strong></p><ul><li><code>&lt;input&gt;</code></li><li><code>&lt;select&gt;</code></li><li><code>&lt;textarea&gt;</code></li><li>components</li></ul></li><li><p><strong>Modifiers</strong></p><ul><li><a href="/guide/essentials/forms.html#lazy"><code>.lazy</code></a> - listen to <code>change</code> events instead of <code>input</code></li><li><a href="/guide/essentials/forms.html#number"><code>.number</code></a> - cast valid input string to numbers</li><li><a href="/guide/essentials/forms.html#trim"><code>.trim</code></a> - trim input</li></ul></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/essentials/forms.html">Form Input Bindings</a></li><li><a href="/guide/components/v-model.html">Component Events - Usage with <code>v-model</code></a></li></ul></li></ul><h2 id="v-slot" tabindex="-1">v-slot <a class="header-anchor" href="#v-slot" aria-label="Permalink to &quot;v-slot {#v-slot}&quot;">​</a></h2><p>Denote named slots or scoped slots that expect to receive props.</p><ul><li><p><strong>Shorthand:</strong> <code>#</code></p></li><li><p><strong>Expects:</strong> JavaScript expression that is valid in a function argument position, including support for destructuring. Optional - only needed if expecting props to be passed to the slot.</p></li><li><p><strong>Argument:</strong> slot name (optional, defaults to <code>default</code>)</p></li><li><p><strong>Limited to:</strong></p><ul><li><code>&lt;template&gt;</code></li><li><a href="/guide/components/slots.html#scoped-slots">components</a> (for a lone default slot with props)</li></ul></li><li><p><strong>Example</strong></p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Named slots --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BaseLayout</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">template</span><span style="color:#B392F0;"> v-slot:header</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    Header content</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">template</span><span style="color:#B392F0;"> v-slot:default</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    Default slot content</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">template</span><span style="color:#B392F0;"> v-slot:footer</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    Footer content</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">BaseLayout</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- Named slot that receives props --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">InfiniteScroll</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">template</span><span style="color:#B392F0;"> v-slot</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">slotProps</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;item&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      {{ slotProps.item.text }}</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">InfiniteScroll</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- Default slot that receive props, with destructuring --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Mouse</span><span style="color:#B392F0;"> v-slot</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">{ x, y }</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  Mouse position: {{ x }}, {{ y }}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Mouse</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/components/slots.html">Components - Slots</a></li></ul></li></ul><h2 id="v-pre" tabindex="-1">v-pre <a class="header-anchor" href="#v-pre" aria-label="Permalink to &quot;v-pre {#v-pre}&quot;">​</a></h2><p>Skip compilation for this element and all its children.</p><ul><li><p><strong>Does not expect expression</strong></p></li><li><p><strong>Details</strong></p><p>Inside the element with <code>v-pre</code>, all Vue template syntax will be preserved and rendered as-is. The most common use case of this is displaying raw mustache tags.</p></li><li><p><strong>Example</strong></p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">span</span><span style="color:#B392F0;"> v-pre</span><span style="color:#E1E4E8;">&gt;{{ </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> will not be compiled }}&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h2 id="v-once" tabindex="-1">v-once <a class="header-anchor" href="#v-once" aria-label="Permalink to &quot;v-once {#v-once}&quot;">​</a></h2><p>Render the element and component once only, and skip future updates.</p><ul><li><p><strong>Does not expect expression</strong></p></li><li><p><strong>Details</strong></p><p>On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- single element --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">span</span><span style="color:#B392F0;"> v-once</span><span style="color:#E1E4E8;">&gt;This will never change: {{msg}}&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- the element have children --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-once</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;Comment&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;{{msg}}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- component --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#B392F0;"> v-once</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">comment</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">msg</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#6A737D;">&lt;!-- `v-for` directive --&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">li</span><span style="color:#B392F0;"> v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> list</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;"> v-once</span><span style="color:#E1E4E8;">&gt;{{i}}&lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Since 3.2, you can also memoize part of the template with invalidation conditions using <a href="#v-memo"><code>v-memo</code></a>.</p></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/essentials/template-syntax.html#text-interpolation">Data Binding Syntax - interpolations</a></li><li><a href="#v-memo">v-memo</a></li></ul></li></ul><h2 id="v-memo" tabindex="-1">v-memo <sup class="vt-badge" data-text="3.2+"></sup> <a class="header-anchor" href="#v-memo" aria-label="Permalink to &quot;v-memo &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.2+&quot; /&gt; {#v-memo}&quot;">​</a></h2><ul><li><p><strong>Expects:</strong> <code>any[]</code></p></li><li><p><strong>Details</strong></p><p>Memoize a sub-tree of the template. Can be used on both elements and components. The directive expects a fixed-length array of dependency values to compare for the memoization. If every value in the array was the same as last render, then updates for the entire sub-tree will be skipped. For example:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-memo</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">[valueA, valueB]</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>When the component re-renders, if both <code>valueA</code> and <code>valueB</code> remain the same, all updates for this <code>&lt;div&gt;</code> and its children will be skipped. In fact, even the Virtual DOM VNode creation will also be skipped since the memoized copy of the sub-tree can be reused.</p><p>It is important to specify the memoization array correctly, otherwise we may skip updates that should indeed be applied. <code>v-memo</code> with an empty dependency array (<code>v-memo=&quot;[]&quot;</code>) would be functionally equivalent to <code>v-once</code>.</p><p><strong>Usage with <code>v-for</code></strong></p><p><code>v-memo</code> is provided solely for micro optimizations in performance-critical scenarios and should be rarely needed. The most common case where this may prove helpful is when rendering large <code>v-for</code> lists (where <code>length &gt; 1000</code>):</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">item </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> list</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">item.id</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;"> v-memo</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">[item.id </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> selected]</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;ID: {{ item.id }} - selected: {{ item.id </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> selected }}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;...more child nodes&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>When the component&#39;s <code>selected</code> state changes, a large amount of VNodes will be created even though most of the items remained exactly the same. The <code>v-memo</code> usage here is essentially saying &quot;only update this item if it went from non-selected to selected, or the other way around&quot;. This allows every unaffected item to reuse its previous VNode and skip diffing entirely. Note we don&#39;t need to include <code>item.id</code> in the memo dependency array here since Vue automatically infers it from the item&#39;s <code>:key</code>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>When using <code>v-memo</code> with <code>v-for</code>, make sure they are used on the same element. <strong><code>v-memo</code> does not work inside <code>v-for</code>.</strong></p></div><p><code>v-memo</code> can also be used on components to manually prevent unwanted updates in certain edge cases where the child component update check has been de-optimized. But again, it is the developer&#39;s responsibility to specify correct dependency arrays to avoid skipping necessary updates.</p></li><li><p><strong>See also</strong></p><ul><li><a href="#v-once">v-once</a></li></ul></li></ul><h2 id="v-cloak" tabindex="-1">v-cloak <a class="header-anchor" href="#v-cloak" aria-label="Permalink to &quot;v-cloak {#v-cloak}&quot;">​</a></h2><p>Used to hide un-compiled template until it is ready.</p><ul><li><p><strong>Does not expect expression</strong></p></li><li><p><strong>Details</strong></p><p><strong>This directive is only needed in no-build-step setups.</strong></p><p>When using in-DOM templates, there can be a &quot;flash of un-compiled templates&quot;: the user may see raw mustache tags until the mounted component replaces them with rendered content.</p><p><code>v-cloak</code> will remain on the element until the associated component instance is mounted. Combined with CSS rules such as <code>[v-cloak] { display: none }</code>, it can be used to hide the raw templates until the component is ready.</p></li><li><p><strong>Example</strong></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">v-cloak</span><span style="color:#E1E4E8;">] {</span></span>\n<span class="line"><span style="color:#79B8FF;">  display</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">none</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-cloak</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  {{ message }}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>The <code>&lt;div&gt;</code> will not be visible until the compilation is done.</p></li></ul>',45)];const p=s(o,[["render",function(s,l,a,o,p,c){return e(),n("div",null,t)}]]);export{a as __pageData,p as default};
