import{_ as s,c as n,o as a,b as e}from"./chunks/framework.B9NywAPp.js";const o=JSON.parse('{"title":"Global API: General","description":"","frontmatter":{},"headers":[{"level":2,"title":"version","slug":"version","link":"#version","children":[]},{"level":2,"title":"nextTick()","slug":"nexttick","link":"#nexttick","children":[]},{"level":2,"title":"defineComponent()","slug":"definecomponent","link":"#definecomponent","children":[]},{"level":2,"title":"defineAsyncComponent()","slug":"defineasynccomponent","link":"#defineasynccomponent","children":[]},{"level":2,"title":"defineCustomElement()","slug":"definecustomelement","link":"#definecustomelement","children":[]}],"relativePath":"api/general.md","filePath":"api/general.md"}'),l={name:"api/general.md"},p=[e('<h1 id="global-api-general" tabindex="-1">Global API: General <a class="header-anchor" href="#global-api-general" aria-label="Permalink to &quot;Global API: General {#global-api-general}&quot;">​</a></h1><h2 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;version {#version}&quot;">​</a></h2><p>Exposes the current version of Vue.</p><ul><li><p><strong>Type:</strong> <code>string</code></p></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { version } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(version)</span></span></code></pre></div></li></ul><h2 id="nexttick" tabindex="-1">nextTick() <a class="header-anchor" href="#nexttick" aria-label="Permalink to &quot;nextTick() {#nexttick}&quot;">​</a></h2><p>A utility for waiting for the next DOM update flush.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> nextTick</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">callback</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>When you mutate reactive state in Vue, the resulting DOM updates are not applied synchronously. Instead, Vue buffers them until the &quot;next tick&quot; to ensure that each component updates only once no matter how many state changes you have made.</p><p><code>nextTick()</code> can be used immediately after a state change to wait for the DOM updates to complete. You can either pass a callback as an argument, or await the returned Promise.</p></li><li><p><strong>Example</strong></p><div class="composition-api"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, nextTick } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> increment</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  count.value</span><span style="color:#F97583;">++</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">  // DOM not yet updated</span></span>\n<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;counter&#39;</span><span style="color:#E1E4E8;">).textContent) </span><span style="color:#6A737D;">// 0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">  await</span><span style="color:#B392F0;"> nextTick</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#6A737D;">  // DOM is now updated</span></span>\n<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;counter&#39;</span><span style="color:#E1E4E8;">).textContent) </span><span style="color:#6A737D;">// 1</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;counter&quot;</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">increment</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;{{ count }}&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><div class="options-api"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { nextTick } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      count: </span><span style="color:#79B8FF;">0</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  methods: {</span></span>\n<span class="line"><span style="color:#F97583;">    async</span><span style="color:#B392F0;"> increment</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">.count</span><span style="color:#F97583;">++</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">      // DOM not yet updated</span></span>\n<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;counter&#39;</span><span style="color:#E1E4E8;">).textContent) </span><span style="color:#6A737D;">// 0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">      await</span><span style="color:#B392F0;"> nextTick</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#6A737D;">      // DOM is now updated</span></span>\n<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;counter&#39;</span><span style="color:#E1E4E8;">).textContent) </span><span style="color:#6A737D;">// 1</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;counter&quot;</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">increment</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;{{ count }}&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div></li><li><p><strong>See also</strong> <a href="/api/component-instance.html#nexttick"><code>this.$nextTick()</code></a></p></li></ul><h2 id="definecomponent" tabindex="-1">defineComponent() <a class="header-anchor" href="#definecomponent" aria-label="Permalink to &quot;defineComponent() {#definecomponent}&quot;">​</a></h2><p>A type helper for defining a Vue component with type inference.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// options syntax</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> defineComponent</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#FFAB70;">  component</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComponentOptions</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComponentConstructor</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// function syntax (requires 3.3+)</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> defineComponent</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#FFAB70;">  setup</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComponentOptions</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;setup&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#FFAB70;">  extraOptions</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> ComponentOptions</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> any</span></span></code></pre></div><blockquote><p>Type is simplified for readability.</p></blockquote></li><li><p><strong>Details</strong></p><p>The first argument expects a component options object. The return value will be the same options object, since the function is essentially a runtime no-op for type inference purposes only.</p><p>Note that the return type is a bit special: it will be a constructor type whose instance type is the inferred component instance type based on the options. This is used for type inference when the returned type is used as a tag in TSX.</p><p>You can extract the instance type of a component (equivalent to the type of <code>this</code> in its options) from the return type of <code>defineComponent()</code> like this:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> Foo</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> FooInstance</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> InstanceType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> Foo&gt;</span></span></code></pre></div><h3 id="function-signature" tabindex="-1">Function Signature <sup class="vt-badge" data-text="3.3+"></sup> <a class="header-anchor" href="#function-signature" aria-label="Permalink to &quot;Function Signature &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.3+&quot; /&gt; {#function-signature}&quot;">​</a></h3><p><code>defineComponent()</code> also has an alternative signature that is meant to be used with Composition API and <a href="/guide/extras/render-function.html">render functions or JSX</a>.</p><p>Instead of passing in an options object, a function is expected instead. This function works the same as the Composition API <a href="/api/composition-api-setup.html#composition-api-setup"><code>setup()</code></a> function: it receives the props and the setup context. The return value should be a render function - both <code>h()</code> and JSX are supported:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, h } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> Comp</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineComponent</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">    // use Composition API here like in &lt;script setup&gt;</span></span>\n<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">      // render function or JSX</span></span>\n<span class="line"><span style="color:#F97583;">      return</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, count.value)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#6A737D;">  // extra options, e.g. declare props and emits</span></span>\n<span class="line"><span style="color:#E1E4E8;">  {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    props: {</span></span>\n<span class="line"><span style="color:#6A737D;">      /* ... */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>The main use case for this signature is with TypeScript (and in particular with TSX), as it supports generics:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> Comp</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineComponent</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> extends</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">props</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">msg</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">; </span><span style="color:#FFAB70;">list</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">[] }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">    // use Composition API here like in &lt;script setup&gt;</span></span>\n<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">      // render function or JSX</span></span>\n<span class="line"><span style="color:#F97583;">      return</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;{count.value}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#6A737D;">  // manual runtime props declaration is currently still needed.</span></span>\n<span class="line"><span style="color:#E1E4E8;">  {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    props: [</span><span style="color:#9ECBFF;">&#39;msg&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;list&#39;</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>In the future, we plan to provide a Babel plugin that automatically infers and injects the runtime props (like for <code>defineProps</code> in SFCs) so that the runtime props declaration can be omitted.</p><h3 id="note-on-webpack-treeshaking" tabindex="-1">Note on webpack Treeshaking <a class="header-anchor" href="#note-on-webpack-treeshaking" aria-label="Permalink to &quot;Note on webpack Treeshaking {#note-on-webpack-treeshaking}&quot;">​</a></h3><p>Because <code>defineComponent()</code> is a function call, it could look like that it would produce side-effects to some build tools, e.g. webpack. This will prevent the component from being tree-shaken even when the component is never used.</p><p>To tell webpack that this function call is safe to be tree-shaken, you can add a <code>/*#__PURE__*/</code> comment notation before the function call:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#6A737D;"> /*#__PURE__*/</span><span style="color:#B392F0;"> defineComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>Note this is not necessary if you are using Vite, because Rollup (the underlying production bundler used by Vite) is smart enough to determine that <code>defineComponent()</code> is in fact side-effect-free without the need for manual annotations.</p></li><li><p><strong>See also</strong> <a href="/guide/typescript/overview.html#general-usage-notes">Guide - Using Vue with TypeScript</a></p></li></ul><h2 id="defineasynccomponent" tabindex="-1">defineAsyncComponent() <a class="header-anchor" href="#defineasynccomponent" aria-label="Permalink to &quot;defineAsyncComponent() {#defineasynccomponent}&quot;">​</a></h2><p>Define an async component which is lazy loaded only when it is rendered. The argument can either be a loader function, or an options object for more advanced control of the loading behavior.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> defineAsyncComponent</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#FFAB70;">  source</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> AsyncComponentLoader</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> AsyncComponentOptions</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Component</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> AsyncComponentLoader</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> AsyncComponentOptions</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#FFAB70;">  loader</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> AsyncComponentLoader</span></span>\n<span class="line"><span style="color:#FFAB70;">  loadingComponent</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Component</span></span>\n<span class="line"><span style="color:#FFAB70;">  errorComponent</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Component</span></span>\n<span class="line"><span style="color:#FFAB70;">  delay</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> number</span></span>\n<span class="line"><span style="color:#FFAB70;">  timeout</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> number</span></span>\n<span class="line"><span style="color:#FFAB70;">  suspensible</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span></span>\n<span class="line"><span style="color:#B392F0;">  onError</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#FFAB70;">    error</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Error</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#B392F0;">    retry</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#B392F0;">    fail</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#FFAB70;">    attempts</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> any</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>See also</strong> <a href="/guide/components/async.html">Guide - Async Components</a></p></li></ul><h2 id="definecustomelement" tabindex="-1">defineCustomElement() <a class="header-anchor" href="#definecustomelement" aria-label="Permalink to &quot;defineCustomElement() {#definecustomelement}&quot;">​</a></h2><p>This method accepts the same argument as <a href="#definecomponent"><code>defineComponent</code></a>, but instead returns a native <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements" target="_blank" rel="noreferrer">Custom Element</a> class constructor.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> defineCustomElement</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#FFAB70;">  component</span><span style="color:#F97583;">:</span></span>\n<span class="line"><span style="color:#F97583;">    |</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">ComponentOptions</span><span style="color:#F97583;"> &amp;</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">styles</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">[] })</span></span>\n<span class="line"><span style="color:#F97583;">    |</span><span style="color:#B392F0;"> ComponentOptions</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;setup&#39;</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#F97583;">  new</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">props</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> HTMLElement</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>Type is simplified for readability.</p></blockquote></li><li><p><strong>Details</strong></p><p>In addition to normal component options, <code>defineCustomElement()</code> also supports a special option <code>styles</code>, which should be an array of inlined CSS strings, for providing CSS that should be injected into the element&#39;s shadow root.</p><p>The return value is a custom element constructor that can be registered using <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define" target="_blank" rel="noreferrer"><code>customElements.define()</code></a>.</p></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineCustomElement } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> MyVueElement</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineCustomElement</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#6A737D;">  /* component options */</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// Register the custom element.</span></span>\n<span class="line"><span style="color:#E1E4E8;">customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my-vue-element&#39;</span><span style="color:#E1E4E8;">, MyVueElement)</span></span></code></pre></div></li><li><p><strong>See also</strong></p><ul><li><p><a href="/guide/extras/web-components.html#building-custom-elements-with-vue">Guide - Building Custom Elements with Vue</a></p></li><li><p>Also note that <code>defineCustomElement()</code> requires <a href="/guide/extras/web-components.html#sfc-as-custom-element">special config</a> when used with Single-File Components.</p></li></ul></li></ul>',16)];const t=s(l,[["render",function(s,e,o,l,t,c){return a(),n("div",null,p)}]]);export{o as __pageData,t as default};
