{"pageProps":{"content":"[[\"$r\",\"MaxWidth\",\"22\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"数组是另外一种可以存储在 state 中的 JavaScript 对象，它虽然是可变的，但是却应该被视为不可变。同对象一样，当你想要更新存储于 state 中的数组时，你需要创建一个新的数组（或者创建一份已有数组的拷贝值），并使用新数组设置 state。\"}]}],\"\\n\",[\"$r\",\"YouWillLearn\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何添加、删除或者修改 React state 中的数组中的元素\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何更新数组内部的对象\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何通过 Immer 降低数组拷贝的重复度\"}],\"\\n\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"updating-arrays-without-mutation\",\"children\":\"在没有 mutation 的前提下更新数组 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 JavaScript 中，数组只是另一种对象。\",[\"$r\",\"a\",null,{\"href\":\"/learn/updating-objects-in-state\",\"children\":\"同对象一样\"}],\"，\",[\"$r\",\"strong\",null,{\"children\":\"你需要将 React state 中的数组视为只读的\"}],\"。这意味着你不应该使用类似于 \",[\"$r\",\"code\",null,{\"children\":\"arr[0] = 'bird'\"}],\" 这样的方式来重新分配数组中的元素，也不应该使用会直接修改原始数组的方法，例如 \",[\"$r\",\"code\",null,{\"children\":\"push()\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"pop()\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"相反，每次要更新一个数组时，你需要把一个\",[\"$r\",\"strong\",null,{\"children\":\"新\"}],\"的数组传入 state 的 setting 方法中。为此，你可以通过使用像 \",[\"$r\",\"code\",null,{\"children\":\"filter()\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"map()\"}],\" 这样不会直接修改原始值的方法，从原始数组生成一个新的数组。然后你就可以将 state 设置为这个新生成的数组。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"下面是常见数组操作的参考表。当你操作 React state 中的数组时，你需要避免使用左列的方法，而首选右列的方法：\"}],\"\\n\",[\"$r\",\"table\",null,{\"children\":[[\"$r\",\"thead\",null,{\"children\":[\"$r\",\"tr\",null,{\"children\":[[\"$r\",\"th\",null,{}],[\"$r\",\"th\",null,{\"children\":\"避免使用 (会改变原始数组)\"}],[\"$r\",\"th\",null,{\"children\":\"推荐使用 (会返回一个新数组）\"}]]}]}],[\"$r\",\"tbody\",null,{\"children\":[[\"$r\",\"tr\",null,{\"children\":[[\"$r\",\"td\",null,{\"children\":\"添加元素\"}],[\"$r\",\"td\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"push\"}],\"，\",[\"$r\",\"code\",null,{\"children\":\"unshift\"}]]}],[\"$r\",\"td\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"concat\"}],\"，\",[\"$r\",\"code\",null,{\"children\":\"[...arr]\"}],\" 展开语法（\",[\"$r\",\"a\",null,{\"href\":\"#adding-to-an-array\",\"children\":\"例子\"}],\"）\"]}]]}],[\"$r\",\"tr\",null,{\"children\":[[\"$r\",\"td\",null,{\"children\":\"删除元素\"}],[\"$r\",\"td\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"pop\"}],\"，\",[\"$r\",\"code\",null,{\"children\":\"shift\"}],\"，\",[\"$r\",\"code\",null,{\"children\":\"splice\"}]]}],[\"$r\",\"td\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"filter\"}],\"，\",[\"$r\",\"code\",null,{\"children\":\"slice\"}],\"（\",[\"$r\",\"a\",null,{\"href\":\"#removing-from-an-array\",\"children\":\"例子\"}],\"）\"]}]]}],[\"$r\",\"tr\",null,{\"children\":[[\"$r\",\"td\",null,{\"children\":\"替换元素\"}],[\"$r\",\"td\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"splice\"}],\"，\",[\"$r\",\"code\",null,{\"children\":\"arr[i] = ...\"}],\" 赋值\"]}],[\"$r\",\"td\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"map\"}],\"（\",[\"$r\",\"a\",null,{\"href\":\"#replacing-items-in-an-array\",\"children\":\"例子\"}],\"）\"]}]]}],[\"$r\",\"tr\",null,{\"children\":[[\"$r\",\"td\",null,{\"children\":\"排序\"}],[\"$r\",\"td\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"reverse\"}],\"，\",[\"$r\",\"code\",null,{\"children\":\"sort\"}]]}],[\"$r\",\"td\",null,{\"children\":[\"先将数组复制一份（\",[\"$r\",\"a\",null,{\"href\":\"#making-other-changes-to-an-array\",\"children\":\"例子\"}],\"）\"]}]]}]]}]]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"或者，你可以\",[\"$r\",\"a\",null,{\"href\":\"#write-concise-update-logic-with-immer\",\"children\":\"使用 Immer\"}],\" ，这样你便可以使用表格中的所有方法了。\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"不幸的是，虽然 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"slice\"}]}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"splice\"}]}],\" 的名字相似，但作用却迥然不同：\"]}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"slice\"}],\" 让你可以拷贝数组或是数组的一部分。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"splice\"}],\" \",[\"$r\",\"strong\",null,{\"children\":\"会直接修改\"}],\" 原始数组（插入或者删除元素）。\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[\"在 React 中，更多情况下你会使用 \",[\"$r\",\"code\",null,{\"children\":\"slice\"}],\"（没有 \",[\"$r\",\"code\",null,{\"children\":\"p\"}],\" ！），因为你不想改变 state 中的对象或数组。\",[\"$r\",\"a\",null,{\"href\":\"/learn/updating-objects-in-state\",\"children\":\"更新对象\"}],\"这一章节解释了什么是 mutation，以及为什么不推荐在 state 里这样做。\"]}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"adding-to-an-array\",\"children\":\"向数组中添加元素 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"push()\"}],\" 会直接修改原始数组，而你不希望这样：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nlet nextId = 0;\\r\\n\\r\\nexport default function List() {\\r\\n  const [name, setName] = useState('');\\r\\n  const [artists, setArtists] = useState([]);\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <h1>振奋人心的雕塑家们：</h1>\\r\\n      <input\\r\\n        value={name}\\r\\n        onChange={e => setName(e.target.value)}\\r\\n      />\\r\\n      <button onClick={() => {\\r\\n        artists.push({\\r\\n          id: nextId++,\\r\\n          name: name,\\r\\n        });\\r\\n      }}>添加</button>\\r\\n      <ul>\\r\\n        {artists.map(artist => (\\r\\n          <li key={artist.id}>{artist.name}</li>\\r\\n        ))}\\r\\n      </ul>\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-left: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"30\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"相反，你应该创建一个 \",[\"$r\",\"strong\",null,{\"children\":\"新\"}],\" 数组，其包含了原始数组的所有元素 \",[\"$r\",\"strong\",null,{\"children\":\"以及\"}],\" 一个在末尾的新元素。这可以通过很多种方法实现，最简单的一种就是使用 \",[\"$r\",\"code\",null,{\"children\":\"...\"}],\" \",[\"$r\",\"a\",null,{\"href\":\"a-javascript-refresher#array-spread\",\"children\":\"数组展开\"}],\" 语法：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"setArtists( // 替换 state\\r\\n  [ // 是通过传入一个新数组实现的\\r\\n    ...artists, // 新数组包含原数组的所有元素\\r\\n    { id: nextId++, name: name } // 并在末尾添加了一个新的元素\\r\\n  ]\\r\\n);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在代码可以正常运行了：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nlet nextId = 0;\\r\\n\\r\\nexport default function List() {\\r\\n  const [name, setName] = useState('');\\r\\n  const [artists, setArtists] = useState([]);\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <h1>振奋人心的雕塑家们：</h1>\\r\\n      <input\\r\\n        value={name}\\r\\n        onChange={e => setName(e.target.value)}\\r\\n      />\\r\\n      <button onClick={() => {\\r\\n        setArtists([\\r\\n          ...artists,\\r\\n          { id: nextId++, name: name }\\r\\n        ]);\\r\\n      }}>添加</button>\\r\\n      <ul>\\r\\n        {artists.map(artist => (\\r\\n          <li key={artist.id}>{artist.name}</li>\\r\\n        ))}\\r\\n      </ul>\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-left: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"42\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"数组展开运算符还允许你把新添加的元素放在原始的 \",[\"$r\",\"code\",null,{\"children\":\"...artists\"}],\" 之前：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"setArtists([\\r\\n  { id: nextId++, name: name },\\r\\n  ...artists // 将原数组中的元素放在末尾\\r\\n]);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这样一来，展开操作就可以完成 \",[\"$r\",\"code\",null,{\"children\":\"push()\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"unshift()\"}],\" 的工作，将新元素添加到数组的末尾和开头。你可以在上面的 sandbox 中尝试一下！\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"removing-from-an-array\",\"children\":\"从数组中删除元素 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"从数组中删除一个元素最简单的方法就是将它\",[\"$r\",\"strong\",null,{\"children\":\"过滤出去\"}],\"。换句话说，你需要生成一个不包含该元素的新数组。这可以通过 \",[\"$r\",\"code\",null,{\"children\":\"filter\"}],\" 方法实现，例如：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nlet initialArtists = [\\r\\n  { id: 0, name: 'Marta Colvin Andrade' },\\r\\n  { id: 1, name: 'Lamidi Olonade Fakeye'},\\r\\n  { id: 2, name: 'Louise Nevelson'},\\r\\n];\\r\\n\\r\\nexport default function List() {\\r\\n  const [artists, setArtists] = useState(\\r\\n    initialArtists\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <h1>振奋人心的雕塑家们：</h1>\\r\\n      <ul>\\r\\n        {artists.map(artist => (\\r\\n          <li key={artist.id}>\\r\\n            {artist.name}{' '}\\r\\n            <button onClick={() => {\\r\\n              setArtists(\\r\\n                artists.filter(a =>\\r\\n                  a.id !== artist.id\\r\\n                )\\r\\n              );\\r\\n            }}>\\r\\n              删除\\r\\n            </button>\\r\\n          </li>\\r\\n        ))}\\r\\n      </ul>\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"56\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"点击“删除”按钮几次，并且查看按钮处理点击事件的代码。\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"setArtists(\\r\\n  artists.filter(a => a.id !== artist.id)\\r\\n);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这里，\",[\"$r\",\"code\",null,{\"children\":\"artists.filter(s => s.id !== artist.id)\"}],\" 表示“创建一个新的数组，该数组由那些 ID 与 \",[\"$r\",\"code\",null,{\"children\":\"artists.id\"}],\" 不同的 \",[\"$r\",\"code\",null,{\"children\":\"artists\"}],\" 组成”。换句话说，每个 artist 的“删除”按钮会把 \",[\"$r\",\"em\",null,{\"children\":\"那一个\"}],\" artist 从原始数组中过滤掉，并使用过滤后的数组再次进行渲染。注意，\",[\"$r\",\"code\",null,{\"children\":\"filter\"}],\" 并不会改变原始数组。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"transforming-an-array\",\"children\":\"转换数组 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你想改变数组中的某些或全部元素，你可以用 \",[\"$r\",\"code\",null,{\"children\":\"map()\"}],\" 创建一个\",[\"$r\",\"strong\",null,{\"children\":\"新\"}],\"数组。你传入 \",[\"$r\",\"code\",null,{\"children\":\"map\"}],\" 的函数决定了要根据每个元素的值或索引（或二者都要）对元素做何处理。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在下面的例子中，一个数组记录了两个圆形和一个正方形的坐标。当你点击按钮时，仅有两个圆形会向下移动 100 像素。这是通过使用 \",[\"$r\",\"code\",null,{\"children\":\"map()\"}],\" 生成一个新数组实现的。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nlet initialShapes = [\\r\\n  { id: 0, type: 'circle', x: 50, y: 100 },\\r\\n  { id: 1, type: 'square', x: 150, y: 100 },\\r\\n  { id: 2, type: 'circle', x: 250, y: 100 },\\r\\n];\\r\\n\\r\\nexport default function ShapeEditor() {\\r\\n  const [shapes, setShapes] = useState(\\r\\n    initialShapes\\r\\n  );\\r\\n\\r\\n  function handleClick() {\\r\\n    const nextShapes = shapes.map(shape => {\\r\\n      if (shape.type === 'square') {\\r\\n        // 不作改变\\r\\n        return shape;\\r\\n      } else {\\r\\n        // 返回一个新的圆形，位置在下方 50px 处\\r\\n        return {\\r\\n          ...shape,\\r\\n          y: shape.y + 50,\\r\\n        };\\r\\n      }\\r\\n    });\\r\\n    // 使用新的数组进行重渲染\\r\\n    setShapes(nextShapes);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <button onClick={handleClick}>\\r\\n        所有圆形向下移动！\\r\\n      </button>\\r\\n      {shapes.map(shape => (\\r\\n        <div\\r\\n          key={shape.id}\\r\\n          style={{\\r\\n          background: 'purple',\\r\\n          position: 'absolute',\\r\\n          left: shape.x,\\r\\n          top: shape.y,\\r\\n          borderRadius:\\r\\n            shape.type === 'circle'\\r\\n              ? '50%' : '',\\r\\n          width: 20,\\r\\n          height: 20,\\r\\n        }} />\\r\\n      ))}\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body { height: 300px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"64\",{\"children\":[\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"replacing-items-in-an-array\",\"children\":\"替换数组中的元素 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"想要替换数组中一个或多个元素是非常常见的。类似 \",[\"$r\",\"code\",null,{\"children\":\"arr[0] = 'bird'\"}],\" 这样的赋值语句会直接修改原始数组，所以在这种情况下，你也应该使用 \",[\"$r\",\"code\",null,{\"children\":\"map\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"要替换一个元素，请使用 \",[\"$r\",\"code\",null,{\"children\":\"map\"}],\" 创建一个新数组。在你的 \",[\"$r\",\"code\",null,{\"children\":\"map\"}],\" 回调里，第二个参数是元素的索引。使用索引来判断最终是返回原始的元素（即回调的第一个参数）还是替换成其他值：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nlet initialCounters = [\\r\\n  0, 0, 0\\r\\n];\\r\\n\\r\\nexport default function CounterList() {\\r\\n  const [counters, setCounters] = useState(\\r\\n    initialCounters\\r\\n  );\\r\\n\\r\\n  function handleIncrementClick(index) {\\r\\n    const nextCounters = counters.map((c, i) => {\\r\\n      if (i === index) {\\r\\n        // 递增被点击的计数器数值\\r\\n        return c + 1;\\r\\n      } else {\\r\\n        // 其余部分不发生变化\\r\\n        return c;\\r\\n      }\\r\\n    });\\r\\n    setCounters(nextCounters);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <ul>\\r\\n      {counters.map((counter, i) => (\\r\\n        <li key={i}>\\r\\n          {counter}\\r\\n          <button onClick={() => {\\r\\n            handleIncrementClick(i);\\r\\n          }}>+1</button>\\r\\n        </li>\\r\\n      ))}\\r\\n    </ul>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"72\",{\"children\":[\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"inserting-into-an-array\",\"children\":\"向数组中插入元素 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"有时，你也许想向数组特定位置插入一个元素，这个位置既不在数组开头，也不在末尾。为此，你可以将数组展开运算符 \",[\"$r\",\"code\",null,{\"children\":\"...\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"slice()\"}],\" 方法一起使用。\",[\"$r\",\"code\",null,{\"children\":\"slice()\"}],\" 方法让你从数组中切出“一片”。为了将元素插入数组，你需要先展开原数组在插入点之前的切片，然后插入新元素，最后展开原数组中剩下的部分。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"下面的例子中，插入按钮总是会将元素插入到数组中索引为 \",[\"$r\",\"code\",null,{\"children\":\"1\"}],\" 的位置。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nlet nextId = 3;\\r\\nconst initialArtists = [\\r\\n  { id: 0, name: 'Marta Colvin Andrade' },\\r\\n  { id: 1, name: 'Lamidi Olonade Fakeye'},\\r\\n  { id: 2, name: 'Louise Nevelson'},\\r\\n];\\r\\n\\r\\nexport default function List() {\\r\\n  const [name, setName] = useState('');\\r\\n  const [artists, setArtists] = useState(\\r\\n    initialArtists\\r\\n  );\\r\\n\\r\\n  function handleClick() {\\r\\n    const insertAt = 1; // 可能是任何索引\\r\\n    const nextArtists = [\\r\\n      // 插入点之前的元素：\\r\\n      ...artists.slice(0, insertAt),\\r\\n      // 新的元素：\\r\\n      { id: nextId++, name: name },\\r\\n      // 插入点之后的元素：\\r\\n      ...artists.slice(insertAt)\\r\\n    ];\\r\\n    setArtists(nextArtists);\\r\\n    setName('');\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <h1>振奋人心的雕塑家们：</h1>\\r\\n      <input\\r\\n        value={name}\\r\\n        onChange={e => setName(e.target.value)}\\r\\n      />\\r\\n      <button onClick={handleClick}>\\r\\n        插入\\r\\n      </button>\\r\\n      <ul>\\r\\n        {artists.map(artist => (\\r\\n          <li key={artist.id}>{artist.name}</li>\\r\\n        ))}\\r\\n      </ul>\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-left: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"82\",{\"children\":[\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"making-other-changes-to-an-array\",\"children\":\"其他改变数组的情况 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"总会有一些事，是你仅仅依靠展开运算符和 \",[\"$r\",\"code\",null,{\"children\":\"map()\"}],\" 或者 \",[\"$r\",\"code\",null,{\"children\":\"filter()\"}],\" 等不会直接修改原值的方法所无法做到的。例如，你可能想翻转数组，或是对数组排序。而 JavaScript 中的 \",[\"$r\",\"code\",null,{\"children\":\"reverse()\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"sort()\"}],\" 方法会改变原数组，所以你无法直接使用它们。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"strong\",null,{\"children\":\"然而，你可以先拷贝这个数组，再改变这个拷贝后的值。\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"例如：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nlet nextId = 3;\\r\\nconst initialList = [\\r\\n  { id: 0, title: 'Big Bellies' },\\r\\n  { id: 1, title: 'Lunar Landscape' },\\r\\n  { id: 2, title: 'Terracotta Army' },\\r\\n];\\r\\n\\r\\nexport default function List() {\\r\\n  const [list, setList] = useState(initialList);\\r\\n\\r\\n  function handleClick() {\\r\\n    const nextList = [...list];\\r\\n    nextList.reverse();\\r\\n    setList(nextList);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <button onClick={handleClick}>\\r\\n        翻转\\r\\n      </button>\\r\\n      <ul>\\r\\n        {list.map(artwork => (\\r\\n          <li key={artwork.id}>{artwork.title}</li>\\r\\n        ))}\\r\\n      </ul>\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"100\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这段代码中，你先使用 \",[\"$r\",\"code\",null,{\"children\":\"[...list]\"}],\" 展开运算符创建了一份数组的拷贝值。当你有了这个拷贝值后，你就可以使用像 \",[\"$r\",\"code\",null,{\"children\":\"nextList.reverse()\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"nextList.sort()\"}],\" 这样直接修改原数组的方法。你甚至可以通过 \",[\"$r\",\"code\",null,{\"children\":\"nextList[0] = \\\"something\\\"\"}],\" 这样的方式对数组中的特定元素进行赋值。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"然而，\",[\"$r\",\"strong\",null,{\"children\":\"即使你拷贝了数组，你还是不能直接修改其内部的元素\"}],\"。这是因为数组的拷贝是浅拷贝——新的数组中依然保留了与原始数组相同的元素。因此，如果你修改了拷贝数组内部的某个对象，其实你正在直接修改当前的 state。举个例子，像下面的代码就会带来问题。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const nextList = [...list];\\r\\nnextList[0].seen = true; // 问题：直接修改了 list[0] 的值\\r\\nsetList(nextList);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"虽然 \",[\"$r\",\"code\",null,{\"children\":\"nextList\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"list\"}],\" 是两个不同的数组，\",[\"$r\",\"strong\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"nextList[0]\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"list[0]\"}],\" 却指向了同一个对象\"]}],\"。因此，通过改变 \",[\"$r\",\"code\",null,{\"children\":\"nextList[0].seen\"}],\"，\",[\"$r\",\"code\",null,{\"children\":\"list[0].seen\"}],\" 的值也被改变了。这是一种 state 的 mutation 操作，你应该避免这么做！你可以用类似于 \",[\"$r\",\"a\",null,{\"href\":\"learn/updating-objects-in-state#updating-a-nested-object\",\"children\":\"更新嵌套的 JavaScript 对象\"}],\" 的方式解决这个问题——拷贝想要修改的特定元素，而不是直接修改它。下面是具体的操作。\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"updating-objects-inside-arrays\",\"children\":\"更新数组内部的对象 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"对象并不是 \",[\"$r\",\"em\",null,{\"children\":\"真的\"}],\" 位于数组“内部”。可能他们在代码中看起来像是在数组“内部”，但其实数组中的每个对象都是这个数组“指向”的一个存储于其它位置的值。这就是当你在处理类似 \",[\"$r\",\"code\",null,{\"children\":\"list[0]\"}],\" 这样的嵌套字段时需要格外小心的原因。其他人的艺术品清单可能指向了数组的同一个元素！\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"当你更新一个嵌套的 state 时，你需要从想要更新的地方创建拷贝值，一直这样，直到顶层。\"}],\" 让我们看一下这该怎么做。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在下面的例子中，两个不同的艺术品清单有着相同的初始 state。他们本应该互不影响，但是因为一次 mutation，他们的 state 被意外地共享了，勾选一个清单中的事项会影响另外一个清单：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nlet nextId = 3;\\r\\nconst initialList = [\\r\\n  { id: 0, title: 'Big Bellies', seen: false },\\r\\n  { id: 1, title: 'Lunar Landscape', seen: false },\\r\\n  { id: 2, title: 'Terracotta Army', seen: true },\\r\\n];\\r\\n\\r\\nexport default function BucketList() {\\r\\n  const [myList, setMyList] = useState(initialList);\\r\\n  const [yourList, setYourList] = useState(\\r\\n    initialList\\r\\n  );\\r\\n\\r\\n  function handleToggleMyList(artworkId, nextSeen) {\\r\\n    const myNextList = [...myList];\\r\\n    const artwork = myNextList.find(\\r\\n      a => a.id === artworkId\\r\\n    );\\r\\n    artwork.seen = nextSeen;\\r\\n    setMyList(myNextList);\\r\\n  }\\r\\n\\r\\n  function handleToggleYourList(artworkId, nextSeen) {\\r\\n    const yourNextList = [...yourList];\\r\\n    const artwork = yourNextList.find(\\r\\n      a => a.id === artworkId\\r\\n    );\\r\\n    artwork.seen = nextSeen;\\r\\n    setYourList(yourNextList);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <h1>艺术愿望清单</h1>\\r\\n      <h2>我想看的艺术清单：</h2>\\r\\n      <ItemList\\r\\n        artworks={myList}\\r\\n        onToggle={handleToggleMyList} />\\r\\n      <h2>你想看的艺术清单：</h2>\\r\\n      <ItemList\\r\\n        artworks={yourList}\\r\\n        onToggle={handleToggleYourList} />\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction ItemList({ artworks, onToggle }) {\\r\\n  return (\\r\\n    <ul>\\r\\n      {artworks.map(artwork => (\\r\\n        <li key={artwork.id}>\\r\\n          <label>\\r\\n            <input\\r\\n              type=\\\"checkbox\\\"\\r\\n              checked={artwork.seen}\\r\\n              onChange={e => {\\r\\n                onToggle(\\r\\n                  artwork.id,\\r\\n                  e.target.checked\\r\\n                );\\r\\n              }}\\r\\n            />\\r\\n            {artwork.title}\\r\\n          </label>\\r\\n        </li>\\r\\n      ))}\\r\\n    </ul>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"116\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"问题出在下面这段代码中:\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const myNextList = [...myList];\\r\\nconst artwork = myNextList.find(a => a.id === artworkId);\\r\\nartwork.seen = nextSeen; // 问题：直接修改了已有的元素\\r\\nsetMyList(myNextList);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"虽然 \",[\"$r\",\"code\",null,{\"children\":\"myNextList\"}],\" 这个数组是新的，但是其\",[\"$r\",\"strong\",null,{\"children\":\"内部的元素本身\"}],\"与原数组 \",[\"$r\",\"code\",null,{\"children\":\"myList\"}],\" 是相同的。因此，修改 \",[\"$r\",\"code\",null,{\"children\":\"artwork.seen\"}],\"，其实是在修改\",[\"$r\",\"strong\",null,{\"children\":\"原始的\"}],\" artwork 对象。而这个 artwork 对象也被 \",[\"$r\",\"code\",null,{\"children\":\"yourList\"}],\" 使用，这样就带来了 bug。这样的 bug 可能难以想到，但好在如果你避免直接修改 state，它们就会消失。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"strong\",null,{\"children\":[\"你可以使用 \",[\"$r\",\"code\",null,{\"children\":\"map\"}],\" 在没有 mutation 的前提下将一个旧的元素替换成更新的版本。\"]}]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"setMyList(myList.map(artwork => {\\r\\n  if (artwork.id === artworkId) {\\r\\n    // 创建包含变更的*新*对象\\r\\n    return { ...artwork, seen: nextSeen };\\r\\n  } else {\\r\\n    // 没有变更\\r\\n    return artwork;\\r\\n  }\\r\\n}));\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"此处的 \",[\"$r\",\"code\",null,{\"children\":\"...\"}],\" 是一个对象展开语法，被用来\",[\"$r\",\"a\",null,{\"href\":\"/learn/updating-objects-in-state#copying-objects-with-the-spread-syntax\",\"children\":\"创建一个对象的拷贝\"}],\".\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"通过这种方式，没有任何现有的 state 中的元素会被改变，bug 也就被修复了。\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nlet nextId = 3;\\r\\nconst initialList = [\\r\\n  { id: 0, title: 'Big Bellies', seen: false },\\r\\n  { id: 1, title: 'Lunar Landscape', seen: false },\\r\\n  { id: 2, title: 'Terracotta Army', seen: true },\\r\\n];\\r\\n\\r\\nexport default function BucketList() {\\r\\n  const [myList, setMyList] = useState(initialList);\\r\\n  const [yourList, setYourList] = useState(\\r\\n    initialList\\r\\n  );\\r\\n\\r\\n  function handleToggleMyList(artworkId, nextSeen) {\\r\\n    setMyList(myList.map(artwork => {\\r\\n      if (artwork.id === artworkId) {\\r\\n        // 创建包含变更的*新*对象\\r\\n        return { ...artwork, seen: nextSeen };\\r\\n      } else {\\r\\n        // 没有变更\\r\\n        return artwork;\\r\\n      }\\r\\n    }));\\r\\n  }\\r\\n\\r\\n  function handleToggleYourList(artworkId, nextSeen) {\\r\\n    setYourList(yourList.map(artwork => {\\r\\n      if (artwork.id === artworkId) {\\r\\n        // 创建包含变更的*新*对象\\r\\n        return { ...artwork, seen: nextSeen };\\r\\n      } else {\\r\\n        // 没有变更\\r\\n        return artwork;\\r\\n      }\\r\\n    }));\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <h1>艺术愿望清单</h1>\\r\\n      <h2>我想看的艺术清单：</h2>\\r\\n      <ItemList\\r\\n        artworks={myList}\\r\\n        onToggle={handleToggleMyList} />\\r\\n      <h2>你想看的艺术清单：</h2>\\r\\n      <ItemList\\r\\n        artworks={yourList}\\r\\n        onToggle={handleToggleYourList} />\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction ItemList({ artworks, onToggle }) {\\r\\n  return (\\r\\n    <ul>\\r\\n      {artworks.map(artwork => (\\r\\n        <li key={artwork.id}>\\r\\n          <label>\\r\\n            <input\\r\\n              type=\\\"checkbox\\\"\\r\\n              checked={artwork.seen}\\r\\n              onChange={e => {\\r\\n                onToggle(\\r\\n                  artwork.id,\\r\\n                  e.target.checked\\r\\n                );\\r\\n              }}\\r\\n            />\\r\\n            {artwork.title}\\r\\n          </label>\\r\\n        </li>\\r\\n      ))}\\r\\n    </ul>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"128\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通常来讲，\",[\"$r\",\"strong\",null,{\"children\":\"你应该只直接修改你刚刚创建的对象\"}],\"。如果你正在插入一个\",[\"$r\",\"strong\",null,{\"children\":\"新\"}],\"的 artwork，你可以修改它，但是如果你想要改变的是 state 中已经存在的东西，你就需要先拷贝一份了。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"write-concise-update-logic-with-immer\",\"children\":\"使用 Immer 编写简洁的更新逻辑 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在没有 mutation 的前提下更新嵌套数组可能会变得有点重复。\",[\"$r\",\"a\",null,{\"href\":\"/learn/updating-objects-in-state#write-concise-update-logic-with-immer\",\"children\":\"就像对对象一样\"}],\":\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"通常情况下，你应该不需要更新处于非常深层级的 state 。如果你有此类需求，你或许需要\",[\"$r\",\"a\",null,{\"href\":\"/learn/choosing-the-state-structure#avoid-deeply-nested-state\",\"children\":\"调整一下数据的结构\"}],\"，让数据变得扁平一些。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果你不想改变 state 的数据结构，你也许会更喜欢使用 \",[\"$r\",\"a\",null,{\"href\":\"https://github.com/immerjs/use-immer\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Immer\"}],\" ，它让你可以继续使用方便的，但会直接修改原值的语法，并负责为你生成拷贝值。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"下面是我们用 Immer 来重写的艺术愿望清单的例子：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\nimport { useImmer } from 'use-immer';\\r\\n\\r\\nlet nextId = 3;\\r\\nconst initialList = [\\r\\n  { id: 0, title: 'Big Bellies', seen: false },\\r\\n  { id: 1, title: 'Lunar Landscape', seen: false },\\r\\n  { id: 2, title: 'Terracotta Army', seen: true },\\r\\n];\\r\\n\\r\\nexport default function BucketList() {\\r\\n  const [myList, updateMyList] = useImmer(\\r\\n    initialList\\r\\n  );\\r\\n  const [yourList, updateYourList] = useImmer(\\r\\n    initialList\\r\\n  );\\r\\n\\r\\n  function handleToggleMyList(id, nextSeen) {\\r\\n    updateMyList(draft => {\\r\\n      const artwork = draft.find(a =>\\r\\n        a.id === id\\r\\n      );\\r\\n      artwork.seen = nextSeen;\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function handleToggleYourList(artworkId, nextSeen) {\\r\\n    updateYourList(draft => {\\r\\n      const artwork = draft.find(a =>\\r\\n        a.id === artworkId\\r\\n      );\\r\\n      artwork.seen = nextSeen;\\r\\n    });\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <h1>艺术愿望清单</h1>\\r\\n      <h2>我想看的艺术清单：</h2>\\r\\n      <ItemList\\r\\n        artworks={myList}\\r\\n        onToggle={handleToggleMyList} />\\r\\n      <h2>你想看的艺术清单：</h2>\\r\\n      <ItemList\\r\\n        artworks={yourList}\\r\\n        onToggle={handleToggleYourList} />\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction ItemList({ artworks, onToggle }) {\\r\\n  return (\\r\\n    <ul>\\r\\n      {artworks.map(artwork => (\\r\\n        <li key={artwork.id}>\\r\\n          <label>\\r\\n            <input\\r\\n              type=\\\"checkbox\\\"\\r\\n              checked={artwork.seen}\\r\\n              onChange={e => {\\r\\n                onToggle(\\r\\n                  artwork.id,\\r\\n                  e.target.checked\\r\\n                );\\r\\n              }}\\r\\n            />\\r\\n            {artwork.title}\\r\\n          </label>\\r\\n        </li>\\r\\n      ))}\\r\\n    </ul>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json\",\"children\":\"{\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"immer\\\": \\\"1.7.3\\\",\\r\\n    \\\"react\\\": \\\"latest\\\",\\r\\n    \\\"react-dom\\\": \\\"latest\\\",\\r\\n    \\\"react-scripts\\\": \\\"latest\\\",\\r\\n    \\\"use-immer\\\": \\\"0.5.1\\\"\\r\\n  },\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"start\\\": \\\"react-scripts start\\\",\\r\\n    \\\"build\\\": \\\"react-scripts build\\\",\\r\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\r\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\r\\n  }\\r\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"140\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请注意当使用 Immer 时，\",[\"$r\",\"strong\",null,{\"children\":[\"类似 \",[\"$r\",\"code\",null,{\"children\":\"artwork.seen = nextSeen\"}],\" 这种会产生 mutation 的语法不会再有任何问题了：\"]}]]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"updateMyTodos(draft => {\\r\\n  const artwork = draft.find(a => a.id === artworkId);\\r\\n  artwork.seen = nextSeen;\\r\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这是因为你并不是在直接修改原始的 state，而是在修改 Immer 提供的一个特殊的 \",[\"$r\",\"code\",null,{\"children\":\"draft\"}],\" 对象。同理，你也可以为 \",[\"$r\",\"code\",null,{\"children\":\"draft\"}],\" 的内容使用 \",[\"$r\",\"code\",null,{\"children\":\"push()\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"pop()\"}],\" 这些会直接修改原值的方法。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在幕后，Immer 总是会根据你对 \",[\"$r\",\"code\",null,{\"children\":\"draft\"}],\" 的修改来从头开始构建下一个 state。这使得你的事件处理程序非常的简洁，同时也不会直接修改 state。\"]}],\"\\n\",[\"$r\",\"Recap\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"你可以把数组放入 state 中，但你不应该直接修改它。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"不要直接修改数组，而是创建它的一份 \",[\"$r\",\"strong\",null,{\"children\":\"新的\"}],\" 拷贝，然后使用新的数组来更新它的状态。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"你可以使用 \",[\"$r\",\"code\",null,{\"children\":\"[...arr, newItem]\"}],\" 这样的数组展开语法来向数组中添加元素。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"你可以使用 \",[\"$r\",\"code\",null,{\"children\":\"filter()\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"map()\"}],\" 来创建一个经过过滤或者变换的数组。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"你可以使用 Immer 来保持代码简洁。\"}],\"\\n\"]}]}],\"\\n\"]}],[\"$r\",\"Challenges\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"update-an-item-in-the-shopping-cart\",\"children\":\"更新购物车中的商品 \"}],[\"$r\",\"p\",null,{\"children\":[\"填写 \",[\"$r\",\"code\",null,{\"children\":\"handleIncreaseClick\"}],\" 的逻辑，以便按下“+”时递增对应数字：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nconst initialProducts = [{\\r\\n  id: 0,\\r\\n  name: 'Baklava',\\r\\n  count: 1,\\r\\n}, {\\r\\n  id: 1,\\r\\n  name: 'Cheese',\\r\\n  count: 5,\\r\\n}, {\\r\\n  id: 2,\\r\\n  name: 'Spaghetti',\\r\\n  count: 2,\\r\\n}];\\r\\n\\r\\nexport default function ShoppingCart() {\\r\\n  const [\\r\\n    products,\\r\\n    setProducts\\r\\n  ] = useState(initialProducts)\\r\\n\\r\\n  function handleIncreaseClick(productId) {\\r\\n\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <ul>\\r\\n      {products.map(product => (\\r\\n        <li key={product.id}>\\r\\n          {product.name}\\r\\n          {' '}\\r\\n          (<b>{product.count}</b>)\\r\\n          <button onClick={() => {\\r\\n            handleIncreaseClick(product.id);\\r\\n          }}>\\r\\n            +\\r\\n          </button>\\r\\n        </li>\\r\\n      ))}\\r\\n    </ul>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"你可以使用 \",[\"$r\",\"code\",null,{\"children\":\"map\"}],\" 函数创建一个新数组，然后使用 \",[\"$r\",\"code\",null,{\"children\":\"...\"}],\" 对象展开语法为新数组创建一个变更后对象的拷贝值：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nconst initialProducts = [{\\r\\n  id: 0,\\r\\n  name: 'Baklava',\\r\\n  count: 1,\\r\\n}, {\\r\\n  id: 1,\\r\\n  name: 'Cheese',\\r\\n  count: 5,\\r\\n}, {\\r\\n  id: 2,\\r\\n  name: 'Spaghetti',\\r\\n  count: 2,\\r\\n}];\\r\\n\\r\\nexport default function ShoppingCart() {\\r\\n  const [\\r\\n    products,\\r\\n    setProducts\\r\\n  ] = useState(initialProducts)\\r\\n\\r\\n  function handleIncreaseClick(productId) {\\r\\n    setProducts(products.map(product => {\\r\\n      if (product.id === productId) {\\r\\n        return {\\r\\n          ...product,\\r\\n          count: product.count + 1\\r\\n        };\\r\\n      } else {\\r\\n        return product;\\r\\n      }\\r\\n    }))\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <ul>\\r\\n      {products.map(product => (\\r\\n        <li key={product.id}>\\r\\n          {product.name}\\r\\n          {' '}\\r\\n          (<b>{product.count}</b>)\\r\\n          <button onClick={() => {\\r\\n            handleIncreaseClick(product.id);\\r\\n          }}>\\r\\n            +\\r\\n          </button>\\r\\n        </li>\\r\\n      ))}\\r\\n    </ul>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\n\"}]}]]}]]}],[\"$r\",\"h4\",null,{\"id\":\"remove-an-item-from-the-shopping-cart\",\"children\":\"删除购物车中的商品 \"}],[\"$r\",\"p\",null,{\"children\":[\"现在购物车有了一个正常工作的“+”按钮，但是“-”按钮却没有任何作用。你需要为它添加一个事件处理程序，以便按下它时可以减少对应商品的 \",[\"$r\",\"code\",null,{\"children\":\"count\"}],\"。如果在数字为 1 时按下按钮，商品需要自动从购物车中移除。确保商品计数永远不出现 0。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nconst initialProducts = [{\\r\\n  id: 0,\\r\\n  name: 'Baklava',\\r\\n  count: 1,\\r\\n}, {\\r\\n  id: 1,\\r\\n  name: 'Cheese',\\r\\n  count: 5,\\r\\n}, {\\r\\n  id: 2,\\r\\n  name: 'Spaghetti',\\r\\n  count: 2,\\r\\n}];\\r\\n\\r\\nexport default function ShoppingCart() {\\r\\n  const [\\r\\n    products,\\r\\n    setProducts\\r\\n  ] = useState(initialProducts)\\r\\n\\r\\n  function handleIncreaseClick(productId) {\\r\\n    setProducts(products.map(product => {\\r\\n      if (product.id === productId) {\\r\\n        return {\\r\\n          ...product,\\r\\n          count: product.count + 1\\r\\n        };\\r\\n      } else {\\r\\n        return product;\\r\\n      }\\r\\n    }))\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <ul>\\r\\n      {products.map(product => (\\r\\n        <li key={product.id}>\\r\\n          {product.name}\\r\\n          {' '}\\r\\n          (<b>{product.count}</b>)\\r\\n          <button onClick={() => {\\r\\n            handleIncreaseClick(product.id);\\r\\n          }}>\\r\\n            +\\r\\n          </button>\\r\\n          <button>\\r\\n            –\\r\\n          </button>\\r\\n        </li>\\r\\n      ))}\\r\\n    </ul>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"你可以先使用 \",[\"$r\",\"code\",null,{\"children\":\"map\"}],\" 生成一个新数组，然后使用 \",[\"$r\",\"code\",null,{\"children\":\"filter\"}],\" 移除 \",[\"$r\",\"code\",null,{\"children\":\"count\"}],\" 被设置为 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\" 的商品：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nconst initialProducts = [{\\r\\n  id: 0,\\r\\n  name: 'Baklava',\\r\\n  count: 1,\\r\\n}, {\\r\\n  id: 1,\\r\\n  name: 'Cheese',\\r\\n  count: 5,\\r\\n}, {\\r\\n  id: 2,\\r\\n  name: 'Spaghetti',\\r\\n  count: 2,\\r\\n}];\\r\\n\\r\\nexport default function ShoppingCart() {\\r\\n  const [\\r\\n    products,\\r\\n    setProducts\\r\\n  ] = useState(initialProducts)\\r\\n\\r\\n  function handleIncreaseClick(productId) {\\r\\n    setProducts(products.map(product => {\\r\\n      if (product.id === productId) {\\r\\n        return {\\r\\n          ...product,\\r\\n          count: product.count + 1\\r\\n        };\\r\\n      } else {\\r\\n        return product;\\r\\n      }\\r\\n    }))\\r\\n  }\\r\\n\\r\\n  function handleDecreaseClick(productId) {\\r\\n    let nextProducts = products.map(product => {\\r\\n      if (product.id === productId) {\\r\\n        return {\\r\\n          ...product,\\r\\n          count: product.count - 1\\r\\n        };\\r\\n      } else {\\r\\n        return product;\\r\\n      }\\r\\n    });\\r\\n    nextProducts = nextProducts.filter(p =>\\r\\n      p.count > 0\\r\\n    );\\r\\n    setProducts(nextProducts)\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <ul>\\r\\n      {products.map(product => (\\r\\n        <li key={product.id}>\\r\\n          {product.name}\\r\\n          {' '}\\r\\n          (<b>{product.count}</b>)\\r\\n          <button onClick={() => {\\r\\n            handleIncreaseClick(product.id);\\r\\n          }}>\\r\\n            +\\r\\n          </button>\\r\\n          <button onClick={() => {\\r\\n            handleDecreaseClick(product.id);\\r\\n          }}>\\r\\n            –\\r\\n          </button>\\r\\n        </li>\\r\\n      ))}\\r\\n    </ul>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\n\"}]}]]}]]}],[\"$r\",\"h4\",null,{\"id\":\"fix-the-mutations-using-non-mutative-methods\",\"children\":\"使用不会直接修改原始值的方法修复 mutation 的问题 \"}],[\"$r\",\"p\",null,{\"children\":[\"在下面的例子中，\",[\"$r\",\"code\",null,{\"children\":\"App.js\"}],\" 中所有的事件处理程序都会产生 mutation。这导致编辑和删除待办事项的功能无法正常运行。使用不会直接修改原始值的方法重写 \",[\"$r\",\"code\",null,{\"children\":\"handleAddTodo\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"handleChangeTodo\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"handleDeleteTodo\"}],\" 这三个函数：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\r\\nimport AddTodo from './AddTodo.js';\\r\\nimport TaskList from './TaskList.js';\\r\\n\\r\\nlet nextId = 3;\\r\\nconst initialTodos = [\\r\\n  { id: 0, title: 'Buy milk', done: true },\\r\\n  { id: 1, title: 'Eat tacos', done: false },\\r\\n  { id: 2, title: 'Brew tea', done: false },\\r\\n];\\r\\n\\r\\nexport default function TaskApp() {\\r\\n  const [todos, setTodos] = useState(\\r\\n    initialTodos\\r\\n  );\\r\\n\\r\\n  function handleAddTodo(title) {\\r\\n    todos.push({\\r\\n      id: nextId++,\\r\\n      title: title,\\r\\n      done: false\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function handleChangeTodo(nextTodo) {\\r\\n    const todo = todos.find(t =>\\r\\n      t.id === nextTodo.id\\r\\n    );\\r\\n    todo.title = nextTodo.title;\\r\\n    todo.done = nextTodo.done;\\r\\n  }\\r\\n\\r\\n  function handleDeleteTodo(todoId) {\\r\\n    const index = todos.findIndex(t =>\\r\\n      t.id === todoId\\r\\n    );\\r\\n    todos.splice(index, 1);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <AddTodo\\r\\n        onAddTodo={handleAddTodo}\\r\\n      />\\r\\n      <TaskList\\r\\n        todos={todos}\\r\\n        onChangeTodo={handleChangeTodo}\\r\\n        onDeleteTodo={handleDeleteTodo}\\r\\n      />\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTodo.js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nexport default function AddTodo({ onAddTodo }) {\\r\\n  const [title, setTitle] = useState('');\\r\\n  return (\\r\\n    <>\\r\\n      <input\\r\\n        placeholder=\\\"Add todo\\\"\\r\\n        value={title}\\r\\n        onChange={e => setTitle(e.target.value)}\\r\\n      />\\r\\n      <button onClick={() => {\\r\\n        setTitle('');\\r\\n        onAddTodo(title);\\r\\n      }}>添加</button>\\r\\n    </>\\r\\n  )\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nexport default function TaskList({\\r\\n  todos,\\r\\n  onChangeTodo,\\r\\n  onDeleteTodo\\r\\n}) {\\r\\n  return (\\r\\n    <ul>\\r\\n      {todos.map(todo => (\\r\\n        <li key={todo.id}>\\r\\n          <Task\\r\\n            todo={todo}\\r\\n            onChange={onChangeTodo}\\r\\n            onDelete={onDeleteTodo}\\r\\n          />\\r\\n        </li>\\r\\n      ))}\\r\\n    </ul>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction Task({ todo, onChange, onDelete }) {\\r\\n  const [isEditing, setIsEditing] = useState(false);\\r\\n  let todoContent;\\r\\n  if (isEditing) {\\r\\n    todoContent = (\\r\\n      <>\\r\\n        <input\\r\\n          value={todo.title}\\r\\n          onChange={e => {\\r\\n            onChange({\\r\\n              ...todo,\\r\\n              title: e.target.value\\r\\n            });\\r\\n          }} />\\r\\n        <button onClick={() => setIsEditing(false)}>\\r\\n          保存\\r\\n        </button>\\r\\n      </>\\r\\n    );\\r\\n  } else {\\r\\n    todoContent = (\\r\\n      <>\\r\\n        {todo.title}\\r\\n        <button onClick={() => setIsEditing(true)}>\\r\\n          编辑\\r\\n        </button>\\r\\n      </>\\r\\n    );\\r\\n  }\\r\\n  return (\\r\\n    <label>\\r\\n      <input\\r\\n        type=\\\"checkbox\\\"\\r\\n        checked={todo.done}\\r\\n        onChange={e => {\\r\\n          onChange({\\r\\n            ...todo,\\r\\n            done: e.target.checked\\r\\n          });\\r\\n        }}\\r\\n      />\\r\\n      {todoContent}\\r\\n      <button onClick={() => onDelete(todo.id)}>\\r\\n        删除\\r\\n      </button>\\r\\n    </label>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\r\\nli { list-style-type: none; }\\r\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"在 \",[\"$r\",\"code\",null,{\"children\":\"handleAddTodo\"}],\" 中，你可以使用数组展开语法；在 \",[\"$r\",\"code\",null,{\"children\":\"handleChangeTodo\"}],\" 中，你可以使用 \",[\"$r\",\"code\",null,{\"children\":\"map\"}],\" 创建一个新数组；在 \",[\"$r\",\"code\",null,{\"children\":\"handleDeleteTodo\"}],\" 中，你可以使用 \",[\"$r\",\"code\",null,{\"children\":\"filter\"}],\" 创建一个新数组。现在列表可以正常工作了：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\r\\nimport AddTodo from './AddTodo.js';\\r\\nimport TaskList from './TaskList.js';\\r\\n\\r\\nlet nextId = 3;\\r\\nconst initialTodos = [\\r\\n  { id: 0, title: 'Buy milk', done: true },\\r\\n  { id: 1, title: 'Eat tacos', done: false },\\r\\n  { id: 2, title: 'Brew tea', done: false },\\r\\n];\\r\\n\\r\\nexport default function TaskApp() {\\r\\n  const [todos, setTodos] = useState(\\r\\n    initialTodos\\r\\n  );\\r\\n\\r\\n  function handleAddTodo(title) {\\r\\n    setTodos([\\r\\n      ...todos,\\r\\n      {\\r\\n        id: nextId++,\\r\\n        title: title,\\r\\n        done: false\\r\\n      }\\r\\n    ]);\\r\\n  }\\r\\n\\r\\n  function handleChangeTodo(nextTodo) {\\r\\n    setTodos(todos.map(t => {\\r\\n      if (t.id === nextTodo.id) {\\r\\n        return nextTodo;\\r\\n      } else {\\r\\n        return t;\\r\\n      }\\r\\n    }));\\r\\n  }\\r\\n\\r\\n  function handleDeleteTodo(todoId) {\\r\\n    setTodos(\\r\\n      todos.filter(t => t.id !== todoId)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <AddTodo\\r\\n        onAddTodo={handleAddTodo}\\r\\n      />\\r\\n      <TaskList\\r\\n        todos={todos}\\r\\n        onChangeTodo={handleChangeTodo}\\r\\n        onDeleteTodo={handleDeleteTodo}\\r\\n      />\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTodo.js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nexport default function AddTodo({ onAddTodo }) {\\r\\n  const [title, setTitle] = useState('');\\r\\n  return (\\r\\n    <>\\r\\n      <input\\r\\n        placeholder=\\\"Add todo\\\"\\r\\n        value={title}\\r\\n        onChange={e => setTitle(e.target.value)}\\r\\n      />\\r\\n      <button onClick={() => {\\r\\n        setTitle('');\\r\\n        onAddTodo(title);\\r\\n      }}>添加</button>\\r\\n    </>\\r\\n  )\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nexport default function TaskList({\\r\\n  todos,\\r\\n  onChangeTodo,\\r\\n  onDeleteTodo\\r\\n}) {\\r\\n  return (\\r\\n    <ul>\\r\\n      {todos.map(todo => (\\r\\n        <li key={todo.id}>\\r\\n          <Task\\r\\n            todo={todo}\\r\\n            onChange={onChangeTodo}\\r\\n            onDelete={onDeleteTodo}\\r\\n          />\\r\\n        </li>\\r\\n      ))}\\r\\n    </ul>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction Task({ todo, onChange, onDelete }) {\\r\\n  const [isEditing, setIsEditing] = useState(false);\\r\\n  let todoContent;\\r\\n  if (isEditing) {\\r\\n    todoContent = (\\r\\n      <>\\r\\n        <input\\r\\n          value={todo.title}\\r\\n          onChange={e => {\\r\\n            onChange({\\r\\n              ...todo,\\r\\n              title: e.target.value\\r\\n            });\\r\\n          }} />\\r\\n        <button onClick={() => setIsEditing(false)}>\\r\\n          保存\\r\\n        </button>\\r\\n      </>\\r\\n    );\\r\\n  } else {\\r\\n    todoContent = (\\r\\n      <>\\r\\n        {todo.title}\\r\\n        <button onClick={() => setIsEditing(true)}>\\r\\n          编辑\\r\\n        </button>\\r\\n      </>\\r\\n    );\\r\\n  }\\r\\n  return (\\r\\n    <label>\\r\\n      <input\\r\\n        type=\\\"checkbox\\\"\\r\\n        checked={todo.done}\\r\\n        onChange={e => {\\r\\n          onChange({\\r\\n            ...todo,\\r\\n            done: e.target.checked\\r\\n          });\\r\\n        }}\\r\\n      />\\r\\n      {todoContent}\\r\\n      <button onClick={() => onDelete(todo.id)}>\\r\\n        删除\\r\\n      </button>\\r\\n    </label>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\r\\nli { list-style-type: none; }\\r\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}]]}],[\"$r\",\"h4\",null,{\"id\":\"fix-the-mutations-using-immer\",\"children\":\"使用 Immer 修复 mutation 的问题 \"}],[\"$r\",\"p\",null,{\"children\":[\"下面的例子和上一个挑战的相同。这次，你需要使用 Immer 来修复 mutation 的问题。为了方便，\",[\"$r\",\"code\",null,{\"children\":\"useImmer\"}],\" 已经被引入了，你需要使用它来替换 \",[\"$r\",\"code\",null,{\"children\":\"todos\"}],\" 的 state 变量。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\r\\nimport { useImmer } from 'use-immer';\\r\\nimport AddTodo from './AddTodo.js';\\r\\nimport TaskList from './TaskList.js';\\r\\n\\r\\nlet nextId = 3;\\r\\nconst initialTodos = [\\r\\n  { id: 0, title: 'Buy milk', done: true },\\r\\n  { id: 1, title: 'Eat tacos', done: false },\\r\\n  { id: 2, title: 'Brew tea', done: false },\\r\\n];\\r\\n\\r\\nexport default function TaskApp() {\\r\\n  const [todos, setTodos] = useState(\\r\\n    initialTodos\\r\\n  );\\r\\n\\r\\n  function handleAddTodo(title) {\\r\\n    todos.push({\\r\\n      id: nextId++,\\r\\n      title: title,\\r\\n      done: false\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function handleChangeTodo(nextTodo) {\\r\\n    const todo = todos.find(t =>\\r\\n      t.id === nextTodo.id\\r\\n    );\\r\\n    todo.title = nextTodo.title;\\r\\n    todo.done = nextTodo.done;\\r\\n  }\\r\\n\\r\\n  function handleDeleteTodo(todoId) {\\r\\n    const index = todos.findIndex(t =>\\r\\n      t.id === todoId\\r\\n    );\\r\\n    todos.splice(index, 1);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <AddTodo\\r\\n        onAddTodo={handleAddTodo}\\r\\n      />\\r\\n      <TaskList\\r\\n        todos={todos}\\r\\n        onChangeTodo={handleChangeTodo}\\r\\n        onDeleteTodo={handleDeleteTodo}\\r\\n      />\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTodo.js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nexport default function AddTodo({ onAddTodo }) {\\r\\n  const [title, setTitle] = useState('');\\r\\n  return (\\r\\n    <>\\r\\n      <input\\r\\n        placeholder=\\\"Add todo\\\"\\r\\n        value={title}\\r\\n        onChange={e => setTitle(e.target.value)}\\r\\n      />\\r\\n      <button onClick={() => {\\r\\n        setTitle('');\\r\\n        onAddTodo(title);\\r\\n      }}>添加</button>\\r\\n    </>\\r\\n  )\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nexport default function TaskList({\\r\\n  todos,\\r\\n  onChangeTodo,\\r\\n  onDeleteTodo\\r\\n}) {\\r\\n  return (\\r\\n    <ul>\\r\\n      {todos.map(todo => (\\r\\n        <li key={todo.id}>\\r\\n          <Task\\r\\n            todo={todo}\\r\\n            onChange={onChangeTodo}\\r\\n            onDelete={onDeleteTodo}\\r\\n          />\\r\\n        </li>\\r\\n      ))}\\r\\n    </ul>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction Task({ todo, onChange, onDelete }) {\\r\\n  const [isEditing, setIsEditing] = useState(false);\\r\\n  let todoContent;\\r\\n  if (isEditing) {\\r\\n    todoContent = (\\r\\n      <>\\r\\n        <input\\r\\n          value={todo.title}\\r\\n          onChange={e => {\\r\\n            onChange({\\r\\n              ...todo,\\r\\n              title: e.target.value\\r\\n            });\\r\\n          }} />\\r\\n        <button onClick={() => setIsEditing(false)}>\\r\\n          保存\\r\\n        </button>\\r\\n      </>\\r\\n    );\\r\\n  } else {\\r\\n    todoContent = (\\r\\n      <>\\r\\n        {todo.title}\\r\\n        <button onClick={() => setIsEditing(true)}>\\r\\n          编辑\\r\\n        </button>\\r\\n      </>\\r\\n    );\\r\\n  }\\r\\n  return (\\r\\n    <label>\\r\\n      <input\\r\\n        type=\\\"checkbox\\\"\\r\\n        checked={todo.done}\\r\\n        onChange={e => {\\r\\n          onChange({\\r\\n            ...todo,\\r\\n            done: e.target.checked\\r\\n          });\\r\\n        }}\\r\\n      />\\r\\n      {todoContent}\\r\\n      <button onClick={() => onDelete(todo.id)}>\\r\\n        删除\\r\\n      </button>\\r\\n    </label>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\r\\nli { list-style-type: none; }\\r\\nul, li { margin: 0; padding: 0; }\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json\",\"children\":\"{\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"immer\\\": \\\"1.7.3\\\",\\r\\n    \\\"react\\\": \\\"latest\\\",\\r\\n    \\\"react-dom\\\": \\\"latest\\\",\\r\\n    \\\"react-scripts\\\": \\\"latest\\\",\\r\\n    \\\"use-immer\\\": \\\"0.5.1\\\"\\r\\n  },\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"start\\\": \\\"react-scripts start\\\",\\r\\n    \\\"build\\\": \\\"react-scripts build\\\",\\r\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\r\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\r\\n  }\\r\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"通过使用 Immer，只要你仅仅直接修改 Immer 提供给你的 \",[\"$r\",\"code\",null,{\"children\":\"draft\"}],\" 的一部分，你就可以以 mutation 的方式写代码。这里所有的 mutation 都在 \",[\"$r\",\"code\",null,{\"children\":\"draft\"}],\" 上执行，因此代码可以正常运行：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\r\\nimport { useImmer } from 'use-immer';\\r\\nimport AddTodo from './AddTodo.js';\\r\\nimport TaskList from './TaskList.js';\\r\\n\\r\\nlet nextId = 3;\\r\\nconst initialTodos = [\\r\\n  { id: 0, title: 'Buy milk', done: true },\\r\\n  { id: 1, title: 'Eat tacos', done: false },\\r\\n  { id: 2, title: 'Brew tea', done: false },\\r\\n];\\r\\n\\r\\nexport default function TaskApp() {\\r\\n  const [todos, updateTodos] = useImmer(\\r\\n    initialTodos\\r\\n  );\\r\\n\\r\\n  function handleAddTodo(title) {\\r\\n    updateTodos(draft => {\\r\\n      draft.push({\\r\\n        id: nextId++,\\r\\n        title: title,\\r\\n        done: false\\r\\n      });\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function handleChangeTodo(nextTodo) {\\r\\n    updateTodos(draft => {\\r\\n      const todo = draft.find(t =>\\r\\n        t.id === nextTodo.id\\r\\n      );\\r\\n      todo.title = nextTodo.title;\\r\\n      todo.done = nextTodo.done;\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function handleDeleteTodo(todoId) {\\r\\n    updateTodos(draft => {\\r\\n      const index = draft.findIndex(t =>\\r\\n        t.id === todoId\\r\\n      );\\r\\n      draft.splice(index, 1);\\r\\n    });\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <AddTodo\\r\\n        onAddTodo={handleAddTodo}\\r\\n      />\\r\\n      <TaskList\\r\\n        todos={todos}\\r\\n        onChangeTodo={handleChangeTodo}\\r\\n        onDeleteTodo={handleDeleteTodo}\\r\\n      />\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTodo.js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nexport default function AddTodo({ onAddTodo }) {\\r\\n  const [title, setTitle] = useState('');\\r\\n  return (\\r\\n    <>\\r\\n      <input\\r\\n        placeholder=\\\"Add todo\\\"\\r\\n        value={title}\\r\\n        onChange={e => setTitle(e.target.value)}\\r\\n      />\\r\\n      <button onClick={() => {\\r\\n        setTitle('');\\r\\n        onAddTodo(title);\\r\\n      }}>添加</button>\\r\\n    </>\\r\\n  )\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nexport default function TaskList({\\r\\n  todos,\\r\\n  onChangeTodo,\\r\\n  onDeleteTodo\\r\\n}) {\\r\\n  return (\\r\\n    <ul>\\r\\n      {todos.map(todo => (\\r\\n        <li key={todo.id}>\\r\\n          <Task\\r\\n            todo={todo}\\r\\n            onChange={onChangeTodo}\\r\\n            onDelete={onDeleteTodo}\\r\\n          />\\r\\n        </li>\\r\\n      ))}\\r\\n    </ul>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction Task({ todo, onChange, onDelete }) {\\r\\n  const [isEditing, setIsEditing] = useState(false);\\r\\n  let todoContent;\\r\\n  if (isEditing) {\\r\\n    todoContent = (\\r\\n      <>\\r\\n        <input\\r\\n          value={todo.title}\\r\\n          onChange={e => {\\r\\n            onChange({\\r\\n              ...todo,\\r\\n              title: e.target.value\\r\\n            });\\r\\n          }} />\\r\\n        <button onClick={() => setIsEditing(false)}>\\r\\n          保存\\r\\n        </button>\\r\\n      </>\\r\\n    );\\r\\n  } else {\\r\\n    todoContent = (\\r\\n      <>\\r\\n        {todo.title}\\r\\n        <button onClick={() => setIsEditing(true)}>\\r\\n          编辑\\r\\n        </button>\\r\\n      </>\\r\\n    );\\r\\n  }\\r\\n  return (\\r\\n    <label>\\r\\n      <input\\r\\n        type=\\\"checkbox\\\"\\r\\n        checked={todo.done}\\r\\n        onChange={e => {\\r\\n          onChange({\\r\\n            ...todo,\\r\\n            done: e.target.checked\\r\\n          });\\r\\n        }}\\r\\n      />\\r\\n      {todoContent}\\r\\n      <button onClick={() => onDelete(todo.id)}>\\r\\n        删除\\r\\n      </button>\\r\\n    </label>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\r\\nli { list-style-type: none; }\\r\\nul, li { margin: 0; padding: 0; }\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json\",\"children\":\"{\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"immer\\\": \\\"1.7.3\\\",\\r\\n    \\\"react\\\": \\\"latest\\\",\\r\\n    \\\"react-dom\\\": \\\"latest\\\",\\r\\n    \\\"react-scripts\\\": \\\"latest\\\",\\r\\n    \\\"use-immer\\\": \\\"0.5.1\\\"\\r\\n  },\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"start\\\": \\\"react-scripts start\\\",\\r\\n    \\\"build\\\": \\\"react-scripts build\\\",\\r\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\r\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\r\\n  }\\r\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"你还可以在 Immer 中混合使用会改变和不会改变原始值的方法。\"}],[\"$r\",\"p\",null,{\"children\":[\"例如，在下面的代码中，\",[\"$r\",\"code\",null,{\"children\":\"handleAddTodo\"}],\"是通过直接修改 Immer 的 \",[\"$r\",\"code\",null,{\"children\":\"draft\"}],\" 实现的，而 \",[\"$r\",\"code\",null,{\"children\":\"handleChangeTodo\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"handleDeleteTodo\"}],\" 则使用了不会直接修改原始值的 \",[\"$r\",\"code\",null,{\"children\":\"map\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"filter\"}],\" 方法：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\r\\nimport { useImmer } from 'use-immer';\\r\\nimport AddTodo from './AddTodo.js';\\r\\nimport TaskList from './TaskList.js';\\r\\n\\r\\nlet nextId = 3;\\r\\nconst initialTodos = [\\r\\n  { id: 0, title: 'Buy milk', done: true },\\r\\n  { id: 1, title: 'Eat tacos', done: false },\\r\\n  { id: 2, title: 'Brew tea', done: false },\\r\\n];\\r\\n\\r\\nexport default function TaskApp() {\\r\\n  const [todos, updateTodos] = useImmer(\\r\\n    initialTodos\\r\\n  );\\r\\n\\r\\n  function handleAddTodo(title) {\\r\\n    updateTodos(draft => {\\r\\n      draft.push({\\r\\n        id: nextId++,\\r\\n        title: title,\\r\\n        done: false\\r\\n      });\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function handleChangeTodo(nextTodo) {\\r\\n    updateTodos(todos.map(todo => {\\r\\n      if (todo.id === nextTodo.id) {\\r\\n        return nextTodo;\\r\\n      } else {\\r\\n        return todo;\\r\\n      }\\r\\n    }));\\r\\n  }\\r\\n\\r\\n  function handleDeleteTodo(todoId) {\\r\\n    updateTodos(\\r\\n      todos.filter(t => t.id !== todoId)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <AddTodo\\r\\n        onAddTodo={handleAddTodo}\\r\\n      />\\r\\n      <TaskList\\r\\n        todos={todos}\\r\\n        onChangeTodo={handleChangeTodo}\\r\\n        onDeleteTodo={handleDeleteTodo}\\r\\n      />\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTodo.js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nexport default function AddTodo({ onAddTodo }) {\\r\\n  const [title, setTitle] = useState('');\\r\\n  return (\\r\\n    <>\\r\\n      <input\\r\\n        placeholder=\\\"Add todo\\\"\\r\\n        value={title}\\r\\n        onChange={e => setTitle(e.target.value)}\\r\\n      />\\r\\n      <button onClick={() => {\\r\\n        setTitle('');\\r\\n        onAddTodo(title);\\r\\n      }}>添加</button>\\r\\n    </>\\r\\n  )\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js\",\"children\":\"import { useState } from 'react';\\r\\n\\r\\nexport default function TaskList({\\r\\n  todos,\\r\\n  onChangeTodo,\\r\\n  onDeleteTodo\\r\\n}) {\\r\\n  return (\\r\\n    <ul>\\r\\n      {todos.map(todo => (\\r\\n        <li key={todo.id}>\\r\\n          <Task\\r\\n            todo={todo}\\r\\n            onChange={onChangeTodo}\\r\\n            onDelete={onDeleteTodo}\\r\\n          />\\r\\n        </li>\\r\\n      ))}\\r\\n    </ul>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction Task({ todo, onChange, onDelete }) {\\r\\n  const [isEditing, setIsEditing] = useState(false);\\r\\n  let todoContent;\\r\\n  if (isEditing) {\\r\\n    todoContent = (\\r\\n      <>\\r\\n        <input\\r\\n          value={todo.title}\\r\\n          onChange={e => {\\r\\n            onChange({\\r\\n              ...todo,\\r\\n              title: e.target.value\\r\\n            });\\r\\n          }} />\\r\\n        <button onClick={() => setIsEditing(false)}>\\r\\n          保存\\r\\n        </button>\\r\\n      </>\\r\\n    );\\r\\n  } else {\\r\\n    todoContent = (\\r\\n      <>\\r\\n        {todo.title}\\r\\n        <button onClick={() => setIsEditing(true)}>\\r\\n          编辑\\r\\n        </button>\\r\\n      </>\\r\\n    );\\r\\n  }\\r\\n  return (\\r\\n    <label>\\r\\n      <input\\r\\n        type=\\\"checkbox\\\"\\r\\n        checked={todo.done}\\r\\n        onChange={e => {\\r\\n          onChange({\\r\\n            ...todo,\\r\\n            done: e.target.checked\\r\\n          });\\r\\n        }}\\r\\n      />\\r\\n      {todoContent}\\r\\n      <button onClick={() => onDelete(todo.id)}>\\r\\n        删除\\r\\n      </button>\\r\\n    </label>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\r\\nli { list-style-type: none; }\\r\\nul, li { margin: 0; padding: 0; }\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json\",\"children\":\"{\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"immer\\\": \\\"1.7.3\\\",\\r\\n    \\\"react\\\": \\\"latest\\\",\\r\\n    \\\"react-dom\\\": \\\"latest\\\",\\r\\n    \\\"react-scripts\\\": \\\"latest\\\",\\r\\n    \\\"use-immer\\\": \\\"0.5.1\\\"\\r\\n  },\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"start\\\": \\\"react-scripts start\\\",\\r\\n    \\\"build\\\": \\\"react-scripts build\\\",\\r\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\r\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\r\\n  }\\r\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"通过使用 Immer ，你可以为每个单独的场景选择最为自然的代码风格。\"}]]}]]}]]","toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#updating-arrays-without-mutation\",\"depth\":2,\"text\":\"在没有 mutation 的前提下更新数组 \"},{\"url\":\"#adding-to-an-array\",\"depth\":3,\"text\":\"向数组中添加元素 \"},{\"url\":\"#removing-from-an-array\",\"depth\":3,\"text\":\"从数组中删除元素 \"},{\"url\":\"#transforming-an-array\",\"depth\":3,\"text\":\"转换数组 \"},{\"url\":\"#replacing-items-in-an-array\",\"depth\":3,\"text\":\"替换数组中的元素 \"},{\"url\":\"#inserting-into-an-array\",\"depth\":3,\"text\":\"向数组中插入元素 \"},{\"url\":\"#making-other-changes-to-an-array\",\"depth\":3,\"text\":\"其他改变数组的情况 \"},{\"url\":\"#updating-objects-inside-arrays\",\"depth\":2,\"text\":\"更新数组内部的对象 \"},{\"url\":\"#write-concise-update-logic-with-immer\",\"depth\":3,\"text\":\"使用 Immer 编写简洁的更新逻辑 \"},{\"url\":\"#recap\",\"depth\":2,\"text\":\"Recap\"},{\"url\":\"#challenges\",\"depth\":2,\"text\":\"Challenges\"}]","meta":{"title":"更新 state 中的数组","translators":["yliaz","takeItIzzy","KnowsCount"]}},"__N_SSG":true}