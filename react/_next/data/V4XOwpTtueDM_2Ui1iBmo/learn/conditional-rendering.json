{"pageProps":{"content":"[[\"$r\",\"MaxWidth\",\"8\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"通常你的组件会需要根据不同的情况显示不同的内容。在 React 中，你可以通过使用 JavaScript 的 \",[\"$r\",\"code\",null,{\"children\":\"if\"}],\" 语句、\",[\"$r\",\"code\",null,{\"children\":\"&&\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"? :\"}],\" 运算符来选择性地渲染 JSX。\"]}]}],\"\\n\",[\"$r\",\"YouWillLearn\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何根据不同条件返回不同的 JSX\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何根据不同条件包含或者去掉部分 JSX\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"一些你会在 React 代码库里遇到的常用的条件语法快捷表达式\"}],\"\\n\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"conditionally-returning-jsx\",\"children\":\"条件返回 JSX \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"假设有一个 \",[\"$r\",\"code\",null,{\"children\":\"PackingList\"}],\" 组件，里面渲染多个 \",[\"$r\",\"code\",null,{\"children\":\"Item\"}],\" 组件，每个物品可标记为打包与否：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Item({ name, isPacked }) {\\r\\n  return <li className=\\\"item\\\">{name}</li>;\\r\\n}\\r\\n\\r\\nexport default function PackingList() {\\r\\n  return (\\r\\n    <section>\\r\\n      <h1>Sally Ride 的行李清单</h1>\\r\\n      <ul>\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"宇航服\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"带金箔的头盔\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={false} \\r\\n          name=\\\"Tam 的照片\\\" \\r\\n        />\\r\\n      </ul>\\r\\n    </section>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"18\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"需要注意的是，有些 \",[\"$r\",\"code\",null,{\"children\":\"Item\"}],\" 组件的 \",[\"$r\",\"code\",null,{\"children\":\"isPacked\"}],\" 属性是被设为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\" 而不是 \",[\"$r\",\"code\",null,{\"children\":\"false\"}],\"。你可以在那些满足 \",[\"$r\",\"code\",null,{\"children\":\"isPacked={true}\"}],\" 条件的物品旁加上一个勾选符号（✔）。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"if/else 语句\"}],\" 去判断：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"if (isPacked) {\\r\\n  return <li className=\\\"item\\\">{name} ✔</li>;\\r\\n}\\r\\nreturn <li className=\\\"item\\\">{name}</li>;\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果 \",[\"$r\",\"code\",null,{\"children\":\"isPacked\"}],\" 属性是 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"，这段代码会\",[\"$r\",\"strong\",null,{\"children\":\"返回一个不一样的 JSX\"}],\"。通过这样的改动，一些物品的名字后面会出现一个勾选符号：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Item({ name, isPacked }) {\\r\\n  if (isPacked) {\\r\\n    return <li className=\\\"item\\\">{name} ✔</li>;\\r\\n  }\\r\\n  return <li className=\\\"item\\\">{name}</li>;\\r\\n}\\r\\n\\r\\nexport default function PackingList() {\\r\\n  return (\\r\\n    <section>\\r\\n      <h1>Sally Ride 的行李清单</h1>\\r\\n      <ul>\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"宇航服\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"带金箔的头盔\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={false} \\r\\n          name=\\\"Tam 的照片\\\" \\r\\n        />\\r\\n      </ul>\\r\\n    </section>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"32\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"动手尝试一下，看看各种情况会出现什么不同的结果！\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"留意这里你是怎么使用 JavaScript 的 \",[\"$r\",\"code\",null,{\"children\":\"if\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"return\"}],\" 语句来写分支逻辑。在 React 中，是由 JavaScript 来处理控制流的（比如条件）。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"conditionally-returning-nothing-with-null\",\"children\":[\"选择性地返回 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在一些情况下，你不想有任何东西进行渲染。比如，你不想显示已经打包好的物品。但一个组件必须返回一些东西。这种情况下，你可以直接返回 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"if (isPacked) {\\r\\n  return null;\\r\\n}\\r\\nreturn <li className=\\\"item\\\">{name}</li>;\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果组件的 \",[\"$r\",\"code\",null,{\"children\":\"isPacked\"}],\" 属性为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"，那么它将只返回 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"。否则，它将返回相应的 JSX 用来渲染。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Item({ name, isPacked }) {\\r\\n  if (isPacked) {\\r\\n    return null;\\r\\n  }\\r\\n  return <li className=\\\"item\\\">{name}</li>;\\r\\n}\\r\\n\\r\\nexport default function PackingList() {\\r\\n  return (\\r\\n    <section>\\r\\n      <h1>Sally Ride 的行李清单</h1>\\r\\n      <ul>\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"宇航服\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"带金箔的头盔\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={false} \\r\\n          name=\\\"Tam 的照片\\\" \\r\\n        />\\r\\n      </ul>\\r\\n    </section>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"70\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"实际上，在组件里返回 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" 并不常见，因为这样会让想使用它的开发者感觉奇怪。通常情况下，你可以在父组件里选择是否要渲染该组件。让我们接着往下看吧！\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"conditionally-including-jsx\",\"children\":\"选择性地包含 JSX \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在之前的例子里，你在组件内部控制哪些 JSX 树（如果有的话！）会返回。你可能已经发现了在渲染输出里会有一些重复的内容：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<li className=\\\"item\\\">{name} ✔</li>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"和下面的写法很像：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<li className=\\\"item\\\">{name}</li>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"两个条件分支都会返回 \",[\"$r\",\"code\",null,{\"children\":\"<li className=\\\"item\\\">...</li>\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"if (isPacked) {\\r\\n  return <li className=\\\"item\\\">{name} ✔</li>;\\r\\n}\\r\\nreturn <li className=\\\"item\\\">{name}</li>;\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"虽然这些重复的内容没什么害处，但这样可能会导致你的代码更难维护。比如你想更改 \",[\"$r\",\"code\",null,{\"children\":\"className\"}],\"？你就需要修改两个地方！针对这种情况，你可以通过选择性地包含一小段 JSX 来让你的代码更加 \",[\"$r\",\"a\",null,{\"href\":\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"DRY\"}],\"。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"conditional-ternary-operator--\",\"children\":[\"三目运算符（\",[\"$r\",\"code\",null,{\"children\":\"? :\"}],\"） \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"JavaScript 有一种紧凑型语法来实现条件判断表达式——\",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"条件运算符\"}],\" 又称“三目运算符”。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"除了这样：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"if (isPacked) {\\r\\n  return <li className=\\\"item\\\">{name} ✔</li>;\\r\\n}\\r\\nreturn <li className=\\\"item\\\">{name}</li>;\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你还可以这样实现：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"return (\\r\\n  <li className=\\\"item\\\">\\r\\n    {isPacked ? name + ' ✔' : name}\\r\\n  </li>\\r\\n);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以认为，\",[\"$r\",\"em\",null,{\"children\":[\"“如果 \",[\"$r\",\"code\",null,{\"children\":\"isPacked\"}],\" 为 true 时，则（\",[\"$r\",\"code\",null,{\"children\":\"?\"}],\"）渲染 \",[\"$r\",\"code\",null,{\"children\":\"name + ' ✔'\"}],\"，否则（\",[\"$r\",\"code\",null,{\"children\":\":\"}],\"）渲染 \",[\"$r\",\"code\",null,{\"children\":\"name\"}],\"。”\"]}]]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"are-these-two-examples-fully-equivalent\",\"children\":\"两个例子完全一样吗？ \"}],[\"$r\",\"p\",null,{\"children\":[\"如果你之前是习惯面向对象开发的，你可能会认为上面的两个例子略有不同，因为其中一个可能会创建两个不同的 \",[\"$r\",\"code\",null,{\"children\":\"<li>\"}],\" “实例”。但 JSX 元素不是“实例”，因为它们没有内部状态也不是真实的 DOM 节点。它们只是一些简单的描述，就像图纸一样。所以上面这两个例子事实上是完全相同的。在 \",[\"$r\",\"a\",null,{\"href\":\"/learn/preserving-and-resetting-state\",\"children\":\"状态的保持和重置\"}],\" 里会深入探讨其原因。\"]}]]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在，假如你想将对应物品的文本放到另一个 HTML 标签里，比如用 \",[\"$r\",\"code\",null,{\"children\":\"<del>\"}],\" 来显示删除线。你可以添加更多的换行和括号，以便在各种情况下更好地去嵌套 JSX：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Item({ name, isPacked }) {\\r\\n  return (\\r\\n    <li className=\\\"item\\\">\\r\\n      {isPacked ? (\\r\\n        <del>\\r\\n          {name + ' ✔'}\\r\\n        </del>\\r\\n      ) : (\\r\\n        name\\r\\n      )}\\r\\n    </li>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default function PackingList() {\\r\\n  return (\\r\\n    <section>\\r\\n      <h1>Sally Ride 的行李清单</h1>\\r\\n      <ul>\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"宇航服\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"带金箔的头盔\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={false} \\r\\n          name=\\\"Tam 的照片\\\" \\r\\n        />\\r\\n      </ul>\\r\\n    </section>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"84\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"对于简单的条件判断，这样的风格可以很好地实现，但需要适量使用。如果你的组件里有很多的嵌套式条件表达式，则需要考虑通过提取为子组件来简化这些嵌套表达式。在 React 里，标签也是你代码中的一部分，所以你可以使用变量和函数来整理一些复杂的表达式。\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"logical-and-operator-\",\"children\":[\"与运算符（\",[\"$r\",\"code\",null,{\"children\":\"&&\"}],\"） \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你会遇到的另一个常见的快捷表达式是 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_AND#:~:text=The%20logical%20AND%20(%20%26%26%20)%20operator,it%20returns%20a%20Boolean%20value.\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"JavaScript 逻辑与（\",[\"$r\",\"code\",null,{\"children\":\"&&\"}],\"）运算符\"]}],\"。在 React 组件里，通常用在当条件成立时，你想渲染一些 JSX，\",[\"$r\",\"strong\",null,{\"children\":\"或者不做任何渲染\"}],\"。使用 \",[\"$r\",\"code\",null,{\"children\":\"&&\"}],\"，你也可以实现仅当 \",[\"$r\",\"code\",null,{\"children\":\"isPacked\"}],\" 为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\" 时，渲染勾选符号。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"return (\\r\\n  <li className=\\\"item\\\">\\r\\n    {name} {isPacked && '✔'}\\r\\n  </li>\\r\\n);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以认为，\",[\"$r\",\"em\",null,{\"children\":[\"“当 \",[\"$r\",\"code\",null,{\"children\":\"isPacked\"}],\" 为真值时，则（\",[\"$r\",\"code\",null,{\"children\":\"&&\"}],\"）渲染勾选符号，否则，不渲染。”\"]}]]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"下面为具体的例子：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Item({ name, isPacked }) {\\r\\n  return (\\r\\n    <li className=\\\"item\\\">\\r\\n      {name} {isPacked && '✔'}\\r\\n    </li>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default function PackingList() {\\r\\n  return (\\r\\n    <section>\\r\\n      <h1>Sally Ride 的行李清单</h1>\\r\\n      <ul>\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"宇航服\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"带金箔的头盔\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={false} \\r\\n          name=\\\"Tam 的照片\\\" \\r\\n        />\\r\\n      </ul>\\r\\n    </section>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"106\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_AND\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"JavaScript && 表达式\"}],\" 的左侧（我们的条件）为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\" 时，它则返回其右侧的值（在我们的例子里是勾选符号）。但条件的结果是 \",[\"$r\",\"code\",null,{\"children\":\"false\"}],\"，则整个表达式会变成 \",[\"$r\",\"code\",null,{\"children\":\"false\"}],\"。在 JSX 里，React 会将 \",[\"$r\",\"code\",null,{\"children\":\"false\"}],\" 视为一个“空值”，就像 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" 或者 \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\"，这样 React 就不会在这里进行任何渲染。\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"$r\",\"strong\",null,{\"children\":[\"切勿将数字放在 \",[\"$r\",\"code\",null,{\"children\":\"&&\"}],\" 左侧.\"]}]}],[\"$r\",\"p\",null,{\"children\":[\"JavaScript 会自动将左侧的值转换成布尔类型以判断条件成立与否。然而，如果左侧是 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\"，整个表达式将变成左侧的值（\",[\"$r\",\"code\",null,{\"children\":\"0\"}],\"），React 此时则会渲染 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\" 而不是不进行渲染。\"]}],[\"$r\",\"p\",null,{\"children\":[\"例如，一个常见的错误是 \",[\"$r\",\"code\",null,{\"children\":\"messageCount && <p>New messages</p>\"}],\"。其原本是想当 \",[\"$r\",\"code\",null,{\"children\":\"messageCount\"}],\" 为 0 的时候不进行渲染，但实际上却渲染了 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\"。\"]}],[\"$r\",\"p\",null,{\"children\":[\"为了更正，可以将左侧的值改成布尔类型：\",[\"$r\",\"code\",null,{\"children\":\"messageCount > 0 && <p>New messages</p>\"}],\"。\"]}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"conditionally-assigning-jsx-to-a-variable\",\"children\":\"选择性地将 JSX 赋值给变量 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当这些快捷方式妨碍写普通代码时，可以考虑使用 \",[\"$r\",\"code\",null,{\"children\":\"if\"}],\" 语句和变量。因为你可以使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"let\"}]}],\" 进行重复赋值，所以一开始你可以将你想展示的（这里指的是物品的名字）作为默认值赋予给该变量。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"let itemContent = name;\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"结合 \",[\"$r\",\"code\",null,{\"children\":\"if\"}],\" 语句，当 \",[\"$r\",\"code\",null,{\"children\":\"isPacked\"}],\" 为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\" 时，将 JSX 表达式的值重新赋值给 \",[\"$r\",\"code\",null,{\"children\":\"itemContent\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"if (isPacked) {\\r\\n  itemContent = name + \\\" ✔\\\";\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/learn/javascript-in-jsx-with-curly-braces#using-curly-braces-a-window-into-the-javascript-world\",\"children\":\"在 JSX 中通过大括号使用 JavaScript\"}],\"。将变量用大括号嵌入在返回的 JSX 树中，来嵌套计算好的表达式与 JSX：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<li className=\\\"item\\\">\\r\\n  {itemContent}\\r\\n</li>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这种方式是最冗长的，但也是最灵活的。下面是相关的例子：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Item({ name, isPacked }) {\\r\\n  let itemContent = name;\\r\\n  if (isPacked) {\\r\\n    itemContent = name + \\\" ✔\\\";\\r\\n  }\\r\\n  return (\\r\\n    <li className=\\\"item\\\">\\r\\n      {itemContent}\\r\\n    </li>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default function PackingList() {\\r\\n  return (\\r\\n    <section>\\r\\n      <h1>Sally Ride 的行李清单</h1>\\r\\n      <ul>\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"宇航服\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"带金箔的头盔\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={false} \\r\\n          name=\\\"Tam 的照片\\\" \\r\\n        />\\r\\n      </ul>\\r\\n    </section>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"110\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"跟之前的一样，这个方式不仅仅适用于文本，任意的 JSX 均适用：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Item({ name, isPacked }) {\\r\\n  let itemContent = name;\\r\\n  if (isPacked) {\\r\\n    itemContent = (\\r\\n      <del>\\r\\n        {name + \\\" ✔\\\"}\\r\\n      </del>\\r\\n    );\\r\\n  }\\r\\n  return (\\r\\n    <li className=\\\"item\\\">\\r\\n      {itemContent}\\r\\n    </li>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default function PackingList() {\\r\\n  return (\\r\\n    <section>\\r\\n      <h1>Sally Ride 的行李清单</h1>\\r\\n      <ul>\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"宇航服\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"带金箔的头盔\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={false} \\r\\n          name=\\\"Tam 的照片\\\" \\r\\n        />\\r\\n      </ul>\\r\\n    </section>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"116\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果对 JavaScript 不熟悉，这些不同的风格一开始可能会让你感到不知所措。但是，学习这些将有助于你理解和写任何的 JavaScript 代码，而不仅仅是 React 组件。一开始可以选择一个你喜欢的来用，然后当你忘记其他的怎么用时，可以再翻阅这份参考资料。\"}],\"\\n\",[\"$r\",\"Recap\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"在 React，你可以使用 JavaScript 来控制分支逻辑。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"你可以使用 \",[\"$r\",\"code\",null,{\"children\":\"if\"}],\" 语句来选择性地返回 JSX 表达式。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"你可以选择性地将一些 JSX 赋值给变量，然后用大括号将其嵌入到其他 JSX 中。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在 JSX 中，\",[\"$r\",\"code\",null,{\"children\":\"{cond ? <A /> : <B />}\"}],\" 表示 \",[\"$r\",\"em\",null,{\"children\":[\"“当 \",[\"$r\",\"code\",null,{\"children\":\"cond\"}],\" 为真值时, 渲染 \",[\"$r\",\"code\",null,{\"children\":\"<A />\"}],\"，否则 \",[\"$r\",\"code\",null,{\"children\":\"<B />\"}],\"”\"]}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在 JSX 中，\",[\"$r\",\"code\",null,{\"children\":\"{cond && <A />}\"}],\" 表示 \",[\"$r\",\"em\",null,{\"children\":[\"“当 \",[\"$r\",\"code\",null,{\"children\":\"cond\"}],\" 为真值时, 渲染 \",[\"$r\",\"code\",null,{\"children\":\"<A />\"}],\"，否则不进行渲染”\"]}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"快捷的表达式很常见，但如果你更倾向于使用 \",[\"$r\",\"code\",null,{\"children\":\"if\"}],\"，你也可以不使用它们，。\"]}],\"\\n\"]}]}],\"\\n\"]}],[\"$r\",\"Challenges\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"show-an-icon-for-incomplete-items-with--\",\"children\":[\"用 \",[\"$r\",\"code\",null,{\"children\":\"? :\"}],\" 给未完成的物品加上图标 \"]}],[\"$r\",\"p\",null,{\"children\":[\"当 \",[\"$r\",\"code\",null,{\"children\":\"isPacked\"}],\" 不为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\" 时，使用条件运算符 （\",[\"$r\",\"code\",null,{\"children\":\"cond ? a : b\"}],\"） 来渲染 ❌\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Item({ name, isPacked }) {\\r\\n  return (\\r\\n    <li className=\\\"item\\\">\\r\\n      {name} {isPacked && '✔'}\\r\\n    </li>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default function PackingList() {\\r\\n  return (\\r\\n    <section>\\r\\n      <h1>Sally Ride 的行李清单</h1>\\r\\n      <ul>\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"宇航服\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"带金箔的头盔\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={false} \\r\\n          name=\\\"Tam 的照片\\\" \\r\\n        />\\r\\n      </ul>\\r\\n    </section>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"Solution\",null,{\"children\":[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Item({ name, isPacked }) {\\r\\n  return (\\r\\n    <li className=\\\"item\\\">\\r\\n      {name} {isPacked ? '✔' : '❌'}\\r\\n    </li>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default function PackingList() {\\r\\n  return (\\r\\n    <section>\\r\\n      <h1>Sally Ride 的行李清单</h1>\\r\\n      <ul>\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"宇航服\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={true} \\r\\n          name=\\\"带金箔的头盔\\\" \\r\\n        />\\r\\n        <Item \\r\\n          isPacked={false} \\r\\n          name=\\\"Tam 的照片\\\" \\r\\n        />\\r\\n      </ul>\\r\\n    </section>\\r\\n  );\\r\\n}\\n\"}]}]}]}],[\"$r\",\"h4\",null,{\"id\":\"show-the-item-importance-with-\",\"children\":[\"用 \",[\"$r\",\"code\",null,{\"children\":\"&&\"}],\" 展示物品的重要性 \"]}],[\"$r\",\"p\",null,{\"children\":[\"在这个例子里，每个 \",[\"$r\",\"code\",null,{\"children\":\"Item\"}],\" 接收一个名为 \",[\"$r\",\"code\",null,{\"children\":\"importance\"}],\" 的数字类型属性。使用 \",[\"$r\",\"code\",null,{\"children\":\"&&\"}],\" 运算符渲染 “\",[\"$r\",\"em\",null,{\"children\":\"（重要性：X）\"}],\"”，以斜体呈现，但仅作用于那些难度值为非零的物品。你的物品列表后最终应该如下：\"]}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"宇航服 \",[\"$r\",\"em\",null,{\"children\":\"（重要性: 9）\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"带金箔的头盔\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"Tam 的照片 \",[\"$r\",\"em\",null,{\"children\":\"（重要性: 6）\"}]]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":\"注意别忘了在这两个标签之间加上一个空格！\"}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Item({ name, importance }) {\\r\\n  return (\\r\\n    <li className=\\\"item\\\">\\r\\n      {name}\\r\\n    </li>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default function PackingList() {\\r\\n  return (\\r\\n    <section>\\r\\n      <h1>Sally Ride 的行李清单</h1>\\r\\n      <ul>\\r\\n        <Item \\r\\n          importance={9} \\r\\n          name=\\\"宇航服\\\" \\r\\n        />\\r\\n        <Item \\r\\n          importance={0} \\r\\n          name=\\\"带金箔的头盔\\\" \\r\\n        />\\r\\n        <Item \\r\\n          importance={6} \\r\\n          name=\\\"Tam 的照片\\\" \\r\\n        />\\r\\n      </ul>\\r\\n    </section>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"这样应该可以实现：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Item({ name, importance }) {\\r\\n  return (\\r\\n    <li className=\\\"item\\\">\\r\\n      {name}\\r\\n      {importance > 0 && ' '}\\r\\n      {importance > 0 &&\\r\\n        <i>（重要性: {importance}）</i>\\r\\n      }\\r\\n    </li>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default function PackingList() {\\r\\n  return (\\r\\n    <section>\\r\\n      <h1>Sally Ride 的行李清单</h1>\\r\\n      <ul>\\r\\n        <Item \\r\\n          importance={9} \\r\\n          name=\\\"宇航服\\\" \\r\\n        />\\r\\n        <Item \\r\\n          importance={0} \\r\\n          name=\\\"带金箔的头盔\\\" \\r\\n        />\\r\\n        <Item \\r\\n          importance={6} \\r\\n          name=\\\"Tam 的照片\\\" \\r\\n        />\\r\\n      </ul>\\r\\n    </section>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"p\",null,{\"children\":[\"需注意的是，你必须使用 \",[\"$r\",\"code\",null,{\"children\":\"importance > 0 && ...\"}],\" 而不是 \",[\"$r\",\"code\",null,{\"children\":\"importance && ...\"}],\"，这样如果 \",[\"$r\",\"code\",null,{\"children\":\"importantce\"}],\" 是 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\"， \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\" 就不会被渲染出来了！\"]}],[\"$r\",\"p\",null,{\"children\":[\"在这个解决方案里，分别用了两个条件判断在名字和重要性标签里插入一个空格。另外，你也可以通过一个带前导空格的 Fragment ：\",[\"$r\",\"code\",null,{\"children\":\"importance > 0 && <> <i>...</i></>\"}],\"，或者将空格放在 \",[\"$r\",\"code\",null,{\"children\":\"<i>\"}],\" 标签内：\",[\"$r\",\"code\",null,{\"children\":\"importance > 0 && <i> ...</i>\"}],\", 来实现相同的效果。\"]}]]}],[\"$r\",\"h4\",null,{\"id\":\"refactor-a-series-of---to-if-and-variables\",\"children\":[\"用 \",[\"$r\",\"code\",null,{\"children\":\"if\"}],\" 和变量重构多余的 \",[\"$r\",\"code\",null,{\"children\":\"? :\"}],\" \"]}],[\"$r\",\"p\",null,{\"children\":[\"这个 \",[\"$r\",\"code\",null,{\"children\":\"Drink\"}],\" 组件使用了一系列的 \",[\"$r\",\"code\",null,{\"children\":\"? :\"}],\" 条件语句，根据 \",[\"$r\",\"code\",null,{\"children\":\"name\"}],\" 属性是 \",[\"$r\",\"code\",null,{\"children\":\"\\\"tea\\\"\"}],\" 还是 \",[\"$r\",\"code\",null,{\"children\":\"\\\"coffee\\\"\"}],\" 来显示不同的信息。问题是，每个饮品的信息是在不同的条件判断里的。请去掉那三个 \",[\"$r\",\"code\",null,{\"children\":\"? :\"}],\" 条件，使用一个 \",[\"$r\",\"code\",null,{\"children\":\"if\"}],\" 语句来重构这段代码。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Drink({ name }) {\\r\\n  return (\\r\\n    <section>\\r\\n      <h1>{name}</h1>\\r\\n      <dl>\\r\\n        <dt>Part of plant</dt>\\r\\n        <dd>{name === 'tea' ? 'leaf' : 'bean'}</dd>\\r\\n        <dt>Caffeine content</dt>\\r\\n        <dd>{name === 'tea' ? '15–70 mg/cup' : '80–185 mg/cup'}</dd>\\r\\n        <dt>Age</dt>\\r\\n        <dd>{name === 'tea' ? '4,000+ years' : '1,000+ years'}</dd>\\r\\n      </dl>\\r\\n    </section>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default function DrinkList() {\\r\\n  return (\\r\\n    <div>\\r\\n      <Drink name=\\\"tea\\\" />\\r\\n      <Drink name=\\\"coffee\\\" />\\r\\n    </div>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"p\",null,{\"children\":[\"当你使用 \",[\"$r\",\"code\",null,{\"children\":\"if\"}],\" 语句完成了以上代码的重构，你会不会有其他的想法去简化它？\"]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"很多的方法可以解决这个问题，这是只是其中一个可以切入的点：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Drink({ name }) {\\r\\n  let part, caffeine, age;\\r\\n  if (name === 'tea') {\\r\\n    part = 'leaf';\\r\\n    caffeine = '15–70 mg/cup';\\r\\n    age = '4,000+ years';\\r\\n  } else if (name === 'coffee') {\\r\\n    part = 'bean';\\r\\n    caffeine = '80–185 mg/cup';\\r\\n    age = '1,000+ years';\\r\\n  }\\r\\n  return (\\r\\n    <section>\\r\\n      <h1>{name}</h1>\\r\\n      <dl>\\r\\n        <dt>Part of plant</dt>\\r\\n        <dd>{part}</dd>\\r\\n        <dt>Caffeine content</dt>\\r\\n        <dd>{caffeine}</dd>\\r\\n        <dt>Age</dt>\\r\\n        <dd>{age}</dd>\\r\\n      </dl>\\r\\n    </section>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default function DrinkList() {\\r\\n  return (\\r\\n    <div>\\r\\n      <Drink name=\\\"tea\\\" />\\r\\n      <Drink name=\\\"coffee\\\" />\\r\\n    </div>\\r\\n  );\\r\\n}\\n\"}]}]}],[\"$r\",\"p\",null,{\"children\":\"这个例子中，每种饮品的信息是放在一起的，而没有将其分散到多个条件判断里。这会让我们以后可以更容易地增加更多的饮品。\"}],[\"$r\",\"p\",null,{\"children\":\"还可以通过将饮品信息存入对象中，从而去掉所有的条件判断语句：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const drinks = {\\r\\n  tea: {\\r\\n    part: 'leaf',\\r\\n    caffeine: '15–70 mg/cup',\\r\\n    age: '4,000+ years'\\r\\n  },\\r\\n  coffee: {\\r\\n    part: 'bean',\\r\\n    caffeine: '80–185 mg/cup',\\r\\n    age: '1,000+ years'\\r\\n  }\\r\\n};\\r\\n\\r\\nfunction Drink({ name }) {\\r\\n  const info = drinks[name];\\r\\n  return (\\r\\n    <section>\\r\\n      <h1>{name}</h1>\\r\\n      <dl>\\r\\n        <dt>Part of plant</dt>\\r\\n        <dd>{info.part}</dd>\\r\\n        <dt>Caffeine content</dt>\\r\\n        <dd>{info.caffeine}</dd>\\r\\n        <dt>Age</dt>\\r\\n        <dd>{info.age}</dd>\\r\\n      </dl>\\r\\n    </section>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default function DrinkList() {\\r\\n  return (\\r\\n    <div>\\r\\n      <Drink name=\\\"tea\\\" />\\r\\n      <Drink name=\\\"coffee\\\" />\\r\\n    </div>\\r\\n  );\\r\\n}\\n\"}]}]}]]}]]}]]","toc":"[{\"url\":\"#\",\"text\":\"Overview\",\"depth\":2},{\"url\":\"#conditionally-returning-jsx\",\"depth\":2,\"text\":\"条件返回 JSX \"},{\"url\":\"#conditionally-returning-nothing-with-null\",\"depth\":3,\"text\":[\"选择性地返回 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" \"]},{\"url\":\"#conditionally-including-jsx\",\"depth\":2,\"text\":\"选择性地包含 JSX \"},{\"url\":\"#conditional-ternary-operator--\",\"depth\":3,\"text\":[\"三目运算符（\",[\"$r\",\"code\",null,{\"children\":\"? :\"}],\"） \"]},{\"url\":\"#logical-and-operator-\",\"depth\":3,\"text\":[\"与运算符（\",[\"$r\",\"code\",null,{\"children\":\"&&\"}],\"） \"]},{\"url\":\"#conditionally-assigning-jsx-to-a-variable\",\"depth\":3,\"text\":\"选择性地将 JSX 赋值给变量 \"},{\"url\":\"#recap\",\"depth\":2,\"text\":\"Recap\"},{\"url\":\"#challenges\",\"depth\":2,\"text\":\"Challenges\"}]","meta":{"title":"条件渲染","translators":["Alienover"]}},"__N_SSG":true}