{"pageProps":{"content":"[[\"$r\",\"MaxWidth\",\"58\",{\"children\":[[\"$r\",\"Canary\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useFormState\"}],\" Hook 当前仅在 React Canary 与 experimental 渠道中可用。请点此了解更多关于 \",[\"$r\",\"a\",null,{\"href\":\"/community/versioning-policy#all-release-channels\",\"children\":\"React 发布渠道\"}],\" 的信息。此外，需要一款完全支持 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/use-client\",\"children\":\"React 服务器组件\"}],\" 特性的框架才可以使用 \",[\"$r\",\"code\",null,{\"children\":\"useFormState\"}],\" 的所有特性。\"]}]}],\"\\n\",[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useFormState\"}],\" 是一个可以根据某个表单动作的结果更新 state 的 Hook。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const [state, formAction] = useFormState(fn, initialState);\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"useformstate\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useFormState(action, initialState)\"}],\" \"]}],\"\\n\",\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在组件的顶层调用 \",[\"$r\",\"code\",null,{\"children\":\"useFormState\"}],\" 即可创建一个随 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/form\",\"children\":\"表单动作被调用\"}],\" 而更新的 state。在调用 \",[\"$r\",\"code\",null,{\"children\":\"useFormState\"}],\" 时在参数中传入现有的表单动作函数以及一个初始状态，它就会返回一个新的 action 函数和一个 form state 以供在 form 中使用。这个新的 form state 也会作为参数传入提供的表单动作函数。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useFormState } from \\\"react-dom\\\";\\r\\n\\r\\nasync function increment(previousState, formData) {\\r\\n  return previousState + 1;\\r\\n}\\r\\n\\r\\nfunction StatefulForm({}) {\\r\\n  const [state, formAction] = useFormState(increment, 0);\\r\\n  return (\\r\\n    <form>\\r\\n      {state}\\r\\n      <button formAction={formAction}>+1</button>\\r\\n    </form>\\r\\n  )\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"form state 是一个只在表单被提交触发 action 后才会被更新的值。如果该表单没有被提交，该值会保持传入的初始值不变。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果配合 Server Action 一起使用，\",[\"$r\",\"code\",null,{\"children\":\"useFormState\"}],\" 允许与表单交互的服务器的返回值在 hydration 完成前显示。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"请参阅下方更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"fn\"}],\"：当按钮被按下或者表单被提交时触发的函数。当函数被调用时，该函数会接收到表单的上一个 state（初始值为传入的 \",[\"$r\",\"code\",null,{\"children\":\"initialState\"}],\" 参数，否则为上一次执行完该函数的结果）作为函数的第一个参数，余下参数为普通表单动作接到的参数。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"initialState\"}],\"：state 的初始值。任何可序列化的值都可接收。当 action 被调用一次后该参数会被忽略。\"]}],\"\\n\"]}],\"\\n\",\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useFormState\"}],\" 返回一个包含两个值的数组：\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"当前的 state。第一次渲染期间，该值为传入的 \",[\"$r\",\"code\",null,{\"children\":\"initialState\"}],\" 参数值。在 action 被调用后该值会变为 action 的返回值。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"一个新的 action 函数用于在你的 \",[\"$r\",\"code\",null,{\"children\":\"form\"}],\" 组件的 \",[\"$r\",\"code\",null,{\"children\":\"action\"}],\" 参数或表单中任意一个 \",[\"$r\",\"code\",null,{\"children\":\"button\"}],\" 组件的 \",[\"$r\",\"code\",null,{\"children\":\"formAction\"}],\" 参数中传递。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"注意 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在支持 React 服务器组件的框架中使用该功能时，\",[\"$r\",\"code\",null,{\"children\":\"useFormState\"}],\" 允许表单在服务器渲染阶段时获得部分交互性。当不使用服务器组件时，它的特性与本地 state 相同。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"与直接通过表单动作调用的函数不同，传入 \",[\"$r\",\"code\",null,{\"children\":\"useFormState\"}],\" 的函数被调用时，会多传入一个代表 state 的上一个值或初始值的参数作为该函数的第一个参数。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"using-information-returned-by-a-form-action\",\"children\":\"使用某个表单动作返回的信息 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在组件的顶层调用 \",[\"$r\",\"code\",null,{\"children\":\"useFormState\"}],\" 以获取上一次表单被提交时触发的 action 的返回值。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 5, \\\"state\\\"], [2, 5, \\\"formAction\\\"], [3, 5, \\\"action\\\"], [4, 5, \\\"null\\\"], [2, 8, \\\"formAction\\\"]]\",\"children\":\"import { useFormState } from 'react-dom';\\r\\nimport { action } from './actions.js';\\r\\n\\r\\nfunction MyComponent() {\\r\\n  const [state, formAction] = useFormState(action, null);\\r\\n  // ...\\r\\n  return (\\r\\n    <form action={formAction}>\\r\\n      {/* ... */}\\r\\n    </form>\\r\\n  );\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useFormState\"}],\" 返回一个包含两个值的数组：\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"该表单的 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"当前 state\"}],\"，初始值为提供的 \",[\"$r\",\"CodeStep\",null,{\"step\":4,\"children\":\"初始 state\"}],\"，当表单被提交后则改为传入的 \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"action\"}],\" 的返回值。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"传入 \",[\"$r\",\"code\",null,{\"children\":\"<form>\"}],\" 标签的 \",[\"$r\",\"code\",null,{\"children\":\"action\"}],\" 属性的 \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"新 action\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"表单被提交后，传入的 \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"action\"}],\" 函数会被执行。返回值将会作为该表单的新的 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"当前 state\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"传入的 \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"action\"}],\" 接受到的第一个参数将会变为该表单的 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"当前 state\"}],\"。当表单第一次被提交时将会传入提供的 \",[\"$r\",\"CodeStep\",null,{\"step\":4,\"children\":\"初始 state\"}],\"，之后都将传入上一次调用 \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"action\"}],\" 函数的返回值。余下参数与未使用 \",[\"$r\",\"code\",null,{\"children\":\"useFormState\"}],\" 前接受的参数别无二致\",[\"$r\",\"sup\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"#note1\",\"children\":\"[1]\"}]}],\"。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[3, 1, \\\"action\\\"], [1, 1, \\\"currentState\\\"]]\",\"children\":\"function action(currentState, formData) {\\r\\n  // ...\\r\\n  return 'next state';\\r\\n}\\n\"}]}],\"\\n\"]}],[\"$r\",\"Recipes\",null,{\"titleText\":\"提交表单后展示信息\",\"titleId\":\"display-information-after-submitting-a-form\",\"children\":[[\"$r\",\"h4\",null,{\"id\":\"display-form-errors\",\"children\":\"展示表单错误 \"}],[\"$r\",\"p\",null,{\"children\":[\"将 action 包裹进 \",[\"$r\",\"code\",null,{\"children\":\"useFormState\"}],\" 即可展示诸如错误信息或 Server Action 返回的 toast 等信息。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from \\\"react\\\";\\r\\nimport { useFormState } from \\\"react-dom\\\";\\r\\nimport { addToCart } from \\\"./actions.js\\\";\\r\\n\\r\\nfunction AddToCartForm({itemID, itemTitle}) {\\r\\n  const [message, formAction] = useFormState(addToCart, null);\\r\\n  return (\\r\\n    <form action={formAction}>\\r\\n      <h2>{itemTitle}</h2>\\r\\n      <input type=\\\"hidden\\\" name=\\\"itemID\\\" value={itemID} />\\r\\n      <button type=\\\"submit\\\">加入购物车</button>\\r\\n      {message}\\r\\n    </form>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default function App() {\\r\\n  return (\\r\\n    <>\\r\\n      <AddToCartForm itemID=\\\"1\\\" itemTitle=\\\"JavaScript：权威指南\\\" />\\r\\n      <AddToCartForm itemID=\\\"2\\\" itemTitle=\\\"JavaScript：优点荟萃\\\" />\\r\\n    </>\\r\\n  )\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/actions.js\",\"children\":\"\\\"use server\\\";\\r\\n\\r\\nexport async function addToCart(prevState, queryData) {\\r\\n  const itemID = queryData.get('itemID');\\r\\n  if (itemID === \\\"1\\\") {\\r\\n    return \\\"已加入购物车\\\";\\r\\n  } else {\\r\\n    return \\\"无法加入购物车：商品已售罄\\\";\\r\\n  }\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css hidden\",\"children\":\"form {\\r\\n  border: solid 1px black;\\r\\n  margin-bottom: 24px;\\r\\n  padding: 12px\\r\\n}\\r\\n\\r\\nform button {\\r\\n  margin-right: 12px;\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"react\\\": \\\"canary\\\",\\r\\n    \\\"react-dom\\\": \\\"canary\\\",\\r\\n    \\\"react-scripts\\\": \\\"^5.0.0\\\"\\r\\n  },\\r\\n  \\\"main\\\": \\\"/index.js\\\",\\r\\n  \\\"devDependencies\\\": {}\\r\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{}],[\"$r\",\"h4\",null,{\"id\":\"display-structured-information-after-submitting-a-form\",\"children\":\"提交表单后展示结构性数据 \"}],[\"$r\",\"p\",null,{\"children\":\"Server Actions 的返回值可以为任意可序列化的值。例如，可以返回一个实例，该实例携带一个 boolean 类型的属性表示操作是否成功，同时附带错误信息或更新消息。\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from \\\"react\\\";\\r\\nimport { useFormState } from \\\"react-dom\\\";\\r\\nimport { addToCart } from \\\"./actions.js\\\";\\r\\n\\r\\nfunction AddToCartForm({itemID, itemTitle}) {\\r\\n  const [formState, formAction] = useFormState(addToCart, {});\\r\\n  return (\\r\\n    <form action={formAction}>\\r\\n      <h2>{itemTitle}</h2>\\r\\n      <input type=\\\"hidden\\\" name=\\\"itemID\\\" value={itemID} />\\r\\n      <button type=\\\"submit\\\">加入购物车</button>\\r\\n      {formState?.success &&\\r\\n        <div className=\\\"toast\\\">\\r\\n          成功加入购物车！当前购物车中共有 {formState.cartSize} 件商品。\\r\\n        </div>\\r\\n      }\\r\\n      {formState?.success === false &&\\r\\n        <div className=\\\"error\\\">\\r\\n          加入购物车失败：{formState.message}\\r\\n        </div>\\r\\n      }\\r\\n    </form>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default function App() {\\r\\n  return (\\r\\n    <>\\r\\n      <AddToCartForm itemID=\\\"1\\\" itemTitle=\\\"JavaScript：权威指南\\\" />\\r\\n      <AddToCartForm itemID=\\\"2\\\" itemTitle=\\\"JavaScript：优点荟萃\\\" />\\r\\n    </>\\r\\n  )\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/actions.js\",\"children\":\"\\\"use server\\\";\\r\\n\\r\\nexport async function addToCart(prevState, queryData) {\\r\\n  const itemID = queryData.get('itemID');\\r\\n  if (itemID === \\\"1\\\") {\\r\\n    return {\\r\\n      success: true,\\r\\n      cartSize: 12,\\r\\n    };\\r\\n  } else {\\r\\n    return {\\r\\n      success: false,\\r\\n      message: \\\"商品已售罄\\\",\\r\\n    };\\r\\n  }\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css hidden\",\"children\":\"form {\\r\\n  border: solid 1px black;\\r\\n  margin-bottom: 24px;\\r\\n  padding: 12px\\r\\n}\\r\\n\\r\\nform button {\\r\\n  margin-right: 12px;\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"react\\\": \\\"canary\\\",\\r\\n    \\\"react-dom\\\": \\\"canary\\\",\\r\\n    \\\"react-scripts\\\": \\\"^5.0.0\\\"\\r\\n  },\\r\\n  \\\"main\\\": \\\"/index.js\\\",\\r\\n  \\\"devDependencies\\\": {}\\r\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"troubleshooting\",\"children\":\"疑难解答 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"my-action-can-no-longer-read-the-submitted-form-data\",\"children\":\"我的 action 无法再获取提交的 form data 了 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当使用 \",[\"$r\",\"code\",null,{\"children\":\"useFormState\"}],\" 包裹 action 时，第一个参数变为了 form 的当前 state，提交的表单数据被顺移到了第二个参数中，与直接使用表单动作是不同的。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function action(currentState, formData) {\\r\\n  // ...\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"strong\",null,{\"children\":\"译注：\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"name\":\"note1\"}],\" [1] 这里的意思是原来的第一个参数被顺移为第二个参数，第二个参数被顺移为第三个参数，以此类推\"]}]]}]]","toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#useformstate\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"useFormState(action, initialState)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#using-information-returned-by-a-form-action\",\"depth\":3,\"text\":\"使用某个表单动作返回的信息 \"},{\"url\":\"#troubleshooting\",\"depth\":2,\"text\":\"疑难解答 \"},{\"url\":\"#my-action-can-no-longer-read-the-submitted-form-data\",\"depth\":3,\"text\":\"我的 action 无法再获取提交的 form data 了 \"}]","meta":{"title":"useFormState","canary":true}},"__N_SSG":true}