{"pageProps":{"content":"[[\"$r\",\"MaxWidth\",\"68\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useTransition\"}],\" 是一个帮助你在不阻塞 UI 的情况下更新状态的 React Hook。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const [isPending, startTransition] = useTransition()\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"usetransition\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useTransition()\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在组件顶层调用 \",[\"$r\",\"code\",null,{\"children\":\"useTransition\"}],\"，将某些状态更新标记为 transition。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useTransition } from 'react';\\r\\n\\r\\nfunction TabContainer() {\\r\\n  const [isPending, startTransition] = useTransition();\\r\\n  // ……\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"参见下方更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useTransition\"}],\" 不需要任何参数。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useTransition\"}],\" 返回一个由两个元素组成的数组：\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"isPending\"}],\"，告诉你是否存在待处理的 transition。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#starttransition\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"startTransition\"}],\" 函数\"]}],\"，你可以使用此方法将状态更新标记为 transition。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"starttransition\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"startTransition\"}],\" 函数 \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useTransition\"}],\" 返回的 \",[\"$r\",\"code\",null,{\"children\":\"startTransition\"}],\" 函数允许你将状态更新标记为 transition。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6,8}\",\"children\":\"function TabContainer() {\\r\\n  const [isPending, startTransition] = useTransition();\\r\\n  const [tab, setTab] = useState('about');\\r\\n\\r\\n  function selectTab(nextTab) {\\r\\n    startTransition(() => {\\r\\n      setTab(nextTab);\\r\\n    });\\r\\n  }\\r\\n  // ……\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"starttransition-parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"作用域（scope）：一个通过调用一个或多个 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState#setstate\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"set\"}],\" 函数\"]}],\" 更新状态的函数。React 会立即不带参数地调用此函数，并将在 \",[\"$r\",\"code\",null,{\"children\":\"scope\"}],\" 调用期间将所有同步安排的状态更新标记为 transition。它们将是非阻塞的，并且 \",[\"$r\",\"a\",null,{\"href\":\"#preventing-unwanted-loading-indicators\",\"children\":\"不会显示不想要的加载指示器\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"starttransition-returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"startTransition\"}],\" 不返回任何值。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"starttransition-caveats\",\"children\":\"注意 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useTransition\"}],\" 是一个 Hook，因此只能在组件或自定义 Hook 内部调用。如果需要在其他地方启动 transition（例如从数据库），请调用独立的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/startTransition\",\"children\":[\"$r\",\"code\",null,{\"children\":\"startTransition\"}]}],\" 函数。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"只有在可以访问该状态的 \",[\"$r\",\"code\",null,{\"children\":\"set\"}],\" 函数时，才能将其对应的状态更新包装为 transition。如果你想启用 transition 以响应某个 prop 或自定义 Hook 值，请尝试使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useDeferredValue\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}]}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"传递给 \",[\"$r\",\"code\",null,{\"children\":\"startTransition\"}],\" 的函数必须是同步的。React 会立即执行此函数，并将在其执行期间发生的所有状态更新标记为 transition。如果在其执行期间，尝试稍后执行状态更新（例如在一个定时器中执行状态更新），这些状态更新不会被标记为 transition。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"标记为 transition 的状态更新将被其他状态更新打断。例如在 transition 中更新图表组件，并在图表组件仍在重新渲染时继续在输入框中输入，React 将首先处理输入框的更新，之后再重新启动对图表组件的渲染工作。\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"transition 更新不能用于控制文本输入。\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"目前，React 会批处理多个同时进行的 transition。这是一个限制，可能会在未来版本中删除。\"}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"marking-a-state-update-as-a-non-blocking-transition\",\"children\":\"将状态更新标记为非阻塞的 transition \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在组件的顶层调用 \",[\"$r\",\"code\",null,{\"children\":\"useTransition\"}],\" 以将状态更新标记为非阻塞的 transition。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 4, \\\"isPending\\\"], [2, 4, \\\"startTransition\\\"]]\",\"children\":\"import { useState, useTransition } from 'react';\\r\\n\\r\\nfunction TabContainer() {\\r\\n  const [isPending, startTransition] = useTransition();\\r\\n  // ……\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useTransition\"}],\" 返回一个由两个元素组成的数组：\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":[\"$r\",\"code\",null,{\"children\":\"isPending\"}]}],\"，告诉你是否存在待处理的 transition。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":[[\"$r\",\"code\",null,{\"children\":\"startTransition\"}],\" 函数\"]}],\"，你可以使用此方法将状态更新标记为 transition。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你可以按照以下方式将状态更新标记为 transition：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6,8}\",\"children\":\"function TabContainer() {\\r\\n  const [isPending, startTransition] = useTransition();\\r\\n  const [tab, setTab] = useState('about');\\r\\n\\r\\n  function selectTab(nextTab) {\\r\\n    startTransition(() => {\\r\\n      setTab(nextTab);\\r\\n    });\\r\\n  }\\r\\n  // ……\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"transition 可以使用户界面的更新在慢速设备上仍保持响应性。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"通过 transition，UI 仍将在重新渲染过程中保持响应性。例如用户点击一个选项卡，但改变了主意并点击另一个选项卡，他们可以在不等待第一个重新渲染完成的情况下完成操作。\"}],\"\\n\"]}],[\"$r\",\"Recipes\",null,{\"titleText\":\"使用 useTransition 与常规状态更新的区别\",\"titleId\":\"examples\",\"children\":[[\"$r\",\"h4\",null,{\"id\":\"updating-the-current-tab-in-a-transition\",\"children\":\"在 transition 中更新当前选项卡 \"}],[\"$r\",\"p\",null,{\"children\":[\"在此示例中，“文章”选项卡被 \",[\"$r\",\"strong\",null,{\"children\":\"人为地减慢\"}],\"，以便至少需要一秒钟才能渲染。\"]}],[\"$r\",\"p\",null,{\"children\":\"点击“Posts”，然后立即点击“Contact”。请注意，这会中断“Posts”的缓慢渲染，而“联系人”选项卡将会立即显示。因为此状态更新被标记为 transition，所以缓慢的重新渲染不会冻结用户界面。\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useTransition } from 'react';\\r\\nimport TabButton from './TabButton.js';\\r\\nimport AboutTab from './AboutTab.js';\\r\\nimport PostsTab from './PostsTab.js';\\r\\nimport ContactTab from './ContactTab.js';\\r\\n\\r\\nexport default function TabContainer() {\\r\\n  const [isPending, startTransition] = useTransition();\\r\\n  const [tab, setTab] = useState('about');\\r\\n\\r\\n  function selectTab(nextTab) {\\r\\n    startTransition(() => {\\r\\n      setTab(nextTab);\\r\\n    });\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <TabButton\\r\\n        isActive={tab === 'about'}\\r\\n        onClick={() => selectTab('about')}\\r\\n      >\\r\\n        About\\r\\n      </TabButton>\\r\\n      <TabButton\\r\\n        isActive={tab === 'posts'}\\r\\n        onClick={() => selectTab('posts')}\\r\\n      >\\r\\n        Posts (slow)\\r\\n      </TabButton>\\r\\n      <TabButton\\r\\n        isActive={tab === 'contact'}\\r\\n        onClick={() => selectTab('contact')}\\r\\n      >\\r\\n        Contact\\r\\n      </TabButton>\\r\\n      <hr />\\r\\n      {tab === 'about' && <AboutTab />}\\r\\n      {tab === 'posts' && <PostsTab />}\\r\\n      {tab === 'contact' && <ContactTab />}\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TabButton.js\",\"children\":\"import { useTransition } from 'react';\\r\\n\\r\\nexport default function TabButton({ children, isActive, onClick }) {\\r\\n  if (isActive) {\\r\\n    return <b>{children}</b>\\r\\n  }\\r\\n  return (\\r\\n    <button onClick={() => {\\r\\n      onClick();\\r\\n    }}>\\r\\n      {children}\\r\\n    </button>\\r\\n  )\\r\\n}\\r\\n\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AboutTab.js\",\"children\":\"export default function AboutTab() {\\r\\n  return (\\r\\n    <p>Welcome to my profile!</p>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/PostsTab.js\",\"children\":\"import { memo } from 'react';\\r\\n\\r\\nconst PostsTab = memo(function PostsTab() {\\r\\n  // 打印一次。真正变慢的地方在 SlowPost 内。\\r\\n  console.log('[ARTIFICIALLY SLOW] Rendering 500 <SlowPost />');\\r\\n\\r\\n  let items = [];\\r\\n  for (let i = 0; i < 500; i++) {\\r\\n    items.push(<SlowPost key={i} index={i} />);\\r\\n  }\\r\\n  return (\\r\\n    <ul className=\\\"items\\\">\\r\\n      {items}\\r\\n    </ul>\\r\\n  );\\r\\n});\\r\\n\\r\\nfunction SlowPost({ index }) {\\r\\n  let startTime = performance.now();\\r\\n  while (performance.now() - startTime < 1) {\\r\\n    // 每个 item 都等待 1 毫秒以模拟极慢的代码。\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <li className=\\\"item\\\">\\r\\n      Post #{index + 1}\\r\\n    </li>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default PostsTab;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ContactTab.js\",\"children\":\"export default function ContactTab() {\\r\\n  return (\\r\\n    <>\\r\\n      <p>\\r\\n        You can find me online here:\\r\\n      </p>\\r\\n      <ul>\\r\\n        <li>admin@mysite.com</li>\\r\\n        <li>+123456789</li>\\r\\n      </ul>\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-right: 10px }\\r\\nb { display: inline-block; margin-right: 10px; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{}],[\"$r\",\"h4\",null,{\"id\":\"updating-the-current-tab-without-a-transition\",\"children\":\"在不使用 transition 的情况下更新当前选项卡 \"}],[\"$r\",\"p\",null,{\"children\":[\"在此示例中，“Posts”选项卡同样被 \",[\"$r\",\"strong\",null,{\"children\":\"人为地减慢\"}],\"，以便至少需要一秒钟才能渲染。与之前的示例不同，这个状态更新 \",[\"$r\",\"strong\",null,{\"children\":\"没有使用 transition\"}],\"。\"]}],[\"$r\",\"p\",null,{\"children\":[\"点击“Posts”，然后立即点击“Contact”。请注意，应用程序在渲染减速选项卡时会冻结，UI 将变得无响应。由于这个状态更新 \",[\"$r\",\"strong\",null,{\"children\":\"没有使用 transition\"}],\"，所以慢速的重新渲染会冻结用户界面。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\nimport TabButton from './TabButton.js';\\r\\nimport AboutTab from './AboutTab.js';\\r\\nimport PostsTab from './PostsTab.js';\\r\\nimport ContactTab from './ContactTab.js';\\r\\n\\r\\nexport default function TabContainer() {\\r\\n  const [tab, setTab] = useState('about');\\r\\n\\r\\n  function selectTab(nextTab) {\\r\\n    setTab(nextTab);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <TabButton\\r\\n        isActive={tab === 'about'}\\r\\n        onClick={() => selectTab('about')}\\r\\n      >\\r\\n        About\\r\\n      </TabButton>\\r\\n      <TabButton\\r\\n        isActive={tab === 'posts'}\\r\\n        onClick={() => selectTab('posts')}\\r\\n      >\\r\\n        Posts (slow)\\r\\n      </TabButton>\\r\\n      <TabButton\\r\\n        isActive={tab === 'contact'}\\r\\n        onClick={() => selectTab('contact')}\\r\\n      >\\r\\n        Contact\\r\\n      </TabButton>\\r\\n      <hr />\\r\\n      {tab === 'about' && <AboutTab />}\\r\\n      {tab === 'posts' && <PostsTab />}\\r\\n      {tab === 'contact' && <ContactTab />}\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TabButton.js\",\"children\":\"import { useTransition } from 'react';\\r\\n\\r\\nexport default function TabButton({ children, isActive, onClick }) {\\r\\n  if (isActive) {\\r\\n    return <b>{children}</b>\\r\\n  }\\r\\n  return (\\r\\n    <button onClick={() => {\\r\\n      onClick();\\r\\n    }}>\\r\\n      {children}\\r\\n    </button>\\r\\n  )\\r\\n}\\r\\n\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AboutTab.js\",\"children\":\"export default function AboutTab() {\\r\\n  return (\\r\\n    <p>Welcome to my profile!</p>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/PostsTab.js\",\"children\":\"import { memo } from 'react';\\r\\n\\r\\nconst PostsTab = memo(function PostsTab() {\\r\\n  // 打印一次。真正变慢的地方在 SlowPost 内。\\r\\n  console.log('[ARTIFICIALLY SLOW] Rendering 500 <SlowPost />');\\r\\n\\r\\n  let items = [];\\r\\n  for (let i = 0; i < 500; i++) {\\r\\n    items.push(<SlowPost key={i} index={i} />);\\r\\n  }\\r\\n  return (\\r\\n    <ul className=\\\"items\\\">\\r\\n      {items}\\r\\n    </ul>\\r\\n  );\\r\\n});\\r\\n\\r\\nfunction SlowPost({ index }) {\\r\\n  let startTime = performance.now();\\r\\n  while (performance.now() - startTime < 1) {\\r\\n    // 每个 item 都等待 1 毫秒以模拟极慢的代码。\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <li className=\\\"item\\\">\\r\\n      Post #{index + 1}\\r\\n    </li>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default PostsTab;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ContactTab.js\",\"children\":\"export default function ContactTab() {\\r\\n  return (\\r\\n    <>\\r\\n      <p>\\r\\n        You can find me online here:\\r\\n      </p>\\r\\n      <ul>\\r\\n        <li>admin@mysite.com</li>\\r\\n        <li>+123456789</li>\\r\\n      </ul>\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-right: 10px }\\r\\nb { display: inline-block; margin-right: 10px; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{}]]}],[\"$r\",\"MaxWidth\",\"80\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"updating-the-parent-component-in-a-transition\",\"children\":\"在 transition 中更新父组件 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你也可以通过调用 \",[\"$r\",\"code\",null,{\"children\":\"useTransition\"}],\" 以更新父组件状态。例如，\",[\"$r\",\"code\",null,{\"children\":\"TabButton\"}],\" 组件在 transition 中包装了 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 逻辑：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{8-10}\",\"children\":\"export default function TabButton({ children, isActive, onClick }) {\\r\\n  const [isPending, startTransition] = useTransition();\\r\\n  if (isActive) {\\r\\n    return <b>{children}</b>\\r\\n  }\\r\\n  return (\\r\\n    <button onClick={() => {\\r\\n      startTransition(() => {\\r\\n        onClick();\\r\\n      });\\r\\n    }}>\\r\\n      {children}\\r\\n    </button>\\r\\n  );\\r\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"由于父组件的状态更新在 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 事件处理程序内，所以该状态更新会被标记为 transition。这就是为什么可以在点击“Posts”后立即点击“Contact”。由于更新选定选项卡被标记为了 transition，因此它不会阻止用户交互。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\nimport TabButton from './TabButton.js';\\r\\nimport AboutTab from './AboutTab.js';\\r\\nimport PostsTab from './PostsTab.js';\\r\\nimport ContactTab from './ContactTab.js';\\r\\n\\r\\nexport default function TabContainer() {\\r\\n  const [tab, setTab] = useState('about');\\r\\n  return (\\r\\n    <>\\r\\n      <TabButton\\r\\n        isActive={tab === 'about'}\\r\\n        onClick={() => setTab('about')}\\r\\n      >\\r\\n        About\\r\\n      </TabButton>\\r\\n      <TabButton\\r\\n        isActive={tab === 'posts'}\\r\\n        onClick={() => setTab('posts')}\\r\\n      >\\r\\n        Posts (slow)\\r\\n      </TabButton>\\r\\n      <TabButton\\r\\n        isActive={tab === 'contact'}\\r\\n        onClick={() => setTab('contact')}\\r\\n      >\\r\\n        Contact\\r\\n      </TabButton>\\r\\n      <hr />\\r\\n      {tab === 'about' && <AboutTab />}\\r\\n      {tab === 'posts' && <PostsTab />}\\r\\n      {tab === 'contact' && <ContactTab />}\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TabButton.js active\",\"children\":\"import { useTransition } from 'react';\\r\\n\\r\\nexport default function TabButton({ children, isActive, onClick }) {\\r\\n  const [isPending, startTransition] = useTransition();\\r\\n  if (isActive) {\\r\\n    return <b>{children}</b>\\r\\n  }\\r\\n  return (\\r\\n    <button onClick={() => {\\r\\n      startTransition(() => {\\r\\n        onClick();\\r\\n      });\\r\\n    }}>\\r\\n      {children}\\r\\n    </button>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AboutTab.js\",\"children\":\"export default function AboutTab() {\\r\\n  return (\\r\\n    <p>Welcome to my profile!</p>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/PostsTab.js\",\"children\":\"import { memo } from 'react';\\r\\n\\r\\nconst PostsTab = memo(function PostsTab() {\\r\\n  // 打印一次。真正变慢的地方在 SlowPost 内。\\r\\n  console.log('[ARTIFICIALLY SLOW] Rendering 500 <SlowPost />');\\r\\n\\r\\n  let items = [];\\r\\n  for (let i = 0; i < 500; i++) {\\r\\n    items.push(<SlowPost key={i} index={i} />);\\r\\n  }\\r\\n  return (\\r\\n    <ul className=\\\"items\\\">\\r\\n      {items}\\r\\n    </ul>\\r\\n  );\\r\\n});\\r\\n\\r\\nfunction SlowPost({ index }) {\\r\\n  let startTime = performance.now();\\r\\n  while (performance.now() - startTime < 1) {\\r\\n    // 每个 item 都等待 1 毫秒以模拟极慢的代码。\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <li className=\\\"item\\\">\\r\\n      Post #{index + 1}\\r\\n    </li>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default PostsTab;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ContactTab.js\",\"children\":\"export default function ContactTab() {\\r\\n  return (\\r\\n    <>\\r\\n      <p>\\r\\n        You can find me online here:\\r\\n      </p>\\r\\n      <ul>\\r\\n        <li>admin@mysite.com</li>\\r\\n        <li>+123456789</li>\\r\\n      </ul>\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-right: 10px }\\r\\nb { display: inline-block; margin-right: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"92\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"displaying-a-pending-visual-state-during-the-transition\",\"children\":\"在 transition 期间显示待处理的视觉状态 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以使用 \",[\"$r\",\"code\",null,{\"children\":\"useTransition\"}],\" 返回的 \",[\"$r\",\"code\",null,{\"children\":\"isPending\"}],\" 布尔值来向用户表明当前处于 transition 中。例如，选项卡按钮可以有一个特殊的“pending”视觉状态：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4-6}\",\"children\":\"function TabButton({ children, isActive, onClick }) {\\r\\n  const [isPending, startTransition] = useTransition();\\r\\n  // ...\\r\\n  if (isPending) {\\r\\n    return <b className=\\\"pending\\\">{children}</b>;\\r\\n  }\\r\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"请注意，现在点击“Posts”感觉更加灵敏，因为选项卡按钮本身立即更新了：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\r\\nimport TabButton from './TabButton.js';\\r\\nimport AboutTab from './AboutTab.js';\\r\\nimport PostsTab from './PostsTab.js';\\r\\nimport ContactTab from './ContactTab.js';\\r\\n\\r\\nexport default function TabContainer() {\\r\\n  const [tab, setTab] = useState('about');\\r\\n  return (\\r\\n    <>\\r\\n      <TabButton\\r\\n        isActive={tab === 'about'}\\r\\n        onClick={() => setTab('about')}\\r\\n      >\\r\\n        About\\r\\n      </TabButton>\\r\\n      <TabButton\\r\\n        isActive={tab === 'posts'}\\r\\n        onClick={() => setTab('posts')}\\r\\n      >\\r\\n        Posts (slow)\\r\\n      </TabButton>\\r\\n      <TabButton\\r\\n        isActive={tab === 'contact'}\\r\\n        onClick={() => setTab('contact')}\\r\\n      >\\r\\n        Contact\\r\\n      </TabButton>\\r\\n      <hr />\\r\\n      {tab === 'about' && <AboutTab />}\\r\\n      {tab === 'posts' && <PostsTab />}\\r\\n      {tab === 'contact' && <ContactTab />}\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TabButton.js active\",\"children\":\"import { useTransition } from 'react';\\r\\n\\r\\nexport default function TabButton({ children, isActive, onClick }) {\\r\\n  const [isPending, startTransition] = useTransition();\\r\\n  if (isActive) {\\r\\n    return <b>{children}</b>\\r\\n  }\\r\\n  if (isPending) {\\r\\n    return <b className=\\\"pending\\\">{children}</b>;\\r\\n  }\\r\\n  return (\\r\\n    <button onClick={() => {\\r\\n      startTransition(() => {\\r\\n        onClick();\\r\\n      });\\r\\n    }}>\\r\\n      {children}\\r\\n    </button>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AboutTab.js\",\"children\":\"export default function AboutTab() {\\r\\n  return (\\r\\n    <p>Welcome to my profile!</p>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/PostsTab.js\",\"children\":\"import { memo } from 'react';\\r\\n\\r\\nconst PostsTab = memo(function PostsTab() {\\r\\n  // 打印一次。真正变慢的地方在 SlowPost 内。\\r\\n  console.log('[ARTIFICIALLY SLOW] Rendering 500 <SlowPost />');\\r\\n\\r\\n  let items = [];\\r\\n  for (let i = 0; i < 500; i++) {\\r\\n    items.push(<SlowPost key={i} index={i} />);\\r\\n  }\\r\\n  return (\\r\\n    <ul className=\\\"items\\\">\\r\\n      {items}\\r\\n    </ul>\\r\\n  );\\r\\n});\\r\\n\\r\\nfunction SlowPost({ index }) {\\r\\n  let startTime = performance.now();\\r\\n  while (performance.now() - startTime < 1) {\\r\\n    // 每个 item 都等待 1 毫秒以模拟极慢的代码。\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <li className=\\\"item\\\">\\r\\n      Post #{index + 1}\\r\\n    </li>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default PostsTab;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ContactTab.js\",\"children\":\"export default function ContactTab() {\\r\\n  return (\\r\\n    <>\\r\\n      <p>\\r\\n        You can find me online here:\\r\\n      </p>\\r\\n      <ul>\\r\\n        <li>admin@mysite.com</li>\\r\\n        <li>+123456789</li>\\r\\n      </ul>\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-right: 10px }\\r\\nb { display: inline-block; margin-right: 10px; }\\r\\n.pending { color: #777; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"100\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"preventing-unwanted-loading-indicators\",\"children\":\"避免不必要的加载指示器 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，\",[\"$r\",\"code\",null,{\"children\":\"PostsTab\"}],\" 组件从启用了 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense\",\"children\":\"Suspense\"}],\" 的数据源中获取了一些数据。当你点击“Posts”选项卡时，\",[\"$r\",\"code\",null,{\"children\":\"PostsTab\"}],\" 组件将 \",[\"$r\",\"strong\",null,{\"children\":\"挂起\"}],\"，导致最近的加载中的后备方案出现：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { Suspense, useState } from 'react';\\r\\nimport TabButton from './TabButton.js';\\r\\nimport AboutTab from './AboutTab.js';\\r\\nimport PostsTab from './PostsTab.js';\\r\\nimport ContactTab from './ContactTab.js';\\r\\n\\r\\nexport default function TabContainer() {\\r\\n  const [tab, setTab] = useState('about');\\r\\n  return (\\r\\n    <Suspense fallback={<h1>🌀 Loading...</h1>}>\\r\\n      <TabButton\\r\\n        isActive={tab === 'about'}\\r\\n        onClick={() => setTab('about')}\\r\\n      >\\r\\n        About\\r\\n      </TabButton>\\r\\n      <TabButton\\r\\n        isActive={tab === 'posts'}\\r\\n        onClick={() => setTab('posts')}\\r\\n      >\\r\\n        Posts\\r\\n      </TabButton>\\r\\n      <TabButton\\r\\n        isActive={tab === 'contact'}\\r\\n        onClick={() => setTab('contact')}\\r\\n      >\\r\\n        Contact\\r\\n      </TabButton>\\r\\n      <hr />\\r\\n      {tab === 'about' && <AboutTab />}\\r\\n      {tab === 'posts' && <PostsTab />}\\r\\n      {tab === 'contact' && <ContactTab />}\\r\\n    </Suspense>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TabButton.js\",\"children\":\"export default function TabButton({ children, isActive, onClick }) {\\r\\n  if (isActive) {\\r\\n    return <b>{children}</b>\\r\\n  }\\r\\n  return (\\r\\n    <button onClick={() => {\\r\\n      onClick();\\r\\n    }}>\\r\\n      {children}\\r\\n    </button>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AboutTab.js hidden\",\"children\":\"export default function AboutTab() {\\r\\n  return (\\r\\n    <p>Welcome to my profile!</p>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/PostsTab.js hidden\",\"children\":\"import { fetchData } from './data.js';\\r\\n\\r\\n// 注意：此组件使用了实验性 API 编写\\r\\n// 这在 React 稳定版本中无法访问\\r\\n\\r\\n// 在实际的例子中，试试\\r\\n// 像 Relay 或 Next.js 一样集成了 Suspense 的框架。\\r\\n\\r\\nfunction PostsTab() {\\r\\n  const posts = use(fetchData('/posts'));\\r\\n  return (\\r\\n    <ul className=\\\"items\\\">\\r\\n      {posts.map(post =>\\r\\n        <Post key={post.id} title={post.title} />\\r\\n      )}\\r\\n    </ul>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction Post({ title }) {\\r\\n  return (\\r\\n    <li className=\\\"item\\\">\\r\\n      {title}\\r\\n    </li>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default PostsTab;\\r\\n\\r\\n// 这是一个解决演示运行问题的临时方法。\\r\\n// TODO: 当 bug 修复后使用真实的实现替代此处。\\r\\nfunction use(promise) {\\r\\n  if (promise.status === 'fulfilled') {\\r\\n    return promise.value;\\r\\n  } else if (promise.status === 'rejected') {\\r\\n    throw promise.reason;\\r\\n  } else if (promise.status === 'pending') {\\r\\n    throw promise;\\r\\n  } else {\\r\\n    promise.status = 'pending';\\r\\n    promise.then(\\r\\n      result => {\\r\\n        promise.status = 'fulfilled';\\r\\n        promise.value = result;\\r\\n      },\\r\\n      reason => {\\r\\n        promise.status = 'rejected';\\r\\n        promise.reason = reason;\\r\\n      },\\r\\n    );\\r\\n    throw promise;\\r\\n  }\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ContactTab.js hidden\",\"children\":\"export default function ContactTab() {\\r\\n  return (\\r\\n    <>\\r\\n      <p>\\r\\n        You can find me online here:\\r\\n      </p>\\r\\n      <ul>\\r\\n        <li>admin@mysite.com</li>\\r\\n        <li>+123456789</li>\\r\\n      </ul>\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js hidden\",\"children\":\"// 注意：数据获取的方式取决于\\r\\n// 与 Suspense 一同使用的框架\\r\\n// 通常缓存逻辑是由框架内部处理的。\\r\\n\\r\\nlet cache = new Map();\\r\\n\\r\\nexport function fetchData(url) {\\r\\n  if (!cache.has(url)) {\\r\\n    cache.set(url, getData(url));\\r\\n  }\\r\\n  return cache.get(url);\\r\\n}\\r\\n\\r\\nasync function getData(url) {\\r\\n  if (url.startsWith('/posts')) {\\r\\n    return await getPosts();\\r\\n  } else {\\r\\n    throw Error('Not implemented');\\r\\n  }\\r\\n}\\r\\n\\r\\nasync function getPosts() {\\r\\n  // Add a fake delay to make waiting noticeable.\\r\\n  await new Promise(resolve => {\\r\\n    setTimeout(resolve, 1000);\\r\\n  });\\r\\n  let posts = [];\\r\\n  for (let i = 0; i < 500; i++) {\\r\\n    posts.push({\\r\\n      id: i,\\r\\n      title: 'Post #' + (i + 1)\\r\\n    });\\r\\n  }\\r\\n  return posts;\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-right: 10px }\\r\\nb { display: inline-block; margin-right: 10px; }\\r\\n.pending { color: #777; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"106\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"隐藏整个选项卡容器以显示加载指示符会导致用户体验不连贯。如果你将 \",[\"$r\",\"code\",null,{\"children\":\"useTransition\"}],\" 添加到 \",[\"$r\",\"code\",null,{\"children\":\"TabButton\"}],\" 中，你可以改为在选项卡按钮中指示待处理状态。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"请注意，现在点击“帖子”不再用一个旋转器替换整个选项卡容器：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { Suspense, useState } from 'react';\\r\\nimport TabButton from './TabButton.js';\\r\\nimport AboutTab from './AboutTab.js';\\r\\nimport PostsTab from './PostsTab.js';\\r\\nimport ContactTab from './ContactTab.js';\\r\\n\\r\\nexport default function TabContainer() {\\r\\n  const [tab, setTab] = useState('about');\\r\\n  return (\\r\\n    <Suspense fallback={<h1>🌀 Loading...</h1>}>\\r\\n      <TabButton\\r\\n        isActive={tab === 'about'}\\r\\n        onClick={() => setTab('about')}\\r\\n      >\\r\\n        About\\r\\n      </TabButton>\\r\\n      <TabButton\\r\\n        isActive={tab === 'posts'}\\r\\n        onClick={() => setTab('posts')}\\r\\n      >\\r\\n        Posts\\r\\n      </TabButton>\\r\\n      <TabButton\\r\\n        isActive={tab === 'contact'}\\r\\n        onClick={() => setTab('contact')}\\r\\n      >\\r\\n        Contact\\r\\n      </TabButton>\\r\\n      <hr />\\r\\n      {tab === 'about' && <AboutTab />}\\r\\n      {tab === 'posts' && <PostsTab />}\\r\\n      {tab === 'contact' && <ContactTab />}\\r\\n    </Suspense>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TabButton.js active\",\"children\":\"import { useTransition } from 'react';\\r\\n\\r\\nexport default function TabButton({ children, isActive, onClick }) {\\r\\n  const [isPending, startTransition] = useTransition();\\r\\n  if (isActive) {\\r\\n    return <b>{children}</b>\\r\\n  }\\r\\n  if (isPending) {\\r\\n    return <b className=\\\"pending\\\">{children}</b>;\\r\\n  }\\r\\n  return (\\r\\n    <button onClick={() => {\\r\\n      startTransition(() => {\\r\\n        onClick();\\r\\n      });\\r\\n    }}>\\r\\n      {children}\\r\\n    </button>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AboutTab.js hidden\",\"children\":\"export default function AboutTab() {\\r\\n  return (\\r\\n    <p>Welcome to my profile!</p>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/PostsTab.js hidden\",\"children\":\"import { fetchData } from './data.js';\\r\\n\\r\\n// 注意：此组件使用了实验性 API 编写\\r\\n// 这在 React 稳定版本中无法访问\\r\\n\\r\\n// 在实际的例子中，试试\\r\\n// 像 Relay 或 Next.js 一样集成了 Suspense 的框架。\\r\\n\\r\\nfunction PostsTab() {\\r\\n  const posts = use(fetchData('/posts'));\\r\\n  return (\\r\\n    <ul className=\\\"items\\\">\\r\\n      {posts.map(post =>\\r\\n        <Post key={post.id} title={post.title} />\\r\\n      )}\\r\\n    </ul>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction Post({ title }) {\\r\\n  return (\\r\\n    <li className=\\\"item\\\">\\r\\n      {title}\\r\\n    </li>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default PostsTab;\\r\\n\\r\\n// 这是一个解决演示运行问题的临时方法。\\r\\n// TODO: 当 bug 修复后使用真实的实现替代此处。\\r\\nfunction use(promise) {\\r\\n  if (promise.status === 'fulfilled') {\\r\\n    return promise.value;\\r\\n  } else if (promise.status === 'rejected') {\\r\\n    throw promise.reason;\\r\\n  } else if (promise.status === 'pending') {\\r\\n    throw promise;\\r\\n  } else {\\r\\n    promise.status = 'pending';\\r\\n    promise.then(\\r\\n      result => {\\r\\n        promise.status = 'fulfilled';\\r\\n        promise.value = result;\\r\\n      },\\r\\n      reason => {\\r\\n        promise.status = 'rejected';\\r\\n        promise.reason = reason;\\r\\n      },\\r\\n    );\\r\\n    throw promise;\\r\\n  }\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ContactTab.js hidden\",\"children\":\"export default function ContactTab() {\\r\\n  return (\\r\\n    <>\\r\\n      <p>\\r\\n        You can find me online here:\\r\\n      </p>\\r\\n      <ul>\\r\\n        <li>admin@mysite.com</li>\\r\\n        <li>+123456789</li>\\r\\n      </ul>\\r\\n    </>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js hidden\",\"children\":\"// 注意：数据获取的方式取决于\\r\\n// 取决于与 Suspense 一同使用的框架\\r\\n// 通常，缓存逻辑会嵌入在框架内部。\\r\\n\\r\\nlet cache = new Map();\\r\\n\\r\\nexport function fetchData(url) {\\r\\n  if (!cache.has(url)) {\\r\\n    cache.set(url, getData(url));\\r\\n  }\\r\\n  return cache.get(url);\\r\\n}\\r\\n\\r\\nasync function getData(url) {\\r\\n  if (url.startsWith('/posts')) {\\r\\n    return await getPosts();\\r\\n  } else {\\r\\n    throw Error('Not implemented');\\r\\n  }\\r\\n}\\r\\n\\r\\nasync function getPosts() {\\r\\n  // Add a fake delay to make waiting noticeable.\\r\\n  await new Promise(resolve => {\\r\\n    setTimeout(resolve, 1000);\\r\\n  });\\r\\n  let posts = [];\\r\\n  for (let i = 0; i < 500; i++) {\\r\\n    posts.push({\\r\\n      id: i,\\r\\n      title: 'Post #' + (i + 1)\\r\\n    });\\r\\n  }\\r\\n  return posts;\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-right: 10px }\\r\\nb { display: inline-block; margin-right: 10px; }\\r\\n.pending { color: #777; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"126\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense#preventing-already-revealed-content-from-hiding\",\"children\":\"了解有关在Suspense中使用转换的更多信息\"}],\"。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"转换效果只会“等待”足够长的时间来避免隐藏 \",[\"$r\",\"strong\",null,{\"children\":\"已经显示\"}],\" 的内容（例如选项卡容器）。如果“帖子”选项卡具有一个\",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense#revealing-nested-content-as-it-loads\",\"children\":[\"嵌套 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 边界\"]}],\"，转换效果将不会“等待”它。\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"building-a-suspense-enabled-router\",\"children\":\"构建一个Suspense-enabled 的路由 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你正在构建一个 React 框架或路由，我们建议将页面导航标记为转换效果。\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,6,8}\",\"children\":\"function Router() {\\r\\n  const [page, setPage] = useState('/');\\r\\n  const [isPending, startTransition] = useTransition();\\r\\n\\r\\n  function navigate(url) {\\r\\n    startTransition(() => {\\r\\n      setPage(url);\\r\\n    });\\r\\n  }\\r\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这么做有两个好处：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#marking-a-state-update-as-a-non-blocking-transition\",\"children\":\"转换效果是可中断的\"}],\"，这样用户可以在等待重新渲染完成之前点击其他地方。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#preventing-unwanted-loading-indicators\",\"children\":\"转换效果可以防止不必要的加载指示符\"}],\"，这样用户就可以避免在导航时产生不协调的跳转。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"下面是一个简单的使用转换效果进行页面导航的路由器示例：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"react\\\": \\\"experimental\\\",\\r\\n    \\\"react-dom\\\": \\\"experimental\\\"\\r\\n  },\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"start\\\": \\\"react-scripts start\\\",\\r\\n    \\\"build\\\": \\\"react-scripts build\\\",\\r\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\r\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\r\\n  }\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { Suspense, useState, useTransition } from 'react';\\r\\nimport IndexPage from './IndexPage.js';\\r\\nimport ArtistPage from './ArtistPage.js';\\r\\nimport Layout from './Layout.js';\\r\\n\\r\\nexport default function App() {\\r\\n  return (\\r\\n    <Suspense fallback={<BigSpinner />}>\\r\\n      <Router />\\r\\n    </Suspense>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction Router() {\\r\\n  const [page, setPage] = useState('/');\\r\\n  const [isPending, startTransition] = useTransition();\\r\\n\\r\\n  function navigate(url) {\\r\\n    startTransition(() => {\\r\\n      setPage(url);\\r\\n    });\\r\\n  }\\r\\n\\r\\n  let content;\\r\\n  if (page === '/') {\\r\\n    content = (\\r\\n      <IndexPage navigate={navigate} />\\r\\n    );\\r\\n  } else if (page === '/the-beatles') {\\r\\n    content = (\\r\\n      <ArtistPage\\r\\n        artist={{\\r\\n          id: 'the-beatles',\\r\\n          name: 'The Beatles',\\r\\n        }}\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n  return (\\r\\n    <Layout isPending={isPending}>\\r\\n      {content}\\r\\n    </Layout>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction BigSpinner() {\\r\\n  return <h2>🌀 Loading...</h2>;\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Layout.js\",\"children\":\"export default function Layout({ children, isPending }) {\\r\\n  return (\\r\\n    <div className=\\\"layout\\\">\\r\\n      <section className=\\\"header\\\" style={{\\r\\n        opacity: isPending ? 0.7 : 1\\r\\n      }}>\\r\\n        Music Browser\\r\\n      </section>\\r\\n      <main>\\r\\n        {children}\\r\\n      </main>\\r\\n    </div>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/IndexPage.js\",\"children\":\"export default function IndexPage({ navigate }) {\\r\\n  return (\\r\\n    <button onClick={() => navigate('/the-beatles')}>\\r\\n      Open The Beatles artist page\\r\\n    </button>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ArtistPage.js\",\"children\":\"import { Suspense } from 'react';\\r\\nimport Albums from './Albums.js';\\r\\nimport Biography from './Biography.js';\\r\\nimport Panel from './Panel.js';\\r\\n\\r\\nexport default function ArtistPage({ artist }) {\\r\\n  return (\\r\\n    <>\\r\\n      <h1>{artist.name}</h1>\\r\\n      <Biography artistId={artist.id} />\\r\\n      <Suspense fallback={<AlbumsGlimmer />}>\\r\\n        <Panel>\\r\\n          <Albums artistId={artist.id} />\\r\\n        </Panel>\\r\\n      </Suspense>\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction AlbumsGlimmer() {\\r\\n  return (\\r\\n    <div className=\\\"glimmer-panel\\\">\\r\\n      <div className=\\\"glimmer-line\\\" />\\r\\n      <div className=\\\"glimmer-line\\\" />\\r\\n      <div className=\\\"glimmer-line\\\" />\\r\\n    </div>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Albums.js hidden\",\"children\":\"import { fetchData } from './data.js';\\r\\n\\r\\n// 注意：此组件使用了实验性 API 编写\\r\\n// 这在 React 稳定版本中无法访问\\r\\n\\r\\n// 在实际的例子中，试试\\r\\n// 像 Relay 或 Next.js 一样集成了 Suspense 的框架。\\r\\n\\r\\nexport default function Albums({ artistId }) {\\r\\n  const albums = use(fetchData(`/${artistId}/albums`));\\r\\n  return (\\r\\n    <ul>\\r\\n      {albums.map(album => (\\r\\n        <li key={album.id}>\\r\\n          {album.title} ({album.year})\\r\\n        </li>\\r\\n      ))}\\r\\n    </ul>\\r\\n  );\\r\\n}\\r\\n\\r\\n// 这是一个解决演示运行问题的临时方法。\\r\\n// TODO: 当 bug 修复后使用真实的实现替代此处。\\r\\nfunction use(promise) {\\r\\n  if (promise.status === 'fulfilled') {\\r\\n    return promise.value;\\r\\n  } else if (promise.status === 'rejected') {\\r\\n    throw promise.reason;\\r\\n  } else if (promise.status === 'pending') {\\r\\n    throw promise;\\r\\n  } else {\\r\\n    promise.status = 'pending';\\r\\n    promise.then(\\r\\n      result => {\\r\\n        promise.status = 'fulfilled';\\r\\n        promise.value = result;\\r\\n      },\\r\\n      reason => {\\r\\n        promise.status = 'rejected';\\r\\n        promise.reason = reason;\\r\\n      },\\r\\n    );\\r\\n    throw promise;\\r\\n  }\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Biography.js hidden\",\"children\":\"import { fetchData } from './data.js';\\r\\n\\r\\n// 注意：此组件使用了实验性 API 编写\\r\\n// 这在 React 稳定版本中无法访问\\r\\n\\r\\n// 在实际的例子中，试试\\r\\n// 像 Relay 或 Next.js 一样集成了 Suspense 的框架。\\r\\n\\r\\nexport default function Biography({ artistId }) {\\r\\n  const bio = use(fetchData(`/${artistId}/bio`));\\r\\n  return (\\r\\n    <section>\\r\\n      <p className=\\\"bio\\\">{bio}</p>\\r\\n    </section>\\r\\n  );\\r\\n}\\r\\n\\r\\n// 这是一个解决演示运行问题的临时方法。\\r\\n// TODO: 当 bug 修复后使用真实的实现替代此处。\\r\\nfunction use(promise) {\\r\\n  if (promise.status === 'fulfilled') {\\r\\n    return promise.value;\\r\\n  } else if (promise.status === 'rejected') {\\r\\n    throw promise.reason;\\r\\n  } else if (promise.status === 'pending') {\\r\\n    throw promise;\\r\\n  } else {\\r\\n    promise.status = 'pending';\\r\\n    promise.then(\\r\\n      result => {\\r\\n        promise.status = 'fulfilled';\\r\\n        promise.value = result;\\r\\n      },\\r\\n      reason => {\\r\\n        promise.status = 'rejected';\\r\\n        promise.reason = reason;\\r\\n      },\\r\\n    );\\r\\n    throw promise;\\r\\n  }\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Panel.js hidden\",\"children\":\"export default function Panel({ children }) {\\r\\n  return (\\r\\n    <section className=\\\"panel\\\">\\r\\n      {children}\\r\\n    </section>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js hidden\",\"children\":\"// 注意：数据获取的方式取决于\\r\\n// 取决于与 Suspense 一同使用的框架\\r\\n// 通常缓存逻辑是由框架内部处理的。\\r\\n\\r\\nlet cache = new Map();\\r\\n\\r\\nexport function fetchData(url) {\\r\\n  if (!cache.has(url)) {\\r\\n    cache.set(url, getData(url));\\r\\n  }\\r\\n  return cache.get(url);\\r\\n}\\r\\n\\r\\nasync function getData(url) {\\r\\n  if (url === '/the-beatles/albums') {\\r\\n    return await getAlbums();\\r\\n  } else if (url === '/the-beatles/bio') {\\r\\n    return await getBio();\\r\\n  } else {\\r\\n    throw Error('Not implemented');\\r\\n  }\\r\\n}\\r\\n\\r\\nasync function getBio() {\\r\\n  // Add a fake delay to make waiting noticeable.\\r\\n  await new Promise(resolve => {\\r\\n    setTimeout(resolve, 500);\\r\\n  });\\r\\n\\r\\n  return `The Beatles were an English rock band,\\r\\n    formed in Liverpool in 1960, that comprised\\r\\n    John Lennon, Paul McCartney, George Harrison\\r\\n    and Ringo Starr.`;\\r\\n}\\r\\n\\r\\nasync function getAlbums() {\\r\\n  // Add a fake delay to make waiting noticeable.\\r\\n  await new Promise(resolve => {\\r\\n    setTimeout(resolve, 3000);\\r\\n  });\\r\\n\\r\\n  return [{\\r\\n    id: 13,\\r\\n    title: 'Let It Be',\\r\\n    year: 1970\\r\\n  }, {\\r\\n    id: 12,\\r\\n    title: 'Abbey Road',\\r\\n    year: 1969\\r\\n  }, {\\r\\n    id: 11,\\r\\n    title: 'Yellow Submarine',\\r\\n    year: 1969\\r\\n  }, {\\r\\n    id: 10,\\r\\n    title: 'The Beatles',\\r\\n    year: 1968\\r\\n  }, {\\r\\n    id: 9,\\r\\n    title: 'Magical Mystery Tour',\\r\\n    year: 1967\\r\\n  }, {\\r\\n    id: 8,\\r\\n    title: 'Sgt. Pepper\\\\'s Lonely Hearts Club Band',\\r\\n    year: 1967\\r\\n  }, {\\r\\n    id: 7,\\r\\n    title: 'Revolver',\\r\\n    year: 1966\\r\\n  }, {\\r\\n    id: 6,\\r\\n    title: 'Rubber Soul',\\r\\n    year: 1965\\r\\n  }, {\\r\\n    id: 5,\\r\\n    title: 'Help!',\\r\\n    year: 1965\\r\\n  }, {\\r\\n    id: 4,\\r\\n    title: 'Beatles For Sale',\\r\\n    year: 1964\\r\\n  }, {\\r\\n    id: 3,\\r\\n    title: 'A Hard Day\\\\'s Night',\\r\\n    year: 1964\\r\\n  }, {\\r\\n    id: 2,\\r\\n    title: 'With The Beatles',\\r\\n    year: 1963\\r\\n  }, {\\r\\n    id: 1,\\r\\n    title: 'Please Please Me',\\r\\n    year: 1963\\r\\n  }];\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"main {\\r\\n  min-height: 200px;\\r\\n  padding: 10px;\\r\\n}\\r\\n\\r\\n.layout {\\r\\n  border: 1px solid black;\\r\\n}\\r\\n\\r\\n.header {\\r\\n  background: #222;\\r\\n  padding: 10px;\\r\\n  text-align: center;\\r\\n  color: white;\\r\\n}\\r\\n\\r\\n.bio { font-style: italic; }\\r\\n\\r\\n.panel {\\r\\n  border: 1px solid #aaa;\\r\\n  border-radius: 6px;\\r\\n  margin-top: 20px;\\r\\n  padding: 10px;\\r\\n}\\r\\n\\r\\n.glimmer-panel {\\r\\n  border: 1px dashed #aaa;\\r\\n  background: linear-gradient(90deg, rgba(221,221,221,1) 0%, rgba(255,255,255,1) 100%);\\r\\n  border-radius: 6px;\\r\\n  margin-top: 20px;\\r\\n  padding: 10px;\\r\\n}\\r\\n\\r\\n.glimmer-line {\\r\\n  display: block;\\r\\n  width: 60%;\\r\\n  height: 20px;\\r\\n  margin: 10px;\\r\\n  border-radius: 4px;\\r\\n  background: #f0f0f0;\\r\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"138\",{\"children\":[\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"启用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense\",\"children\":\"Suspense\"}],\" 的路由默认情况下会将页面导航更新包装为 transition。\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"displaying-an-error-to-users-with-error-boundary\",\"children\":\"Displaying an error to users with a error boundary \"}],\"\\n\",[\"$r\",\"Canary\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"Error Boundary for useTransition is currently only available in React’s canary and experimental channels. Learn more about \",[\"$r\",\"a\",null,{\"href\":\"/community/versioning-policy#all-release-channels\",\"children\":\"React’s release channels here\"}],\".\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If a function passed to \",[\"$r\",\"code\",null,{\"children\":\"startTransition\"}],\" throws an error, you can display an error to your user with an \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#catching-rendering-errors-with-an-error-boundary\",\"children\":\"error boundary\"}],\". To use an error boundary, wrap the component where you are calling the \",[\"$r\",\"code\",null,{\"children\":\"useTransition\"}],\" in an error boundary. Once the function passed to \",[\"$r\",\"code\",null,{\"children\":\"startTransition\"}],\" errors, the fallback for the error boundary will be displayed.\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddCommentContainer.js active\",\"children\":\"import { useTransition } from \\\"react\\\";\\r\\nimport { ErrorBoundary } from \\\"react-error-boundary\\\";\\r\\n\\r\\nexport function AddCommentContainer() {\\r\\n  return (\\r\\n    <ErrorBoundary fallback={<p>⚠️Something went wrong</p>}>\\r\\n        <AddCommentButton />\\r\\n    </ErrorBoundary>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction addComment(comment) {\\r\\n  // For demonstration purposes to show Error Boundary\\r\\n  if(comment == null){\\r\\n    throw Error('Example error')\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction AddCommentButton() {\\r\\n  const [pending, startTransition] = useTransition();\\r\\n\\r\\n  return (\\r\\n    <button\\r\\n      disabled={pending}\\r\\n      onClick={() => {\\r\\n        startTransition(() => {\\r\\n          // Intentionally not passing a comment\\r\\n          // so error gets thrown\\r\\n          addComment();\\r\\n        });\\r\\n      }}>\\r\\n        Add comment\\r\\n      </button>\\r\\n  );\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { AddCommentContainer } from \\\"./AddCommentContainer.js\\\";\\r\\n\\r\\nexport default function App() {\\r\\n  return <AddCommentContainer />;\\r\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js hidden\",\"children\":\"// TODO: update to import from stable\\r\\n// react instead of canary once the `use`\\r\\n// Hook is in a stable release of React\\r\\nimport React, { StrictMode } from 'react';\\r\\nimport { createRoot } from 'react-dom/client';\\r\\nimport './styles.css';\\r\\n\\r\\n// TODO: update this example to use\\r\\n// the Codesandbox Server Component\\r\\n// demo environment once it is created\\r\\nimport App from './App';\\r\\n\\r\\nconst root = createRoot(document.getElementById('root'));\\r\\nroot.render(\\r\\n  <StrictMode>\\r\\n    <App />\\r\\n  </StrictMode>\\r\\n);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"react\\\": \\\"canary\\\",\\r\\n    \\\"react-dom\\\": \\\"canary\\\",\\r\\n    \\\"react-scripts\\\": \\\"^5.0.0\\\",\\r\\n    \\\"react-error-boundary\\\": \\\"4.0.3\\\"\\r\\n  },\\r\\n  \\\"main\\\": \\\"/index.js\\\"\\r\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"troubleshooting\",\"children\":\"Troubleshooting \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"updating-an-input-in-a-transition-doesnt-work\",\"children\":\"在 transition 中无法更新输入框内容 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"不应将控制输入框的状态变量标记为 transition：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4,10}\",\"children\":\"const [text, setText] = useState('');\\r\\n// ...\\r\\nfunction handleChange(e) {\\r\\n  // ❌ 不应将受控输入框的状态变量标记为 transition\\r\\n  startTransition(() => {\\r\\n    setText(e.target.value);\\r\\n  });\\r\\n}\\r\\n// ...\\r\\nreturn <input value={text} onChange={handleChange} />;\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这是因为 transition 是非阻塞的，但是在响应更改事件时更新输入应该是同步的。如果想在输入时运行一个 transition，那么有两种做法：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"声明两个独立的状态变量：一个用于输入状态（它总是同步更新），另一个用于在 transition 中更新。这样，便可以使用同步状态控制输入，并将用于 transition 的状态变量（它将“滞后”于输入）传递给其余的渲染逻辑。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"或者使用一个状态变量，并添加 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useDeferredValue\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}]}],\"，它将“滞后”于实际值，并自动触发非阻塞的重新渲染以“追赶”新值。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"react-doesnt-treat-my-state-update-as-a-transition\",\"children\":\"React 没有将状态更新视为 transition \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当在 transition 中包装状态更新时，请确保它发生在 \",[\"$r\",\"code\",null,{\"children\":\"startTransition\"}],\" 调用期间：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"startTransition(() => {\\r\\n  // ✅ 在调用 startTransition 中更新状态\\r\\n  setPage('/about');\\r\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"传递给 \",[\"$r\",\"code\",null,{\"children\":\"startTransition\"}],\" 的函数必须是同步的。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你不能像这样将更新标记为 transition：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"startTransition(() => {\\r\\n  // ❌ 在调用 startTransition 后更新状态\\r\\n  setTimeout(() => {\\r\\n    setPage('/about');\\r\\n  }, 1000);\\r\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"相反，你可以这样做：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"setTimeout(() => {\\r\\n  startTransition(() => {\\r\\n    // ✅ 在调用 startTransition 中更新状态\\r\\n    setPage('/about');\\r\\n  });\\r\\n}, 1000);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"类似地，你不能像这样将更新标记为 transition：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"startTransition(async () => {\\r\\n  await someAsyncFunction();\\r\\n  // ❌ 在调用 startTransition 后更新状态\\r\\n  setPage('/about');\\r\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"然而，使用以下方法可以正常工作：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"await someAsyncFunction();\\r\\nstartTransition(() => {\\r\\n  // ✅ 在调用 startTransition 中更新状态\\r\\n  setPage('/about');\\r\\n});\\n\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"i-want-to-call-usetransition-from-outside-a-component\",\"children\":[\"我想在组件外部调用 \",[\"$r\",\"code\",null,{\"children\":\"useTransition\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useTransition\"}],\" 是一个 Hook，因此不能在组件外部调用。请使用独立的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/startTransition\",\"children\":[\"$r\",\"code\",null,{\"children\":\"startTransition\"}]}],\" 方法。它们的工作方式相同，但不提供 \",[\"$r\",\"code\",null,{\"children\":\"isPending\"}],\" 标记。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"the-function-i-pass-to-starttransition-executes-immediately\",\"children\":[\"我传递给 \",[\"$r\",\"code\",null,{\"children\":\"startTransition\"}],\" 的函数会立即执行 \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你运行这段代码，它将会打印 1, 2, 3：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,3,6}\",\"children\":\"console.log(1);\\r\\nstartTransition(() => {\\r\\n  console.log(2);\\r\\n  setPage('/about');\\r\\n});\\r\\nconsole.log(3);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"期望打印 1, 2, 3\"}],\"。传递给 \",[\"$r\",\"code\",null,{\"children\":\"startTransition\"}],\" 的函数不会被延迟执行。与浏览器的 \",[\"$r\",\"code\",null,{\"children\":\"setTimeout\"}],\" 不同，它不会延迟执行回调。React 会立即执行你的函数，但是在它运行的同时安排的任何状态更新都被标记为 transition。你可以将其想象为以下方式：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// React 运行的简易版本\\r\\n\\r\\nlet isInsideTransition = false;\\r\\n\\r\\nfunction startTransition(scope) {\\r\\n  isInsideTransition = true;\\r\\n  scope();\\r\\n  isInsideTransition = false;\\r\\n}\\r\\n\\r\\nfunction setState() {\\r\\n  if (isInsideTransition) {\\r\\n    // ……安排 transition 状态更新……\\r\\n  } else {\\r\\n    // ……安排紧急状态更新……\\r\\n  }\\r\\n}\\n\"}]}]]}]]","toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#usetransition\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"useTransition()\"}],\" \"]},{\"url\":\"#starttransition\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"startTransition\"}],\" 函数 \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#marking-a-state-update-as-a-non-blocking-transition\",\"depth\":3,\"text\":\"将状态更新标记为非阻塞的 transition \"},{\"url\":\"#updating-the-parent-component-in-a-transition\",\"depth\":3,\"text\":\"在 transition 中更新父组件 \"},{\"url\":\"#displaying-a-pending-visual-state-during-the-transition\",\"depth\":3,\"text\":\"在 transition 期间显示待处理的视觉状态 \"},{\"url\":\"#preventing-unwanted-loading-indicators\",\"depth\":3,\"text\":\"避免不必要的加载指示器 \"},{\"url\":\"#building-a-suspense-enabled-router\",\"depth\":3,\"text\":\"构建一个Suspense-enabled 的路由 \"},{\"url\":\"#displaying-an-error-to-users-with-error-boundary\",\"depth\":3,\"text\":\"Displaying an error to users with a error boundary \"},{\"url\":\"#troubleshooting\",\"depth\":2,\"text\":\"Troubleshooting \"},{\"url\":\"#updating-an-input-in-a-transition-doesnt-work\",\"depth\":3,\"text\":\"在 transition 中无法更新输入框内容 \"},{\"url\":\"#react-doesnt-treat-my-state-update-as-a-transition\",\"depth\":3,\"text\":\"React 没有将状态更新视为 transition \"},{\"url\":\"#i-want-to-call-usetransition-from-outside-a-component\",\"depth\":3,\"text\":[\"我想在组件外部调用 \",[\"$r\",\"code\",null,{\"children\":\"useTransition\"}],\" \"]},{\"url\":\"#the-function-i-pass-to-starttransition-executes-immediately\",\"depth\":3,\"text\":[\"我传递给 \",[\"$r\",\"code\",null,{\"children\":\"startTransition\"}],\" 的函数会立即执行 \"]}]","meta":{"title":"useTransition"}},"__N_SSG":true}